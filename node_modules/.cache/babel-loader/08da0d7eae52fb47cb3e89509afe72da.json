{"ast":null,"code":"import { memo, useMemo, useState, useCallback, createElement, Fragment, forwardRef, useRef, useEffect } from 'react';\nimport { useTheme, lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes, curveFromProp, useValueFormatter, useMotionConfig, useAnimatedPath, getLabelGenerator, DotsItem, withContainer, useDimensions, CartesianMarkers, bindDefs, SvgWrapper, ResponsiveWrapper, getRelativeCursor, isCursorInRect } from '@nivo/core';\nimport { ordinalColorsPropType, useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { axisPropType, Grid, Axes, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { LegendPropShape, BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { BasicTooltip, TableTooltip, Chip, useTooltip, Crosshair } from '@nivo/tooltip';\nimport { line, area } from 'd3-shape';\nimport { computeXYScalesForSeries } from '@nivo/scales';\nimport PropTypes from 'prop-types';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useSpring, animated } from '@react-spring/web';\nimport { Mesh as Mesh$2, useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar LinePointTooltip = function LinePointTooltip(_ref) {\n  var point = _ref.point;\n  return jsx(BasicTooltip, {\n    id: jsxs(\"span\", {\n      children: [\"x: \", jsx(\"strong\", {\n        children: point.data.xFormatted\n      }), \", y:\", ' ', jsx(\"strong\", {\n        children: point.data.yFormatted\n      })]\n    }),\n    enableChip: true,\n    color: point.serieColor\n  });\n};\n\nvar PointTooltip = memo(LinePointTooltip);\n\nvar SliceTooltip = function SliceTooltip(_ref) {\n  var slice = _ref.slice,\n      axis = _ref.axis;\n  var theme = useTheme();\n  var otherAxis = axis === 'x' ? 'y' : 'x';\n  return jsx(TableTooltip, {\n    rows: slice.points.map(function (point) {\n      return [jsx(Chip, {\n        color: point.serieColor,\n        style: theme.tooltip.chip\n      }, \"chip\"), point.serieId, jsx(\"span\", {\n        style: theme.tooltip.tableCellValue,\n        children: point.data[\"\".concat(otherAxis, \"Formatted\")]\n      }, \"value\")];\n    })\n  });\n};\n\nvar SliceTooltip$1 = memo(SliceTooltip);\nvar commonPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n      y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n    })).isRequired\n  })).isRequired,\n  xScale: PropTypes.object.isRequired,\n  xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  yScale: PropTypes.object.isRequired,\n  yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'slices', 'points', 'mesh', 'legends']), PropTypes.func])).isRequired,\n  curve: lineCurvePropType.isRequired,\n  axisTop: axisPropType,\n  axisRight: axisPropType,\n  axisBottom: axisPropType,\n  axisLeft: axisPropType,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  gridXValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  gridYValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  enablePoints: PropTypes.bool.isRequired,\n  pointSymbol: PropTypes.func,\n  pointSize: PropTypes.number.isRequired,\n  pointColor: PropTypes.any.isRequired,\n  pointBorderWidth: PropTypes.number.isRequired,\n  pointBorderColor: PropTypes.any.isRequired,\n  enablePointLabel: PropTypes.bool.isRequired,\n  pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    style: PropTypes.object\n  })),\n  colors: ordinalColorsPropType.isRequired,\n  enableArea: PropTypes.bool.isRequired,\n  areaOpacity: PropTypes.number.isRequired,\n  areaBlendMode: blendModePropType.isRequired,\n  areaBaselineValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  debugMesh: PropTypes.bool.isRequired,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n  debugSlices: PropTypes.bool.isRequired,\n  sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  enableCrosshair: PropTypes.bool.isRequired,\n  crosshairType: PropTypes.string.isRequired\n};\n\nvar LinePropTypes = _objectSpread2(_objectSpread2(_objectSpread2({}, commonPropTypes), {}, {\n  enablePointLabel: PropTypes.bool.isRequired,\n  role: PropTypes.string.isRequired,\n  useMesh: PropTypes.bool.isRequired\n}, motionPropTypes), defsPropTypes);\n\nvar LineCanvasPropTypes = _objectSpread2({\n  pixelRatio: PropTypes.number.isRequired\n}, commonPropTypes);\n\nvar commonDefaultProps = {\n  curve: 'linear',\n  xScale: {\n    type: 'point'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  layers: ['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'points', 'slices', 'mesh', 'legends'],\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: true,\n  enableGridY: true,\n  enablePoints: true,\n  pointSize: 6,\n  pointColor: {\n    from: 'color'\n  },\n  pointBorderWidth: 0,\n  pointBorderColor: {\n    theme: 'background'\n  },\n  enablePointLabel: false,\n  pointLabel: 'yFormatted',\n  colors: {\n    scheme: 'nivo'\n  },\n  enableArea: false,\n  areaBaselineValue: 0,\n  areaOpacity: 0.2,\n  areaBlendMode: 'normal',\n  lineWidth: 2,\n  legends: [],\n  isInteractive: true,\n  tooltip: PointTooltip,\n  enableSlices: false,\n  debugSlices: false,\n  sliceTooltip: SliceTooltip$1,\n  debugMesh: false,\n  enableCrosshair: true,\n  crosshairType: 'bottom-left'\n};\n\nvar LineDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  enablePointLabel: false,\n  useMesh: false,\n  animate: true,\n  motionConfig: 'gentle',\n  defs: [],\n  fill: [],\n  role: 'img'\n});\n\nvar LineCanvasDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1\n});\n\nvar useLineGenerator = function useLineGenerator(_ref) {\n  var curve = _ref.curve;\n  return useMemo(function () {\n    return line().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve));\n  }, [curve]);\n};\n\nvar useAreaGenerator = function useAreaGenerator(_ref2) {\n  var curve = _ref2.curve,\n      yScale = _ref2.yScale,\n      areaBaselineValue = _ref2.areaBaselineValue;\n  return useMemo(function () {\n    return area().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y1(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve)).y0(yScale(areaBaselineValue));\n  }, [curve, yScale, areaBaselineValue]);\n};\n\nvar usePoints = function usePoints(_ref3) {\n  var series = _ref3.series,\n      getPointColor = _ref3.getPointColor,\n      getPointBorderColor = _ref3.getPointBorderColor,\n      formatX = _ref3.formatX,\n      formatY = _ref3.formatY;\n  return useMemo(function () {\n    return series.reduce(function (acc, serie) {\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(serie.data.filter(function (datum) {\n        return datum.position.x !== null && datum.position.y !== null;\n      }).map(function (datum, i) {\n        var point = {\n          id: \"\".concat(serie.id, \".\").concat(i),\n          index: acc.length + i,\n          serieId: serie.id,\n          serieColor: serie.color,\n          x: datum.position.x,\n          y: datum.position.y\n        };\n        point.color = getPointColor(serie);\n        point.borderColor = getPointBorderColor(point);\n        point.data = _objectSpread2(_objectSpread2({}, datum.data), {}, {\n          xFormatted: formatX(datum.data.x),\n          yFormatted: formatY(datum.data.y)\n        });\n        return point;\n      })));\n    }, []);\n  }, [series, getPointColor, getPointBorderColor, formatX, formatY]);\n};\n\nvar useSlices = function useSlices(_ref4) {\n  var enableSlices = _ref4.enableSlices,\n      points = _ref4.points,\n      width = _ref4.width,\n      height = _ref4.height;\n  return useMemo(function () {\n    if (enableSlices === false) return [];\n\n    if (enableSlices === 'x') {\n      var map = new Map();\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!map.has(point.x)) map.set(point.x, [point]);else map.get(point.x).push(point);\n      });\n      return Array.from(map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref5, i, slices) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            x = _ref6[0],\n            slicePoints = _ref6[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var x0;\n        if (!prevSlice) x0 = x;else x0 = x - (x - prevSlice[0]) / 2;\n        var sliceWidth;\n        if (!nextSlice) sliceWidth = width - x0;else sliceWidth = x - x0 + (nextSlice[0] - x) / 2;\n        return {\n          id: x,\n          x0: x0,\n          x: x,\n          y0: 0,\n          y: 0,\n          width: sliceWidth,\n          height: height,\n          points: slicePoints.reverse()\n        };\n      });\n    } else if (enableSlices === 'y') {\n      var _map = new Map();\n\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!_map.has(point.y)) _map.set(point.y, [point]);else _map.get(point.y).push(point);\n      });\n      return Array.from(_map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref7, i, slices) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            y = _ref8[0],\n            slicePoints = _ref8[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var y0;\n        if (!prevSlice) y0 = y;else y0 = y - (y - prevSlice[0]) / 2;\n        var sliceHeight;\n        if (!nextSlice) sliceHeight = height - y0;else sliceHeight = y - y0 + (nextSlice[0] - y) / 2;\n        return {\n          id: y,\n          x0: 0,\n          x: 0,\n          y0: y0,\n          y: y,\n          width: width,\n          height: sliceHeight,\n          points: slicePoints.reverse()\n        };\n      });\n    }\n  }, [enableSlices, points]);\n};\n\nvar useLine = function useLine(_ref9) {\n  var data = _ref9.data,\n      _ref9$xScale = _ref9.xScale,\n      xScaleSpec = _ref9$xScale === void 0 ? LineDefaultProps.xScale : _ref9$xScale,\n      xFormat = _ref9.xFormat,\n      _ref9$yScale = _ref9.yScale,\n      yScaleSpec = _ref9$yScale === void 0 ? LineDefaultProps.yScale : _ref9$yScale,\n      yFormat = _ref9.yFormat,\n      width = _ref9.width,\n      height = _ref9.height,\n      _ref9$colors = _ref9.colors,\n      colors = _ref9$colors === void 0 ? LineDefaultProps.colors : _ref9$colors,\n      _ref9$curve = _ref9.curve,\n      curve = _ref9$curve === void 0 ? LineDefaultProps.curve : _ref9$curve,\n      _ref9$areaBaselineVal = _ref9.areaBaselineValue,\n      areaBaselineValue = _ref9$areaBaselineVal === void 0 ? LineDefaultProps.areaBaselineValue : _ref9$areaBaselineVal,\n      _ref9$pointColor = _ref9.pointColor,\n      pointColor = _ref9$pointColor === void 0 ? LineDefaultProps.pointColor : _ref9$pointColor,\n      _ref9$pointBorderColo = _ref9.pointBorderColor,\n      pointBorderColor = _ref9$pointBorderColo === void 0 ? LineDefaultProps.pointBorderColor : _ref9$pointBorderColo,\n      _ref9$enableSlices = _ref9.enableSlices,\n      enableSlices = _ref9$enableSlices === void 0 ? LineDefaultProps.enableSlicesTooltip : _ref9$enableSlices;\n  var formatX = useValueFormatter(xFormat);\n  var formatY = useValueFormatter(yFormat);\n  var getColor = useOrdinalColorScale(colors, 'id');\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      hiddenIds = _useState2[0],\n      setHiddenIds = _useState2[1];\n\n  var _useMemo = useMemo(function () {\n    return computeXYScalesForSeries(data.filter(function (item) {\n      return hiddenIds.indexOf(item.id) === -1;\n    }), xScaleSpec, yScaleSpec, width, height);\n  }, [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]),\n      xScale = _useMemo.xScale,\n      yScale = _useMemo.yScale,\n      rawSeries = _useMemo.series;\n\n  var _useMemo2 = useMemo(function () {\n    var dataWithColor = data.map(function (line) {\n      return {\n        id: line.id,\n        label: line.id,\n        color: getColor(line)\n      };\n    });\n    var series = dataWithColor.map(function (datum) {\n      return _objectSpread2(_objectSpread2({}, rawSeries.find(function (serie) {\n        return serie.id === datum.id;\n      })), {}, {\n        color: datum.color\n      });\n    }).filter(function (item) {\n      return Boolean(item.id);\n    });\n    var legendData = dataWithColor.map(function (item) {\n      return _objectSpread2(_objectSpread2({}, item), {}, {\n        hidden: !series.find(function (serie) {\n          return serie.id === item.id;\n        })\n      });\n    }).reverse();\n    return {\n      legendData: legendData,\n      series: series\n    };\n  }, [data, rawSeries, getColor]),\n      legendData = _useMemo2.legendData,\n      series = _useMemo2.series;\n\n  var toggleSerie = useCallback(function (id) {\n    setHiddenIds(function (state) {\n      return state.indexOf(id) > -1 ? state.filter(function (item) {\n        return item !== id;\n      }) : [].concat(_toConsumableArray(state), [id]);\n    });\n  }, []);\n  var points = usePoints({\n    series: series,\n    getPointColor: getPointColor,\n    getPointBorderColor: getPointBorderColor,\n    formatX: formatX,\n    formatY: formatY\n  });\n  var slices = useSlices({\n    enableSlices: enableSlices,\n    points: points,\n    width: width,\n    height: height\n  });\n  var lineGenerator = useLineGenerator({\n    curve: curve\n  });\n  var areaGenerator = useAreaGenerator({\n    curve: curve,\n    yScale: yScale,\n    areaBaselineValue: areaBaselineValue\n  });\n  return {\n    legendData: legendData,\n    toggleSerie: toggleSerie,\n    lineGenerator: lineGenerator,\n    areaGenerator: areaGenerator,\n    getColor: getColor,\n    series: series,\n    xScale: xScale,\n    yScale: yScale,\n    slices: slices,\n    points: points\n  };\n};\n\nvar AreaPath = function AreaPath(_ref) {\n  var areaBlendMode = _ref.areaBlendMode,\n      areaOpacity = _ref.areaOpacity,\n      color = _ref.color,\n      fill = _ref.fill,\n      path = _ref.path;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedPath = useAnimatedPath(path);\n  var animatedProps = useSpring({\n    color: color,\n    config: springConfig,\n    immediate: !animate\n  });\n  return jsx(animated.path, {\n    d: animatedPath,\n    fill: fill ? fill : animatedProps.color,\n    fillOpacity: areaOpacity,\n    strokeWidth: 0,\n    style: {\n      mixBlendMode: areaBlendMode\n    }\n  });\n};\n\nvar Areas = function Areas(_ref2) {\n  var areaGenerator = _ref2.areaGenerator,\n      areaOpacity = _ref2.areaOpacity,\n      areaBlendMode = _ref2.areaBlendMode,\n      lines = _ref2.lines;\n  var computedLines = lines.slice(0).reverse();\n  return jsx(\"g\", {\n    children: computedLines.map(function (line) {\n      return jsx(AreaPath, _objectSpread2({\n        path: areaGenerator(line.data.map(function (d) {\n          return d.position;\n        }))\n      }, _objectSpread2({\n        areaOpacity: areaOpacity,\n        areaBlendMode: areaBlendMode\n      }, line)), line.id);\n    })\n  });\n};\n\nvar Areas$1 = memo(Areas);\n\nvar LinesItem = function LinesItem(_ref) {\n  var lineGenerator = _ref.lineGenerator,\n      points = _ref.points,\n      color = _ref.color,\n      thickness = _ref.thickness;\n  var path = useMemo(function () {\n    return lineGenerator(points);\n  }, [lineGenerator, points]);\n  var animatedPath = useAnimatedPath(path);\n  return jsx(animated.path, {\n    d: animatedPath,\n    fill: \"none\",\n    strokeWidth: thickness,\n    stroke: color\n  });\n};\n\nvar LinesItem$1 = memo(LinesItem);\n\nvar Lines = function Lines(_ref) {\n  var lines = _ref.lines,\n      lineGenerator = _ref.lineGenerator,\n      lineWidth = _ref.lineWidth;\n  return lines.slice(0).reverse().map(function (_ref2) {\n    var id = _ref2.id,\n        data = _ref2.data,\n        color = _ref2.color;\n    return jsx(LinesItem$1, {\n      id: id,\n      points: data.map(function (d) {\n        return d.position;\n      }),\n      lineGenerator: lineGenerator,\n      color: color,\n      thickness: lineWidth\n    }, id);\n  });\n};\n\nvar Lines$1 = memo(Lines);\n\nvar SlicesItem = function SlicesItem(_ref) {\n  var slice = _ref.slice,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      tooltip = _ref.tooltip,\n      isCurrent = _ref.isCurrent,\n      setCurrent = _ref.setCurrent;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n    setCurrent(slice);\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseMove = useCallback(function (event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseLeave = useCallback(function () {\n    hideTooltip();\n    setCurrent(null);\n  }, [hideTooltip]);\n  return jsx(\"rect\", {\n    x: slice.x0,\n    y: slice.y0,\n    width: slice.width,\n    height: slice.height,\n    stroke: \"red\",\n    strokeWidth: debug ? 1 : 0,\n    strokeOpacity: 0.75,\n    fill: \"red\",\n    fillOpacity: isCurrent && debug ? 0.35 : 0,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave\n  });\n};\n\nvar SlicesItem$1 = memo(SlicesItem);\n\nvar Slices = function Slices(_ref) {\n  var slices = _ref.slices,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      height = _ref.height,\n      tooltip = _ref.tooltip,\n      current = _ref.current,\n      setCurrent = _ref.setCurrent;\n  return slices.map(function (slice) {\n    return jsx(SlicesItem$1, {\n      slice: slice,\n      axis: axis,\n      debug: debug,\n      height: height,\n      tooltip: tooltip,\n      setCurrent: setCurrent,\n      isCurrent: current !== null && current.id === slice.id\n    }, slice.id);\n  });\n};\n\nvar Slices$1 = memo(Slices);\n\nvar Points = function Points(_ref) {\n  var points = _ref.points,\n      symbol = _ref.symbol,\n      size = _ref.size,\n      borderWidth = _ref.borderWidth,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelYOffset = _ref.labelYOffset;\n  var theme = useTheme();\n  var getLabel = getLabelGenerator(label);\n  var mappedPoints = points.reverse().map(function (point) {\n    var mappedPoint = {\n      id: point.id,\n      x: point.x,\n      y: point.y,\n      datum: point.data,\n      fill: point.color,\n      stroke: point.borderColor,\n      label: enableLabel ? getLabel(point.data) : null\n    };\n    return mappedPoint;\n  });\n  return jsx(\"g\", {\n    children: mappedPoints.map(function (point) {\n      return jsx(DotsItem, {\n        x: point.x,\n        y: point.y,\n        datum: point.datum,\n        symbol: symbol,\n        size: size,\n        color: point.fill,\n        borderWidth: borderWidth,\n        borderColor: point.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        theme: theme\n      }, point.id);\n    })\n  });\n};\n\nvar Points$1 = memo(Points);\n\nvar Mesh = function Mesh(_ref) {\n  var points = _ref.points,\n      width = _ref.width,\n      height = _ref.height,\n      margin = _ref.margin,\n      setCurrent = _ref.setCurrent,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      debug = _ref.debug;\n\n  var _useTooltip = useTooltip(),\n      showTooltipAt = _useTooltip.showTooltipAt,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (point, event) {\n    showTooltipAt(createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseEnter && onMouseEnter(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]);\n  var handleMouseMove = useCallback(function (point, event) {\n    showTooltipAt(createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseMove && onMouseMove(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseMove]);\n  var handleMouseLeave = useCallback(function (point, event) {\n    hideTooltip();\n    setCurrent(null);\n    onMouseLeave && onMouseLeave(point, event);\n  }, [hideTooltip, setCurrent, onMouseLeave]);\n  var handleClick = useCallback(function (point, event) {\n    onClick && onClick(point, event);\n  }, [onClick]);\n  return jsx(Mesh$2, {\n    nodes: points,\n    width: width,\n    height: height,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    debug: debug\n  });\n};\n\nvar Mesh$1 = memo(Mesh);\n\nvar Line = function Line(props) {\n  var data = props.data,\n      xScaleSpec = props.xScale,\n      xFormat = props.xFormat,\n      yScaleSpec = props.yScale,\n      yFormat = props.yFormat,\n      layers = props.layers,\n      curve = props.curve,\n      areaBaselineValue = props.areaBaselineValue,\n      colors = props.colors,\n      partialMargin = props.margin,\n      width = props.width,\n      height = props.height,\n      axisTop = props.axisTop,\n      axisRight = props.axisRight,\n      axisBottom = props.axisBottom,\n      axisLeft = props.axisLeft,\n      enableGridX = props.enableGridX,\n      enableGridY = props.enableGridY,\n      gridXValues = props.gridXValues,\n      gridYValues = props.gridYValues,\n      lineWidth = props.lineWidth,\n      enableArea = props.enableArea,\n      areaOpacity = props.areaOpacity,\n      areaBlendMode = props.areaBlendMode,\n      enablePoints = props.enablePoints,\n      pointSymbol = props.pointSymbol,\n      pointSize = props.pointSize,\n      pointColor = props.pointColor,\n      pointBorderWidth = props.pointBorderWidth,\n      pointBorderColor = props.pointBorderColor,\n      enablePointLabel = props.enablePointLabel,\n      pointLabel = props.pointLabel,\n      pointLabelYOffset = props.pointLabelYOffset,\n      defs = props.defs,\n      fill = props.fill,\n      markers = props.markers,\n      legends = props.legends,\n      isInteractive = props.isInteractive,\n      useMesh = props.useMesh,\n      debugMesh = props.debugMesh,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      tooltip = props.tooltip,\n      enableSlices = props.enableSlices,\n      debugSlices = props.debugSlices,\n      sliceTooltip = props.sliceTooltip,\n      enableCrosshair = props.enableCrosshair,\n      crosshairType = props.crosshairType,\n      role = props.role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    xFormat: xFormat,\n    yScale: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor,\n    enableSlices: enableSlices\n  }),\n      legendData = _useLine.legendData,\n      toggleSerie = _useLine.toggleSerie,\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      slices = _useLine.slices,\n      points = _useLine.points;\n\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentSlice = _useState4[0],\n      setCurrentSlice = _useState4[1];\n\n  var layerById = {\n    grid: jsx(Grid, {\n      theme: theme,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }, \"grid\"),\n    markers: jsx(CartesianMarkers, {\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale,\n      theme: theme\n    }, \"markers\"),\n    axes: jsx(Axes, {\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      theme: theme,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, \"axes\"),\n    areas: null,\n    lines: jsx(Lines$1, {\n      lines: series,\n      lineGenerator: lineGenerator,\n      lineWidth: lineWidth\n    }, \"lines\"),\n    slices: null,\n    points: null,\n    crosshair: null,\n    mesh: null,\n    legends: legends.map(function (legend, i) {\n      return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        data: legend.data || legendData,\n        theme: theme,\n        toggleSerie: legend.toggleSerie ? toggleSerie : undefined\n      }), \"legend.\".concat(i));\n    })\n  };\n  var boundDefs = bindDefs(defs, series, fill);\n\n  if (enableArea) {\n    layerById.areas = jsx(Areas$1, {\n      areaGenerator: areaGenerator,\n      areaOpacity: areaOpacity,\n      areaBlendMode: areaBlendMode,\n      lines: series\n    }, \"areas\");\n  }\n\n  if (isInteractive && enableSlices !== false) {\n    layerById.slices = jsx(Slices$1, {\n      slices: slices,\n      axis: enableSlices,\n      debug: debugSlices,\n      height: innerHeight,\n      tooltip: sliceTooltip,\n      current: currentSlice,\n      setCurrent: setCurrentSlice\n    }, \"slices\");\n  }\n\n  if (enablePoints) {\n    layerById.points = jsx(Points$1, {\n      points: points,\n      symbol: pointSymbol,\n      size: pointSize,\n      color: getPointColor,\n      borderWidth: pointBorderWidth,\n      borderColor: getPointBorderColor,\n      enableLabel: enablePointLabel,\n      label: pointLabel,\n      labelYOffset: pointLabelYOffset\n    }, \"points\");\n  }\n\n  if (isInteractive && enableCrosshair) {\n    if (currentPoint !== null) {\n      layerById.crosshair = jsx(Crosshair, {\n        width: innerWidth,\n        height: innerHeight,\n        x: currentPoint.x,\n        y: currentPoint.y,\n        type: crosshairType\n      }, \"crosshair\");\n    }\n\n    if (currentSlice !== null) {\n      layerById.crosshair = jsx(Crosshair, {\n        width: innerWidth,\n        height: innerHeight,\n        x: currentSlice.x,\n        y: currentSlice.y,\n        type: enableSlices\n      }, \"crosshair\");\n    }\n  }\n\n  if (isInteractive && useMesh && enableSlices === false) {\n    layerById.mesh = jsx(Mesh$1, {\n      points: points,\n      width: innerWidth,\n      height: innerHeight,\n      margin: margin,\n      current: currentPoint,\n      setCurrent: setCurrentPoint,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      debug: debugMesh\n    }, \"mesh\");\n  }\n\n  return jsx(SvgWrapper, {\n    defs: boundDefs,\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    role: role,\n    children: layers.map(function (layer, i) {\n      if (typeof layer === 'function') {\n        return jsx(Fragment, {\n          children: layer(_objectSpread2(_objectSpread2({}, props), {}, {\n            innerWidth: innerWidth,\n            innerHeight: innerHeight,\n            series: series,\n            slices: slices,\n            points: points,\n            xScale: xScale,\n            yScale: yScale,\n            lineGenerator: lineGenerator,\n            areaGenerator: areaGenerator,\n            currentPoint: currentPoint,\n            setCurrentPoint: setCurrentPoint,\n            currentSlice: currentSlice,\n            setCurrentSlice: setCurrentSlice\n          }))\n        }, i);\n      }\n\n      return layerById[layer];\n    })\n  });\n};\n\nLine.defaultProps = LineDefaultProps;\nvar Line$1 = withContainer(Line);\n\nvar ResponsiveLine = function ResponsiveLine(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(Line$1, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nvar LineCanvas = function LineCanvas(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      pixelRatio = _ref.pixelRatio,\n      data = _ref.data,\n      xScaleSpec = _ref.xScale,\n      xFormat = _ref.xFormat,\n      yScaleSpec = _ref.yScale,\n      yFormat = _ref.yFormat,\n      curve = _ref.curve,\n      layers = _ref.layers,\n      colors = _ref.colors,\n      lineWidth = _ref.lineWidth,\n      enableArea = _ref.enableArea,\n      areaBaselineValue = _ref.areaBaselineValue,\n      areaOpacity = _ref.areaOpacity,\n      enablePoints = _ref.enablePoints,\n      pointSize = _ref.pointSize,\n      pointColor = _ref.pointColor,\n      pointBorderWidth = _ref.pointBorderWidth,\n      pointBorderColor = _ref.pointBorderColor,\n      enableGridX = _ref.enableGridX,\n      gridXValues = _ref.gridXValues,\n      enableGridY = _ref.enableGridY,\n      gridYValues = _ref.gridYValues,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      axisBottom = _ref.axisBottom,\n      axisLeft = _ref.axisLeft,\n      legends = _ref.legends,\n      isInteractive = _ref.isInteractive,\n      debugMesh = _ref.debugMesh,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      canvasRef = _ref.canvasRef;\n  var canvasEl = useRef(null);\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    xFormat: xFormat,\n    yScale: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor\n  }),\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      points = _useLine.points;\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: points,\n    width: innerWidth,\n    height: innerHeight,\n    debug: debugMesh\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  useEffect(function () {\n    if (canvasRef) {\n      canvasRef.current = canvasEl.current;\n    }\n\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (typeof layer === 'function') {\n        layer({\n          ctx: ctx,\n          innerWidth: innerWidth,\n          innerHeight: innerHeight,\n          series: series,\n          points: points,\n          xScale: xScale,\n          yScale: yScale,\n          lineWidth: lineWidth,\n          lineGenerator: lineGenerator,\n          areaGenerator: areaGenerator,\n          currentPoint: currentPoint,\n          setCurrentPoint: setCurrentPoint\n        });\n      }\n\n      if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n        ctx.lineWidth = theme.grid.line.strokeWidth;\n        ctx.strokeStyle = theme.grid.line.stroke;\n        enableGridX && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: xScale,\n          axis: 'x',\n          values: gridXValues\n        });\n        enableGridY && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: yScale,\n          axis: 'y',\n          values: gridYValues\n        });\n      }\n\n      if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      }\n\n      if (layer === 'areas' && enableArea === true) {\n        ctx.save();\n        ctx.globalAlpha = areaOpacity;\n        areaGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.fillStyle = serie.color;\n          ctx.beginPath();\n          areaGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.fill();\n        });\n        ctx.restore();\n      }\n\n      if (layer === 'lines') {\n        lineGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.strokeStyle = serie.color;\n          ctx.lineWidth = lineWidth;\n          ctx.beginPath();\n          lineGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.stroke();\n        });\n      }\n\n      if (layer === 'points' && enablePoints === true && pointSize > 0) {\n        points.forEach(function (point) {\n          ctx.fillStyle = point.color;\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI);\n          ctx.fill();\n\n          if (pointBorderWidth > 0) {\n            ctx.strokeStyle = point.borderColor;\n            ctx.lineWidth = pointBorderWidth;\n            ctx.stroke();\n          }\n        });\n      }\n\n      if (layer === 'mesh' && debugMesh === true) {\n        renderVoronoiToCanvas(ctx, voronoi);\n\n        if (currentPoint) {\n          renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index);\n        }\n      }\n\n      if (layer === 'legends') {\n        var legendData = series.map(function (serie) {\n          return {\n            id: serie.id,\n            label: serie.id,\n            color: serie.color\n          };\n        }).reverse();\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: legend.data || legendData,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      }\n    });\n  }, [canvasEl, outerWidth, outerHeight, layers, theme, lineGenerator, series, xScale, yScale, enableGridX, gridXValues, enableGridY, gridYValues, axisTop, axisRight, axisBottom, axisLeft, legends, points, enablePoints, pointSize, currentPoint]);\n  var getPointFromMouseEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null;\n    var pointIndex = delaunay.find(x - margin.left, y - margin.top);\n    return points[pointIndex];\n  }, [canvasEl, margin, innerWidth, innerHeight, delaunay]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseHover = useCallback(function (event) {\n    var point = getPointFromMouseEvent(event);\n    setCurrentPoint(point);\n\n    if (point) {\n      showTooltipFromEvent(createElement(tooltip, {\n        point: point\n      }), event);\n    } else {\n      hideTooltip();\n    }\n  }, [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    setCurrentPoint(null);\n    currentPoint && onMouseLeave && onMouseLeave(currentPoint, event);\n  }, [hideTooltip, setCurrentPoint, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      var point = getPointFromMouseEvent(event);\n      point && onClick(point, event);\n    }\n  }, [getPointFromMouseEvent, onClick]);\n  return jsx(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nLineCanvas.defaultProps = LineCanvasDefaultProps;\nvar LineCanvasWithContainer = withContainer(LineCanvas);\nvar LineCanvas$1 = forwardRef(function (props, ref) {\n  return jsx(LineCanvasWithContainer, _objectSpread2(_objectSpread2({}, props), {}, {\n    canvasRef: ref\n  }));\n});\n\nvar ResponsiveLineCanvas = function ResponsiveLineCanvas(props, ref) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(LineCanvas$1, _objectSpread2(_objectSpread2({\n        width: width,\n        height: height\n      }, props), {}, {\n        ref: ref\n      }));\n    }\n  });\n};\n\nvar ResponsiveLineCanvas$1 = forwardRef(ResponsiveLineCanvas);\nexport { Line$1 as Line, LineCanvas$1 as LineCanvas, LineCanvasDefaultProps, LineCanvasPropTypes, LineDefaultProps, LinePropTypes, ResponsiveLine, ResponsiveLineCanvas$1 as ResponsiveLineCanvas, useAreaGenerator, useLine, useLineGenerator, useSlices };","map":null,"metadata":{},"sourceType":"module"}