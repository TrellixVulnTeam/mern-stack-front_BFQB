{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\"; //받아오는 데이터//\n\nconst initialState = {\n  userLoading: false,\n  userData: null,\n  error: null,\n  token: null\n};\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    // Login\n    loginRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    loginSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    loginFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //join\n    joinRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    joinSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    joinFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //modify\n    modifyRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    modifySuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    modifyFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //exist\n    existRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    existSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    existFailure(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    deleteRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    deleteSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    deleteFailure(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    listRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    listSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    listFailure(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    user: userSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = userSlice;\nexport const {\n  modifyRequest,\n  modifyFailure,\n  modifySuccess,\n  existFailure,\n  existRequest,\n  existSuccess,\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  joinFailure,\n  joinRequest,\n  joinSuccess,\n  deleteFailure,\n  deleteRequest,\n  deleteSuccess\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/bitcamp/Desktop/1228/mern-stack-front/src/features/user/reducer/userSlice.ts"],"names":["configureStore","createSlice","initialState","userLoading","userData","error","token","userSlice","name","reducers","loginRequest","state","_action","loginSuccess","action","payload","loginFailure","joinRequest","joinSuccess","joinFailure","modifyRequest","modifySuccess","modifyFailure","existRequest","existSuccess","existFailure","deleteRequest","deleteSuccess","deleteFailure","listRequest","listSuccess","listFailure","store","reducer","user","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n//받아오는 데이터//\n\nexport interface UserDataPayload {\n  data: {\n    user: {\n      username: string;\n      email: string;\n      phone: string;\n      address: string;\n      password: string;\n      birth: string;\n      token: string;\n      user_interests: string;\n      job: string;\n    };\n  };\n}\nexport interface UserLoginDataPayload {\n  data: {\n    userData: {\n      username: string;\n      email: string;\n      phone: string;\n      address: string;\n      password: string;\n      birth: string;\n      user_interests: string;\n      job: string;\n    };\n    tokenData: string;\n  };\n}\nexport interface UserModifyDataPayload {\n  data: {\n    token: string;\n  };\n  config: {\n    data: {\n      username: string;\n      email: string;\n      phone: string;\n      address: string;\n      password: string;\n      birth: string;\n    };\n  };\n}\n\n//요청하는 데이터\nexport interface ExistPayload {\n  email: string;\n}\nexport interface RemovePayload {\n  email: string;\n}\nexport interface LoginPayload {\n  email: string;\n  password: string;\n  token: string;\n  username: string;\n  phone: string;\n  address: string;\n  birth: string;\n}\n\nexport interface ModifyPayload {\n  email: string;\n  phone: string;\n  address: string;\n  password: string;\n  birth: string;\n  job: string;\n  user_interests: string;\n}\nexport interface JoinPayload {\n  username: string;\n  email: string;\n  phone: string;\n  address: string;\n  password: string;\n  birth: string;\n  job: string;\n  user_interests: string;\n}\n//미들웨어\nexport interface UserState {\n  userLoading: boolean;\n  userData: any;\n  error: any;\n  token: null;\n}\n// api의 param 타입\nexport interface ParamType {\n  email: number;\n}\nconst initialState: UserState = {\n  userLoading: false,\n  userData: null,\n  error: null,\n  token: null,\n};\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    // Login\n    loginRequest(state: UserState, _action: PayloadAction<LoginPayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    loginSuccess(\n      state: UserState,\n      action: PayloadAction<UserLoginDataPayload>\n    ) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    loginFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    //join\n    joinRequest(state: UserState, _action: PayloadAction<JoinPayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    joinSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n    joinFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    //modify\n    modifyRequest(state: UserState, _action: PayloadAction<ModifyPayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    modifySuccess(\n      state: UserState,\n      action: PayloadAction<UserModifyDataPayload>\n    ) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n    modifyFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    //exist\n    existRequest(state: UserState, _action: PayloadAction<ExistPayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    existSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n    existFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    deleteRequest(state: UserState, _action: PayloadAction<RemovePayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    deleteSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n    deleteFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    listRequest(state: UserState, _action: PayloadAction<RemovePayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n    listSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n    listFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n  },\n});\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = userSlice;\nexport const {\n  modifyRequest,\n  modifyFailure,\n  modifySuccess,\n  existFailure,\n  existRequest,\n  existSuccess,\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  joinFailure,\n  joinRequest,\n  joinSuccess,\n  deleteFailure,\n  deleteRequest,\n  deleteSuccess,\n} = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}