{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport boardAPI from \"../reducer/boardAPI\";\nimport { createRequest, createSuccess, createFailure } from \"../reducer/boardSlice\";\n\nfunction* create(action) {\n  try {\n    alert(\"여긴 create\");\n    const result = yield call(boardAPI.CreateAPI, action.payload);\n    yield put(createSuccess(result));\n  } catch (error) {\n    yield put(createFailure(error));\n  }\n} // Watch 함수\n\n\nexport function* watchBoardCreate() {\n  yield takeLatest(createRequest.type, create); // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n  // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n}","map":{"version":3,"sources":["C:/Users/bitcamp/Desktop/자비스12-21/jarviis-msa-frontend/src/features/board/module/boardSaga.ts"],"names":["call","put","takeLatest","boardAPI","createRequest","createSuccess","createFailure","create","action","alert","result","CreateAPI","payload","error","watchBoardCreate","type"],"mappings":"AACA,SAASA,IAAT,EAAsBC,GAAtB,EAA2BC,UAA3B,QAA6C,oBAA7C;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAAuCC,aAAvC,EAAsDC,aAAtD,EAAqEC,aAArE,QAA0F,uBAA1F;;AAGA,UAAUC,MAAV,CAAiBC,MAAjB,EAA2D;AACvD,MAAI;AACAC,IAAAA,KAAK,CAAC,WAAD,CAAL;AACF,UAAMC,MAAiB,GAAG,MAAMV,IAAI,CAClCG,QAAQ,CAACQ,SADyB,EAElCH,MAAM,CAACI,OAF2B,CAApC;AAIA,UAAMX,GAAG,CAACI,aAAa,CAACK,MAAD,CAAd,CAAT;AAED,GARD,CAQE,OAAOG,KAAP,EAAmB;AACnB,UAAMZ,GAAG,CAACK,aAAa,CAACO,KAAD,CAAd,CAAT;AACD;AACF,C,CAGD;;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMZ,UAAU,CAACE,aAAa,CAACW,IAAf,EAAqBR,MAArB,CAAhB,CADkC,CAElC;AACA;AACD","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, delay, put, takeLatest } from \"redux-saga/effects\";\nimport boardAPI from \"../reducer/boardAPI\";\nimport { CreateDataPayload, BoardData, createRequest, createSuccess, createFailure } from \"../reducer/boardSlice\";\n\n\nfunction* create(action: PayloadAction<CreateDataPayload>) {\n    try {\n        alert(\"여긴 create\")\n      const result: BoardData = yield call(\n        boardAPI.CreateAPI,\n        action.payload\n      );\n      yield put(createSuccess(result));\n      \n    } catch (error: any) {\n      yield put(createFailure(error))\n    }\n  }\n\n\n  // Watch 함수\n  export function* watchBoardCreate() {\n    yield takeLatest(createRequest.type, create);\n    // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n    // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n  }\n  "]},"metadata":{},"sourceType":"module"}