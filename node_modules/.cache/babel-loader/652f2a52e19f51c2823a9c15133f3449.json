{"ast":null,"code":"import { useMemo, useState, useCallback, createElement, Fragment as Fragment$1, useRef, useEffect } from 'react';\nimport { usePropertyAccessor, useValueFormatter, degreesToRadians, radiansToDegrees, Container, useDimensions, bindDefs, SvgWrapper, ResponsiveWrapper, useTheme, getRelativeCursor } from '@nivo/core';\nimport { useArcGenerator, computeArcBoundingBox, ArcsLayer, ArcLinkLabelsLayer, ArcLabelsLayer, useArcLabels, useArcLinkLabels, drawCanvasArcLinkLabels, drawCanvasArcLabels, findArcUnderCursor } from '@nivo/arcs';\nimport { BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { pie } from 'd3-shape';\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { BasicTooltip, useTooltip } from '@nivo/tooltip';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar PieLegends = function PieLegends(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      legends = _ref.legends,\n      data = _ref.data,\n      toggleSerie = _ref.toggleSerie;\n  return jsx(Fragment, {\n    children: legends.map(function (legend, i) {\n      var _legend$data;\n\n      return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n        containerWidth: width,\n        containerHeight: height,\n        data: (_legend$data = legend.data) !== null && _legend$data !== void 0 ? _legend$data : data,\n        toggleSerie: legend.toggleSerie ? toggleSerie : undefined\n      }), i);\n    })\n  });\n};\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar PieTooltip = function PieTooltip(_ref) {\n  var datum = _ref.datum;\n  return jsx(BasicTooltip, {\n    id: datum.id,\n    value: datum.formattedValue,\n    enableChip: true,\n    color: datum.color\n  });\n};\n\nvar _window$devicePixelRa;\n\nvar defaultProps = {\n  id: 'id',\n  value: 'value',\n  sortByValue: false,\n  innerRadius: 0,\n  padAngle: 0,\n  cornerRadius: 0,\n  layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n  startAngle: 0,\n  endAngle: 360,\n  fit: true,\n  activeInnerRadiusOffset: 0,\n  activeOuterRadiusOffset: 0,\n  borderWidth: 0,\n  borderColor: {\n    from: 'color',\n    modifiers: [['darker', 1]]\n  },\n  enableArcLabels: true,\n  arcLabel: 'formattedValue',\n  arcLabelsSkipAngle: 0,\n  arcLabelsRadiusOffset: 0.5,\n  arcLabelsTextColor: {\n    theme: 'labels.text.fill'\n  },\n  enableArcLinkLabels: true,\n  arcLinkLabel: 'id',\n  arcLinkLabelsSkipAngle: 0,\n  arcLinkLabelsOffset: 0,\n  arcLinkLabelsDiagonalLength: 16,\n  arcLinkLabelsStraightLength: 24,\n  arcLinkLabelsThickness: 1,\n  arcLinkLabelsTextOffset: 6,\n  arcLinkLabelsTextColor: {\n    theme: 'labels.text.fill'\n  },\n  arcLinkLabelsColor: {\n    theme: 'axis.ticks.line.stroke'\n  },\n  colors: {\n    scheme: 'nivo'\n  },\n  defs: [],\n  fill: [],\n  isInteractive: true,\n  animate: true,\n  motionConfig: 'gentle',\n  transitionMode: 'innerRadius',\n  tooltip: PieTooltip,\n  legends: [],\n  role: 'img',\n  pixelRatio: typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) !== null && _window$devicePixelRa !== void 0 ? _window$devicePixelRa : 1 : 1\n};\n\nvar useNormalizedData = function useNormalizedData(_ref) {\n  var data = _ref.data,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? defaultProps.id : _ref$id,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? defaultProps.value : _ref$value,\n      valueFormat = _ref.valueFormat,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors;\n  var getId = usePropertyAccessor(id);\n  var getValue = usePropertyAccessor(value);\n  var formatValue = useValueFormatter(valueFormat);\n  var getColor = useOrdinalColorScale(colors, 'id');\n  return useMemo(function () {\n    return data.map(function (datum) {\n      var _datum$label;\n\n      var datumId = getId(datum);\n      var datumValue = getValue(datum);\n      var normalizedDatum = {\n        id: datumId,\n        label: (_datum$label = datum.label) !== null && _datum$label !== void 0 ? _datum$label : datumId,\n        hidden: false,\n        value: datumValue,\n        formattedValue: formatValue(datumValue),\n        data: datum\n      };\n      return _objectSpread2(_objectSpread2({}, normalizedDatum), {}, {\n        color: getColor(normalizedDatum)\n      });\n    });\n  }, [data, getId, getValue, formatValue, getColor]);\n};\n\nvar usePieArcs = function usePieArcs(_ref2) {\n  var data = _ref2.data,\n      startAngle = _ref2.startAngle,\n      endAngle = _ref2.endAngle,\n      innerRadius = _ref2.innerRadius,\n      outerRadius = _ref2.outerRadius,\n      padAngle = _ref2.padAngle,\n      sortByValue = _ref2.sortByValue,\n      activeId = _ref2.activeId,\n      activeInnerRadiusOffset = _ref2.activeInnerRadiusOffset,\n      activeOuterRadiusOffset = _ref2.activeOuterRadiusOffset,\n      hiddenIds = _ref2.hiddenIds;\n  var pie$1 = useMemo(function () {\n    var innerPie = pie().value(function (d) {\n      return d.value;\n    }).startAngle(degreesToRadians(startAngle)).endAngle(degreesToRadians(endAngle)).padAngle(degreesToRadians(padAngle));\n\n    if (!sortByValue) {\n      innerPie.sortValues(null);\n    }\n\n    return innerPie;\n  }, [startAngle, endAngle, padAngle, sortByValue]);\n  return useMemo(function () {\n    var hiddenData = data.filter(function (item) {\n      return !hiddenIds.includes(item.id);\n    });\n    var dataWithArc = pie$1(hiddenData).map(function (arc) {\n      var angle = Math.abs(arc.endAngle - arc.startAngle);\n      return _objectSpread2(_objectSpread2({}, arc.data), {}, {\n        arc: {\n          index: arc.index,\n          startAngle: arc.startAngle,\n          endAngle: arc.endAngle,\n          innerRadius: activeId === arc.data.id ? innerRadius - activeInnerRadiusOffset : innerRadius,\n          outerRadius: activeId === arc.data.id ? outerRadius + activeOuterRadiusOffset : outerRadius,\n          thickness: outerRadius - innerRadius,\n          padAngle: arc.padAngle,\n          angle: angle,\n          angleDeg: radiansToDegrees(angle)\n        }\n      });\n    });\n    var legendData = data.map(function (item) {\n      return _objectSpread2(_objectSpread2({}, item), {}, {\n        hidden: hiddenIds.includes(item.id)\n      });\n    });\n    return {\n      dataWithArc: dataWithArc,\n      legendData: legendData\n    };\n  }, [pie$1, data, hiddenIds, activeId, innerRadius, activeInnerRadiusOffset, outerRadius, activeOuterRadiusOffset]);\n};\n\nvar usePie = function usePie(_ref3) {\n  var data = _ref3.data,\n      radius = _ref3.radius,\n      innerRadius = _ref3.innerRadius,\n      _ref3$startAngle = _ref3.startAngle,\n      startAngle = _ref3$startAngle === void 0 ? defaultProps.startAngle : _ref3$startAngle,\n      _ref3$endAngle = _ref3.endAngle,\n      endAngle = _ref3$endAngle === void 0 ? defaultProps.endAngle : _ref3$endAngle,\n      _ref3$padAngle = _ref3.padAngle,\n      padAngle = _ref3$padAngle === void 0 ? defaultProps.padAngle : _ref3$padAngle,\n      _ref3$sortByValue = _ref3.sortByValue,\n      sortByValue = _ref3$sortByValue === void 0 ? defaultProps.sortByValue : _ref3$sortByValue,\n      _ref3$cornerRadius = _ref3.cornerRadius,\n      cornerRadius = _ref3$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref3$cornerRadius,\n      _ref3$activeInnerRadi = _ref3.activeInnerRadiusOffset,\n      activeInnerRadiusOffset = _ref3$activeInnerRadi === void 0 ? defaultProps.activeInnerRadiusOffset : _ref3$activeInnerRadi,\n      _ref3$activeOuterRadi = _ref3.activeOuterRadiusOffset,\n      activeOuterRadiusOffset = _ref3$activeOuterRadi === void 0 ? defaultProps.activeOuterRadiusOffset : _ref3$activeOuterRadi;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeId = _useState2[0],\n      setActiveId = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hiddenIds = _useState4[0],\n      setHiddenIds = _useState4[1];\n\n  var pieArcs = usePieArcs({\n    data: data,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: innerRadius,\n    outerRadius: radius,\n    padAngle: padAngle,\n    sortByValue: sortByValue,\n    activeId: activeId,\n    activeInnerRadiusOffset: activeInnerRadiusOffset,\n    activeOuterRadiusOffset: activeOuterRadiusOffset,\n    hiddenIds: hiddenIds\n  });\n  var toggleSerie = useCallback(function (id) {\n    setHiddenIds(function (state) {\n      return state.indexOf(id) > -1 ? state.filter(function (item) {\n        return item !== id;\n      }) : [].concat(_toConsumableArray(state), [id]);\n    });\n  }, []);\n  var arcGenerator = useArcGenerator({\n    cornerRadius: cornerRadius,\n    padAngle: degreesToRadians(padAngle)\n  });\n  return _objectSpread2(_objectSpread2({}, pieArcs), {}, {\n    arcGenerator: arcGenerator,\n    setActiveId: setActiveId,\n    toggleSerie: toggleSerie\n  });\n};\n\nvar usePieFromBox = function usePieFromBox(_ref4) {\n  var data = _ref4.data,\n      width = _ref4.width,\n      height = _ref4.height,\n      _ref4$innerRadius = _ref4.innerRadius,\n      innerRadiusRatio = _ref4$innerRadius === void 0 ? defaultProps.innerRadius : _ref4$innerRadius,\n      _ref4$startAngle = _ref4.startAngle,\n      startAngle = _ref4$startAngle === void 0 ? defaultProps.startAngle : _ref4$startAngle,\n      _ref4$endAngle = _ref4.endAngle,\n      endAngle = _ref4$endAngle === void 0 ? defaultProps.endAngle : _ref4$endAngle,\n      _ref4$padAngle = _ref4.padAngle,\n      padAngle = _ref4$padAngle === void 0 ? defaultProps.padAngle : _ref4$padAngle,\n      _ref4$sortByValue = _ref4.sortByValue,\n      sortByValue = _ref4$sortByValue === void 0 ? defaultProps.sortByValue : _ref4$sortByValue,\n      _ref4$cornerRadius = _ref4.cornerRadius,\n      cornerRadius = _ref4$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref4$cornerRadius,\n      _ref4$fit = _ref4.fit,\n      fit = _ref4$fit === void 0 ? defaultProps.fit : _ref4$fit,\n      _ref4$activeInnerRadi = _ref4.activeInnerRadiusOffset,\n      activeInnerRadiusOffset = _ref4$activeInnerRadi === void 0 ? defaultProps.activeInnerRadiusOffset : _ref4$activeInnerRadi,\n      _ref4$activeOuterRadi = _ref4.activeOuterRadiusOffset,\n      activeOuterRadiusOffset = _ref4$activeOuterRadi === void 0 ? defaultProps.activeOuterRadiusOffset : _ref4$activeOuterRadi;\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      activeId = _useState6[0],\n      setActiveId = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hiddenIds = _useState8[0],\n      setHiddenIds = _useState8[1];\n\n  var computedProps = useMemo(function () {\n    var radius = Math.min(width, height) / 2;\n    var innerRadius = radius * Math.min(innerRadiusRatio, 1);\n    var centerX = width / 2;\n    var centerY = height / 2;\n    var boundingBox;\n\n    if (fit) {\n      var _computeArcBoundingBo = computeArcBoundingBox(centerX, centerY, radius, startAngle - 90, endAngle - 90),\n          points = _computeArcBoundingBo.points,\n          box = _objectWithoutProperties(_computeArcBoundingBo, [\"points\"]);\n\n      var ratio = Math.min(width / box.width, height / box.height);\n      var adjustedBox = {\n        width: box.width * ratio,\n        height: box.height * ratio\n      };\n      adjustedBox.x = (width - adjustedBox.width) / 2;\n      adjustedBox.y = (height - adjustedBox.height) / 2;\n      centerX = (centerX - box.x) / box.width * box.width * ratio + adjustedBox.x;\n      centerY = (centerY - box.y) / box.height * box.height * ratio + adjustedBox.y;\n      boundingBox = {\n        box: box,\n        ratio: ratio,\n        points: points\n      };\n      radius = radius * ratio;\n      innerRadius = innerRadius * ratio;\n    }\n\n    return {\n      centerX: centerX,\n      centerY: centerY,\n      radius: radius,\n      innerRadius: innerRadius,\n      debug: boundingBox\n    };\n  }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius]);\n  var pieArcs = usePieArcs({\n    data: data,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: computedProps.innerRadius,\n    outerRadius: computedProps.radius,\n    padAngle: padAngle,\n    sortByValue: sortByValue,\n    activeId: activeId,\n    activeInnerRadiusOffset: activeInnerRadiusOffset,\n    activeOuterRadiusOffset: activeOuterRadiusOffset,\n    hiddenIds: hiddenIds\n  });\n  var toggleSerie = useCallback(function (id) {\n    setHiddenIds(function (state) {\n      return state.indexOf(id) > -1 ? state.filter(function (item) {\n        return item !== id;\n      }) : [].concat(_toConsumableArray(state), [id]);\n    });\n  }, []);\n  var arcGenerator = useArcGenerator({\n    cornerRadius: cornerRadius,\n    padAngle: degreesToRadians(padAngle)\n  });\n  return _objectSpread2(_objectSpread2({\n    arcGenerator: arcGenerator,\n    setActiveId: setActiveId,\n    toggleSerie: toggleSerie\n  }, pieArcs), computedProps);\n};\n\nvar usePieLayerContext = function usePieLayerContext(_ref5) {\n  var dataWithArc = _ref5.dataWithArc,\n      arcGenerator = _ref5.arcGenerator,\n      centerX = _ref5.centerX,\n      centerY = _ref5.centerY,\n      radius = _ref5.radius,\n      innerRadius = _ref5.innerRadius;\n  return useMemo(function () {\n    return {\n      dataWithArc: dataWithArc,\n      arcGenerator: arcGenerator,\n      centerX: centerX,\n      centerY: centerY,\n      radius: radius,\n      innerRadius: innerRadius\n    };\n  }, [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]);\n};\n\nvar Arcs = function Arcs(_ref) {\n  var center = _ref.center,\n      data = _ref.data,\n      arcGenerator = _ref.arcGenerator,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      isInteractive = _ref.isInteractive,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      setActiveId = _ref.setActiveId,\n      tooltip = _ref.tooltip,\n      transitionMode = _ref.transitionMode;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleClick = useMemo(function () {\n    if (!isInteractive) return undefined;\n    return function (datum, event) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(datum, event);\n    };\n  }, [isInteractive, onClick]);\n  var handleMouseEnter = useMemo(function () {\n    if (!isInteractive) return undefined;\n    return function (datum, event) {\n      showTooltipFromEvent(createElement(tooltip, {\n        datum: datum\n      }), event);\n      setActiveId(datum.id);\n      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(datum, event);\n    };\n  }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter]);\n  var handleMouseMove = useMemo(function () {\n    if (!isInteractive) return undefined;\n    return function (datum, event) {\n      showTooltipFromEvent(createElement(tooltip, {\n        datum: datum\n      }), event);\n      onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(datum, event);\n    };\n  }, [isInteractive, showTooltipFromEvent, onMouseMove]);\n  var handleMouseLeave = useMemo(function () {\n    if (!isInteractive) return undefined;\n    return function (datum, event) {\n      hideTooltip();\n      setActiveId(null);\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(datum, event);\n    };\n  }, [isInteractive, hideTooltip, setActiveId, onMouseLeave]);\n  return jsx(ArcsLayer, {\n    center: center,\n    data: data,\n    arcGenerator: arcGenerator,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    transitionMode: transitionMode,\n    onClick: handleClick,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave\n  });\n};\n\nvar InnerPie = function InnerPie(_ref) {\n  var data = _ref.data,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? defaultProps.id : _ref$id,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? defaultProps.value : _ref$value,\n      valueFormat = _ref.valueFormat,\n      _ref$sortByValue = _ref.sortByValue,\n      sortByValue = _ref$sortByValue === void 0 ? defaultProps.sortByValue : _ref$sortByValue,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? defaultProps.layers : _ref$layers,\n      _ref$startAngle = _ref.startAngle,\n      startAngle = _ref$startAngle === void 0 ? defaultProps.startAngle : _ref$startAngle,\n      _ref$endAngle = _ref.endAngle,\n      endAngle = _ref$endAngle === void 0 ? defaultProps.endAngle : _ref$endAngle,\n      _ref$padAngle = _ref.padAngle,\n      padAngle = _ref$padAngle === void 0 ? defaultProps.padAngle : _ref$padAngle,\n      _ref$fit = _ref.fit,\n      fit = _ref$fit === void 0 ? defaultProps.fit : _ref$fit,\n      _ref$innerRadius = _ref.innerRadius,\n      innerRadiusRatio = _ref$innerRadius === void 0 ? defaultProps.innerRadius : _ref$innerRadius,\n      _ref$cornerRadius = _ref.cornerRadius,\n      cornerRadius = _ref$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref$cornerRadius,\n      _ref$activeInnerRadiu = _ref.activeInnerRadiusOffset,\n      activeInnerRadiusOffset = _ref$activeInnerRadiu === void 0 ? defaultProps.activeInnerRadiusOffset : _ref$activeInnerRadiu,\n      _ref$activeOuterRadiu = _ref.activeOuterRadiusOffset,\n      activeOuterRadiusOffset = _ref$activeOuterRadiu === void 0 ? defaultProps.activeOuterRadiusOffset : _ref$activeOuterRadiu,\n      width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? defaultProps.borderWidth : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? defaultProps.borderColor : _ref$borderColor,\n      _ref$enableArcLabels = _ref.enableArcLabels,\n      enableArcLabels = _ref$enableArcLabels === void 0 ? defaultProps.enableArcLabels : _ref$enableArcLabels,\n      _ref$arcLabel = _ref.arcLabel,\n      arcLabel = _ref$arcLabel === void 0 ? defaultProps.arcLabel : _ref$arcLabel,\n      _ref$arcLabelsSkipAng = _ref.arcLabelsSkipAngle,\n      arcLabelsSkipAngle = _ref$arcLabelsSkipAng === void 0 ? defaultProps.arcLabelsSkipAngle : _ref$arcLabelsSkipAng,\n      _ref$arcLabelsTextCol = _ref.arcLabelsTextColor,\n      arcLabelsTextColor = _ref$arcLabelsTextCol === void 0 ? defaultProps.arcLabelsTextColor : _ref$arcLabelsTextCol,\n      _ref$arcLabelsRadiusO = _ref.arcLabelsRadiusOffset,\n      arcLabelsRadiusOffset = _ref$arcLabelsRadiusO === void 0 ? defaultProps.arcLabelsRadiusOffset : _ref$arcLabelsRadiusO,\n      arcLabelsComponent = _ref.arcLabelsComponent,\n      _ref$enableArcLinkLab = _ref.enableArcLinkLabels,\n      enableArcLinkLabels = _ref$enableArcLinkLab === void 0 ? defaultProps.enableArcLinkLabels : _ref$enableArcLinkLab,\n      _ref$arcLinkLabel = _ref.arcLinkLabel,\n      arcLinkLabel = _ref$arcLinkLabel === void 0 ? defaultProps.arcLinkLabel : _ref$arcLinkLabel,\n      _ref$arcLinkLabelsSki = _ref.arcLinkLabelsSkipAngle,\n      arcLinkLabelsSkipAngle = _ref$arcLinkLabelsSki === void 0 ? defaultProps.arcLinkLabelsSkipAngle : _ref$arcLinkLabelsSki,\n      _ref$arcLinkLabelsOff = _ref.arcLinkLabelsOffset,\n      arcLinkLabelsOffset = _ref$arcLinkLabelsOff === void 0 ? defaultProps.arcLinkLabelsOffset : _ref$arcLinkLabelsOff,\n      _ref$arcLinkLabelsDia = _ref.arcLinkLabelsDiagonalLength,\n      arcLinkLabelsDiagonalLength = _ref$arcLinkLabelsDia === void 0 ? defaultProps.arcLinkLabelsDiagonalLength : _ref$arcLinkLabelsDia,\n      _ref$arcLinkLabelsStr = _ref.arcLinkLabelsStraightLength,\n      arcLinkLabelsStraightLength = _ref$arcLinkLabelsStr === void 0 ? defaultProps.arcLinkLabelsStraightLength : _ref$arcLinkLabelsStr,\n      _ref$arcLinkLabelsThi = _ref.arcLinkLabelsThickness,\n      arcLinkLabelsThickness = _ref$arcLinkLabelsThi === void 0 ? defaultProps.arcLinkLabelsThickness : _ref$arcLinkLabelsThi,\n      _ref$arcLinkLabelsTex = _ref.arcLinkLabelsTextOffset,\n      arcLinkLabelsTextOffset = _ref$arcLinkLabelsTex === void 0 ? defaultProps.arcLinkLabelsTextOffset : _ref$arcLinkLabelsTex,\n      _ref$arcLinkLabelsTex2 = _ref.arcLinkLabelsTextColor,\n      arcLinkLabelsTextColor = _ref$arcLinkLabelsTex2 === void 0 ? defaultProps.arcLinkLabelsTextColor : _ref$arcLinkLabelsTex2,\n      _ref$arcLinkLabelsCol = _ref.arcLinkLabelsColor,\n      arcLinkLabelsColor = _ref$arcLinkLabelsCol === void 0 ? defaultProps.arcLinkLabelsColor : _ref$arcLinkLabelsCol,\n      arcLinkLabelComponent = _ref.arcLinkLabelComponent,\n      _ref$defs = _ref.defs,\n      defs = _ref$defs === void 0 ? defaultProps.defs : _ref$defs,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? defaultProps.fill : _ref$fill,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? defaultProps.isInteractive : _ref$isInteractive,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? defaultProps.tooltip : _ref$tooltip,\n      _ref$transitionMode = _ref.transitionMode,\n      transitionMode = _ref$transitionMode === void 0 ? defaultProps.transitionMode : _ref$transitionMode,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? defaultProps.legends : _ref$legends,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? defaultProps.role : _ref$role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight,\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight;\n\n  var normalizedData = useNormalizedData({\n    data: data,\n    id: id,\n    value: value,\n    valueFormat: valueFormat,\n    colors: colors\n  });\n\n  var _usePieFromBox = usePieFromBox({\n    data: normalizedData,\n    width: innerWidth,\n    height: innerHeight,\n    fit: fit,\n    innerRadius: innerRadiusRatio,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    padAngle: padAngle,\n    sortByValue: sortByValue,\n    cornerRadius: cornerRadius,\n    activeInnerRadiusOffset: activeInnerRadiusOffset,\n    activeOuterRadiusOffset: activeOuterRadiusOffset\n  }),\n      dataWithArc = _usePieFromBox.dataWithArc,\n      legendData = _usePieFromBox.legendData,\n      arcGenerator = _usePieFromBox.arcGenerator,\n      centerX = _usePieFromBox.centerX,\n      centerY = _usePieFromBox.centerY,\n      radius = _usePieFromBox.radius,\n      innerRadius = _usePieFromBox.innerRadius,\n      setActiveId = _usePieFromBox.setActiveId,\n      toggleSerie = _usePieFromBox.toggleSerie;\n\n  var boundDefs = bindDefs(defs, dataWithArc, fill);\n  var layerById = {\n    arcLinkLabels: null,\n    arcs: null,\n    arcLabels: null,\n    legends: null\n  };\n\n  if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n    layerById.arcLinkLabels = jsx(ArcLinkLabelsLayer, {\n      center: [centerX, centerY],\n      data: dataWithArc,\n      label: arcLinkLabel,\n      skipAngle: arcLinkLabelsSkipAngle,\n      offset: arcLinkLabelsOffset,\n      diagonalLength: arcLinkLabelsDiagonalLength,\n      straightLength: arcLinkLabelsStraightLength,\n      strokeWidth: arcLinkLabelsThickness,\n      textOffset: arcLinkLabelsTextOffset,\n      textColor: arcLinkLabelsTextColor,\n      linkColor: arcLinkLabelsColor,\n      component: arcLinkLabelComponent\n    }, \"arcLinkLabels\");\n  }\n\n  if (layers.includes('arcs')) {\n    layerById.arcs = jsx(Arcs, {\n      center: [centerX, centerY],\n      data: dataWithArc,\n      arcGenerator: arcGenerator,\n      borderWidth: borderWidth,\n      borderColor: borderColor,\n      isInteractive: isInteractive,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      setActiveId: setActiveId,\n      tooltip: tooltip,\n      transitionMode: transitionMode\n    }, \"arcs\");\n  }\n\n  if (enableArcLabels && layers.includes('arcLabels')) {\n    layerById.arcLabels = jsx(ArcLabelsLayer, {\n      center: [centerX, centerY],\n      data: dataWithArc,\n      label: arcLabel,\n      radiusOffset: arcLabelsRadiusOffset,\n      skipAngle: arcLabelsSkipAngle,\n      textColor: arcLabelsTextColor,\n      transitionMode: transitionMode,\n      component: arcLabelsComponent\n    }, \"arcLabels\");\n  }\n\n  if (legends.length > 0 && layers.includes('legends')) {\n    layerById.legends = jsx(PieLegends, {\n      width: innerWidth,\n      height: innerHeight,\n      data: legendData,\n      legends: legends,\n      toggleSerie: toggleSerie\n    }, \"legends\");\n  }\n\n  var layerContext = usePieLayerContext({\n    dataWithArc: dataWithArc,\n    arcGenerator: arcGenerator,\n    centerX: centerX,\n    centerY: centerY,\n    radius: radius,\n    innerRadius: innerRadius\n  });\n  return jsx(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    defs: boundDefs,\n    role: role,\n    children: layers.map(function (layer, i) {\n      if (layerById[layer] !== undefined) {\n        return layerById[layer];\n      }\n\n      if (typeof layer === 'function') {\n        return jsx(Fragment$1, {\n          children: createElement(layer, layerContext)\n        }, i);\n      }\n\n      return null;\n    })\n  });\n};\n\nvar Pie = function Pie(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? defaultProps.isInteractive : _ref2$isInteractive,\n      _ref2$animate = _ref2.animate,\n      animate = _ref2$animate === void 0 ? defaultProps.animate : _ref2$animate,\n      _ref2$motionConfig = _ref2.motionConfig,\n      motionConfig = _ref2$motionConfig === void 0 ? defaultProps.motionConfig : _ref2$motionConfig,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    animate: animate,\n    isInteractive: isInteractive,\n    motionConfig: motionConfig,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerPie, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar ResponsivePie = function ResponsivePie(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(Pie, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nvar InnerPieCanvas = function InnerPieCanvas(_ref) {\n  var data = _ref.data,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? defaultProps.id : _ref$id,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? defaultProps.value : _ref$value,\n      valueFormat = _ref.valueFormat,\n      _ref$sortByValue = _ref.sortByValue,\n      sortByValue = _ref$sortByValue === void 0 ? defaultProps.sortByValue : _ref$sortByValue,\n      _ref$startAngle = _ref.startAngle,\n      startAngle = _ref$startAngle === void 0 ? defaultProps.startAngle : _ref$startAngle,\n      _ref$endAngle = _ref.endAngle,\n      endAngle = _ref$endAngle === void 0 ? defaultProps.endAngle : _ref$endAngle,\n      _ref$padAngle = _ref.padAngle,\n      padAngle = _ref$padAngle === void 0 ? defaultProps.padAngle : _ref$padAngle,\n      _ref$fit = _ref.fit,\n      fit = _ref$fit === void 0 ? defaultProps.fit : _ref$fit,\n      _ref$innerRadius = _ref.innerRadius,\n      innerRadiusRatio = _ref$innerRadius === void 0 ? defaultProps.innerRadius : _ref$innerRadius,\n      _ref$cornerRadius = _ref.cornerRadius,\n      cornerRadius = _ref$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref$cornerRadius,\n      _ref$activeInnerRadiu = _ref.activeInnerRadiusOffset,\n      activeInnerRadiusOffset = _ref$activeInnerRadiu === void 0 ? defaultProps.activeInnerRadiusOffset : _ref$activeInnerRadiu,\n      _ref$activeOuterRadiu = _ref.activeOuterRadiusOffset,\n      activeOuterRadiusOffset = _ref$activeOuterRadiu === void 0 ? defaultProps.activeOuterRadiusOffset : _ref$activeOuterRadiu,\n      width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      _ref$pixelRatio = _ref.pixelRatio,\n      pixelRatio = _ref$pixelRatio === void 0 ? 1 : _ref$pixelRatio,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? defaultProps.borderWidth : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? defaultProps.borderColor : _ref$borderColor,\n      _ref$enableArcLabels = _ref.enableArcLabels,\n      enableArcLabels = _ref$enableArcLabels === void 0 ? defaultProps.enableArcLabels : _ref$enableArcLabels,\n      _ref$arcLabel = _ref.arcLabel,\n      arcLabel = _ref$arcLabel === void 0 ? defaultProps.arcLabel : _ref$arcLabel,\n      _ref$arcLabelsSkipAng = _ref.arcLabelsSkipAngle,\n      arcLabelsSkipAngle = _ref$arcLabelsSkipAng === void 0 ? defaultProps.arcLabelsSkipAngle : _ref$arcLabelsSkipAng,\n      _ref$arcLabelsTextCol = _ref.arcLabelsTextColor,\n      arcLabelsTextColor = _ref$arcLabelsTextCol === void 0 ? defaultProps.arcLabelsTextColor : _ref$arcLabelsTextCol,\n      _ref$arcLabelsRadiusO = _ref.arcLabelsRadiusOffset,\n      arcLabelsRadiusOffset = _ref$arcLabelsRadiusO === void 0 ? defaultProps.arcLabelsRadiusOffset : _ref$arcLabelsRadiusO,\n      _ref$enableArcLinkLab = _ref.enableArcLinkLabels,\n      enableArcLinkLabels = _ref$enableArcLinkLab === void 0 ? defaultProps.enableArcLinkLabels : _ref$enableArcLinkLab,\n      _ref$arcLinkLabel = _ref.arcLinkLabel,\n      arcLinkLabel = _ref$arcLinkLabel === void 0 ? defaultProps.arcLinkLabel : _ref$arcLinkLabel,\n      _ref$arcLinkLabelsSki = _ref.arcLinkLabelsSkipAngle,\n      arcLinkLabelsSkipAngle = _ref$arcLinkLabelsSki === void 0 ? defaultProps.arcLinkLabelsSkipAngle : _ref$arcLinkLabelsSki,\n      _ref$arcLinkLabelsOff = _ref.arcLinkLabelsOffset,\n      arcLinkLabelsOffset = _ref$arcLinkLabelsOff === void 0 ? defaultProps.arcLinkLabelsOffset : _ref$arcLinkLabelsOff,\n      _ref$arcLinkLabelsDia = _ref.arcLinkLabelsDiagonalLength,\n      arcLinkLabelsDiagonalLength = _ref$arcLinkLabelsDia === void 0 ? defaultProps.arcLinkLabelsDiagonalLength : _ref$arcLinkLabelsDia,\n      _ref$arcLinkLabelsStr = _ref.arcLinkLabelsStraightLength,\n      arcLinkLabelsStraightLength = _ref$arcLinkLabelsStr === void 0 ? defaultProps.arcLinkLabelsStraightLength : _ref$arcLinkLabelsStr,\n      _ref$arcLinkLabelsThi = _ref.arcLinkLabelsThickness,\n      arcLinkLabelsThickness = _ref$arcLinkLabelsThi === void 0 ? defaultProps.arcLinkLabelsThickness : _ref$arcLinkLabelsThi,\n      _ref$arcLinkLabelsTex = _ref.arcLinkLabelsTextOffset,\n      arcLinkLabelsTextOffset = _ref$arcLinkLabelsTex === void 0 ? defaultProps.arcLinkLabelsTextOffset : _ref$arcLinkLabelsTex,\n      _ref$arcLinkLabelsTex2 = _ref.arcLinkLabelsTextColor,\n      arcLinkLabelsTextColor = _ref$arcLinkLabelsTex2 === void 0 ? defaultProps.arcLinkLabelsTextColor : _ref$arcLinkLabelsTex2,\n      _ref$arcLinkLabelsCol = _ref.arcLinkLabelsColor,\n      arcLinkLabelsColor = _ref$arcLinkLabelsCol === void 0 ? defaultProps.arcLinkLabelsColor : _ref$arcLinkLabelsCol,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? defaultProps.isInteractive : _ref$isInteractive,\n      onClick = _ref.onClick,\n      onMouseMove = _ref.onMouseMove,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? defaultProps.tooltip : _ref$tooltip,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? defaultProps.legends : _ref$legends;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var normalizedData = useNormalizedData({\n    data: data,\n    id: id,\n    value: value,\n    valueFormat: valueFormat,\n    colors: colors\n  });\n\n  var _usePieFromBox = usePieFromBox({\n    data: normalizedData,\n    width: innerWidth,\n    height: innerHeight,\n    fit: fit,\n    innerRadius: innerRadiusRatio,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    padAngle: padAngle,\n    sortByValue: sortByValue,\n    cornerRadius: cornerRadius,\n    activeInnerRadiusOffset: activeInnerRadiusOffset,\n    activeOuterRadiusOffset: activeOuterRadiusOffset\n  }),\n      dataWithArc = _usePieFromBox.dataWithArc,\n      arcGenerator = _usePieFromBox.arcGenerator,\n      centerX = _usePieFromBox.centerX,\n      centerY = _usePieFromBox.centerY,\n      radius = _usePieFromBox.radius,\n      innerRadius = _usePieFromBox.innerRadius,\n      setActiveId = _usePieFromBox.setActiveId;\n\n  var getBorderColor = useInheritedColor(borderColor, theme);\n  var arcLabels = useArcLabels({\n    data: dataWithArc,\n    label: arcLabel,\n    skipAngle: arcLabelsSkipAngle,\n    offset: arcLabelsRadiusOffset,\n    textColor: arcLabelsTextColor\n  });\n  var arcLinkLabels = useArcLinkLabels({\n    data: dataWithArc,\n    skipAngle: arcLinkLabelsSkipAngle,\n    offset: arcLinkLabelsOffset,\n    diagonalLength: arcLinkLabelsDiagonalLength,\n    straightLength: arcLinkLabelsStraightLength,\n    label: arcLinkLabel,\n    linkColor: arcLinkLabelsColor,\n    textOffset: arcLinkLabelsTextOffset,\n    textColor: arcLinkLabelsTextColor\n  });\n  useEffect(function () {\n    if (!canvasEl.current) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.save();\n    ctx.translate(margin.left, margin.top);\n    arcGenerator.context(ctx);\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    dataWithArc.forEach(function (arc) {\n      ctx.beginPath();\n      ctx.fillStyle = arc.color;\n      ctx.strokeStyle = getBorderColor(arc);\n      ctx.lineWidth = borderWidth;\n      arcGenerator(arc.arc);\n      ctx.fill();\n\n      if (borderWidth > 0) {\n        ctx.stroke();\n      }\n    });\n\n    if (enableArcLinkLabels === true) {\n      drawCanvasArcLinkLabels(ctx, arcLinkLabels, theme, arcLinkLabelsThickness);\n    }\n\n    if (enableArcLabels === true) {\n      drawCanvasArcLabels(ctx, arcLabels, theme);\n    }\n\n    ctx.restore();\n    legends.forEach(function (legend) {\n      renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n        data: dataWithArc,\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        theme: theme\n      }));\n    });\n  }, [canvasEl, innerWidth, innerHeight, outerWidth, outerHeight, margin.top, margin.left, pixelRatio, centerX, centerY, arcGenerator, dataWithArc, getBorderColor, enableArcLabels, arcLabels, enableArcLinkLabels, arcLinkLabels, arcLinkLabelsThickness, legends, theme]);\n  var arcs = useMemo(function () {\n    return dataWithArc.map(function (datum) {\n      return _objectSpread2({\n        id: datum.id\n      }, datum.arc);\n    });\n  }, [dataWithArc]);\n\n  var getArcFromMouse = function getArcFromMouse(event) {\n    if (!canvasEl.current) return null;\n\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    var hoveredArc = findArcUnderCursor(margin.left + centerX, margin.top + centerY, radius, innerRadius, arcs, x, y);\n    if (!hoveredArc) return null;\n    return dataWithArc.find(function (datum) {\n      return datum.id === hoveredArc.id;\n    });\n  };\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseHover = function handleMouseHover(event) {\n    var datum = getArcFromMouse(event);\n\n    if (datum) {\n      onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(datum, event);\n      setActiveId(datum.id);\n      showTooltipFromEvent(createElement(tooltip, {\n        datum: datum\n      }), event);\n    } else {\n      setActiveId(null);\n      hideTooltip();\n    }\n  };\n\n  var handleMouseLeave = function handleMouseLeave() {\n    hideTooltip();\n  };\n\n  var handleClick = function handleClick(event) {\n    if (!onClick) return;\n    var arc = getArcFromMouse(event);\n\n    if (arc) {\n      onClick(arc, event);\n    }\n  };\n\n  return jsx(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nvar PieCanvas = function PieCanvas(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? defaultProps.isInteractive : _ref2$isInteractive,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    isInteractive: isInteractive,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerPieCanvas, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar ResponsivePieCanvas = function ResponsivePieCanvas(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(PieCanvas, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nexport { Pie, PieCanvas, ResponsivePie, ResponsivePieCanvas, defaultProps, useNormalizedData, usePie, usePieArcs, usePieFromBox, usePieLayerContext };","map":null,"metadata":{},"sourceType":"module"}