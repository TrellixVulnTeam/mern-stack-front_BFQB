{"ast":null,"code":"import { Axes, Grid, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { useAnnotations, Annotation, useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations';\nimport { jsx, Fragment, jsxs } from 'react/jsx-runtime';\nimport { BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { useTheme, getPropertyAccessor, usePropertyAccessor, useValueFormatter, Container, useMotionConfig, useDimensions, bindDefs, CartesianMarkers, SvgWrapper, getRelativeCursor, isCursorInRect, ResponsiveWrapper } from '@nivo/core';\nimport { useMemo, createElement, useCallback, useState, Fragment as Fragment$1, forwardRef, useRef, useEffect } from 'react';\nimport { animated, to, useTransition } from '@react-spring/web';\nimport { useTooltip, BasicTooltip } from '@nivo/tooltip';\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { computeScale } from '@nivo/scales';\nimport { stack, stackOffsetDiverging } from 'd3-shape';\nimport _uniqBy from 'lodash/uniqBy';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar BarAnnotations = function BarAnnotations(_ref) {\n  var bars = _ref.bars,\n      annotations = _ref.annotations;\n  var boundAnnotations = useAnnotations({\n    data: bars,\n    annotations: annotations,\n    getPosition: function getPosition(bar) {\n      return {\n        x: bar.x + bar.width / 2,\n        y: bar.y + bar.height / 2\n      };\n    },\n    getDimensions: function getDimensions(_ref2) {\n      var height = _ref2.height,\n          width = _ref2.width;\n      return {\n        width: width,\n        height: height,\n        size: Math.max(width, height)\n      };\n    }\n  });\n  return jsx(Fragment, {\n    children: boundAnnotations.map(function (annotation, i) {\n      return jsx(Annotation, _objectSpread2({}, annotation), i);\n    })\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar BarLegends = function BarLegends(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      legends = _ref.legends,\n      toggleSerie = _ref.toggleSerie;\n  return jsx(Fragment, {\n    children: legends.map(function (_ref2, i) {\n      var _legend$data;\n\n      var _ref3 = _slicedToArray(_ref2, 2),\n          legend = _ref3[0],\n          data = _ref3[1];\n\n      return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n        containerWidth: width,\n        containerHeight: height,\n        data: (_legend$data = legend.data) !== null && _legend$data !== void 0 ? _legend$data : data,\n        toggleSerie: legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n      }), i);\n    })\n  });\n};\n\nvar BarItem = function BarItem(_ref) {\n  var _data$fill;\n\n  var _ref$bar = _ref.bar,\n      data = _ref$bar.data,\n      bar = _objectWithoutProperties(_ref$bar, [\"data\"]),\n      _ref$style = _ref.style,\n      borderColor = _ref$style.borderColor,\n      color = _ref$style.color,\n      height = _ref$style.height,\n      labelColor = _ref$style.labelColor,\n      labelOpacity = _ref$style.labelOpacity,\n      labelX = _ref$style.labelX,\n      labelY = _ref$style.labelY,\n      transform = _ref$style.transform,\n      width = _ref$style.width,\n      borderRadius = _ref.borderRadius,\n      borderWidth = _ref.borderWidth,\n      label = _ref.label,\n      shouldRenderLabel = _ref.shouldRenderLabel,\n      isInteractive = _ref.isInteractive,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      tooltip = _ref.tooltip,\n      isFocusable = _ref.isFocusable,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy;\n\n  var theme = useTheme();\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      showTooltipAt = _useTooltip.showTooltipAt,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var renderTooltip = useMemo(function () {\n    return function () {\n      return createElement(tooltip, _objectSpread2(_objectSpread2({}, bar), data));\n    };\n  }, [tooltip, bar, data]);\n  var handleClick = useCallback(function (event) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(_objectSpread2({\n      color: bar.color\n    }, data), event);\n  }, [bar, data, onClick]);\n  var handleTooltip = useCallback(function (event) {\n    return showTooltipFromEvent(renderTooltip(), event);\n  }, [showTooltipFromEvent, renderTooltip]);\n  var handleMouseEnter = useCallback(function (event) {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(data, event);\n    showTooltipFromEvent(renderTooltip(), event);\n  }, [data, onMouseEnter, showTooltipFromEvent, renderTooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(data, event);\n    hideTooltip();\n  }, [data, hideTooltip, onMouseLeave]);\n  var handleFocus = useCallback(function () {\n    showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY]);\n  }, [showTooltipAt, renderTooltip, bar]);\n  var handleBlur = useCallback(function () {\n    hideTooltip();\n  }, [hideTooltip]);\n  return jsxs(animated.g, {\n    transform: transform,\n    children: [jsx(animated.rect, {\n      width: to(width, function (value) {\n        return Math.max(value, 0);\n      }),\n      height: to(height, function (value) {\n        return Math.max(value, 0);\n      }),\n      rx: borderRadius,\n      ry: borderRadius,\n      fill: (_data$fill = data.fill) !== null && _data$fill !== void 0 ? _data$fill : color,\n      strokeWidth: borderWidth,\n      stroke: borderColor,\n      focusable: isFocusable,\n      tabIndex: isFocusable ? 0 : undefined,\n      \"aria-label\": ariaLabel ? ariaLabel(data) : undefined,\n      \"aria-labelledby\": ariaLabelledBy ? ariaLabelledBy(data) : undefined,\n      \"aria-describedby\": ariaDescribedBy ? ariaDescribedBy(data) : undefined,\n      onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n      onMouseMove: isInteractive ? handleTooltip : undefined,\n      onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n      onClick: isInteractive ? handleClick : undefined,\n      onFocus: isInteractive && isFocusable ? handleFocus : undefined,\n      onBlur: isInteractive && isFocusable ? handleBlur : undefined\n    }), shouldRenderLabel && jsx(animated.text, {\n      x: labelX,\n      y: labelY,\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      fillOpacity: labelOpacity,\n      style: _objectSpread2(_objectSpread2({}, theme.labels.text), {}, {\n        pointerEvents: 'none',\n        fill: labelColor\n      }),\n      children: label\n    })]\n  });\n};\n\nvar BarTooltip = function BarTooltip(_ref) {\n  var color = _ref.color,\n      label = _ref.label,\n      data = _objectWithoutProperties(_ref, [\"color\", \"label\"]);\n\n  return jsx(BasicTooltip, {\n    id: label,\n    value: data.formattedValue,\n    enableChip: true,\n    color: color\n  });\n};\n\nvar _window$devicePixelRa;\n\nvar defaultProps = {\n  indexBy: 'id',\n  keys: ['value'],\n  groupMode: 'stacked',\n  layout: 'vertical',\n  reverse: false,\n  minValue: 'auto',\n  maxValue: 'auto',\n  valueScale: {\n    type: 'linear'\n  },\n  indexScale: {\n    type: 'band',\n    round: true\n  },\n  padding: 0.1,\n  innerPadding: 0,\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: false,\n  enableGridY: true,\n  enableLabel: true,\n  label: 'formattedValue',\n  labelSkipWidth: 0,\n  labelSkipHeight: 0,\n  labelTextColor: {\n    from: 'theme',\n    theme: 'labels.text.fill'\n  },\n  colorBy: 'id',\n  colors: {\n    scheme: 'nivo'\n  },\n  borderRadius: 0,\n  borderWidth: 0,\n  borderColor: {\n    from: 'color'\n  },\n  isInteractive: true,\n  tooltip: BarTooltip,\n  tooltipLabel: function tooltipLabel(datum) {\n    return \"\".concat(datum.id, \" - \").concat(datum.indexValue);\n  },\n  legends: [],\n  initialHiddenIds: [],\n  annotations: [],\n  markers: []\n};\n\nvar svgDefaultProps = _objectSpread2(_objectSpread2({}, defaultProps), {}, {\n  layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n  barComponent: BarItem,\n  defs: [],\n  fill: [],\n  animate: true,\n  motionConfig: 'default',\n  role: 'img',\n  isFocusable: false\n});\n\nvar canvasDefaultProps = _objectSpread2(_objectSpread2({}, defaultProps), {}, {\n  layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n  pixelRatio: typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) !== null && _window$devicePixelRa !== void 0 ? _window$devicePixelRa : 1 : 1\n});\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar getIndexScale = function getIndexScale(data, getIndex, padding, indexScale, size, axis) {\n  return computeScale(indexScale, {\n    all: data.map(getIndex),\n    min: 0,\n    max: 0\n  }, size, axis).padding(padding);\n};\n\nvar normalizeData = function normalizeData(data, keys) {\n  return data.map(function (item) {\n    return _objectSpread2(_objectSpread2({}, keys.reduce(function (acc, key) {\n      acc[key] = null;\n      return acc;\n    }, {})), item);\n  });\n};\n\nvar filterNullValues = function filterNullValues(data) {\n  return Object.keys(data).reduce(function (acc, key) {\n    if (data[key]) {\n      acc[key] = data[key];\n    }\n\n    return acc;\n  }, {});\n};\n\nvar coerceValue = function coerceValue(value) {\n  return [value, Number(value)];\n};\n\nvar gt = function gt(value, other) {\n  return value > other;\n};\n\nvar lt = function lt(value, other) {\n  return value < other;\n};\n\nvar range = function range(start, end) {\n  return Array.from(' '.repeat(end - start), function (_, index) {\n    return start + index;\n  });\n};\n\nvar clampToZero = function clampToZero(value) {\n  return gt(value, 0) ? 0 : value;\n};\n\nvar zeroIfNotFinite = function zeroIfNotFinite(value) {\n  return isFinite(value) ? value : 0;\n};\n\nvar generateVerticalGroupedBars = function generateVerticalGroupedBars(_ref, barWidth, reverse, yRef) {\n  var data = _ref.data,\n      formatValue = _ref.formatValue,\n      getColor = _ref.getColor,\n      getIndex = _ref.getIndex,\n      getTooltipLabel = _ref.getTooltipLabel,\n      _ref$innerPadding = _ref.innerPadding,\n      innerPadding = _ref$innerPadding === void 0 ? 0 : _ref$innerPadding,\n      keys = _ref.keys,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      margin = _ref.margin;\n  var compare = reverse ? lt : gt;\n\n  var getY = function getY(d) {\n    var _yScale;\n\n    return compare(d, 0) ? (_yScale = yScale(d)) !== null && _yScale !== void 0 ? _yScale : 0 : yRef;\n  };\n\n  var getHeight = function getHeight(d, y) {\n    var _yScale2;\n\n    return compare(d, 0) ? yRef - y : ((_yScale2 = yScale(d)) !== null && _yScale2 !== void 0 ? _yScale2 : 0) - yRef;\n  };\n\n  var cleanedData = data.map(filterNullValues);\n  var bars = [];\n  keys.forEach(function (key, i) {\n    return range(0, xScale.domain().length).forEach(function (index) {\n      var _xScale;\n\n      var _coerceValue = coerceValue(data[index][key]),\n          _coerceValue2 = _slicedToArray(_coerceValue, 2),\n          rawValue = _coerceValue2[0],\n          value = _coerceValue2[1];\n\n      var indexValue = getIndex(data[index]);\n      var x = ((_xScale = xScale(indexValue)) !== null && _xScale !== void 0 ? _xScale : 0) + barWidth * i + innerPadding * i;\n      var y = getY(value);\n      var barHeight = getHeight(value, y);\n      var barData = {\n        id: key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: index,\n        indexValue: indexValue,\n        data: cleanedData[index]\n      };\n      bars.push({\n        key: \"\".concat(key, \".\").concat(barData.indexValue),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateHorizontalGroupedBars = function generateHorizontalGroupedBars(_ref2, barHeight, reverse, xRef) {\n  var data = _ref2.data,\n      formatValue = _ref2.formatValue,\n      getIndex = _ref2.getIndex,\n      getColor = _ref2.getColor,\n      getTooltipLabel = _ref2.getTooltipLabel,\n      keys = _ref2.keys,\n      _ref2$innerPadding = _ref2.innerPadding,\n      innerPadding = _ref2$innerPadding === void 0 ? 0 : _ref2$innerPadding,\n      xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      margin = _ref2.margin;\n  var compare = reverse ? lt : gt;\n\n  var getX = function getX(d) {\n    var _xScale2;\n\n    return compare(d, 0) ? xRef : (_xScale2 = xScale(d)) !== null && _xScale2 !== void 0 ? _xScale2 : 0;\n  };\n\n  var getWidth = function getWidth(d, x) {\n    var _xScale3;\n\n    return compare(d, 0) ? ((_xScale3 = xScale(d)) !== null && _xScale3 !== void 0 ? _xScale3 : 0) - xRef : xRef - x;\n  };\n\n  var cleanedData = data.map(filterNullValues);\n  var bars = [];\n  keys.forEach(function (key, i) {\n    return range(0, yScale.domain().length).forEach(function (index) {\n      var _yScale3;\n\n      var _coerceValue3 = coerceValue(data[index][key]),\n          _coerceValue4 = _slicedToArray(_coerceValue3, 2),\n          rawValue = _coerceValue4[0],\n          value = _coerceValue4[1];\n\n      var indexValue = getIndex(data[index]);\n      var x = getX(value);\n      var y = ((_yScale3 = yScale(indexValue)) !== null && _yScale3 !== void 0 ? _yScale3 : 0) + barHeight * i + innerPadding * i;\n      var barWidth = getWidth(value, x);\n      var barData = {\n        id: key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: index,\n        indexValue: indexValue,\n        data: cleanedData[index]\n      };\n      bars.push({\n        key: \"\".concat(key, \".\").concat(barData.indexValue),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateGroupedBars = function generateGroupedBars(_ref3) {\n  var _scale;\n\n  var layout = _ref3.layout,\n      minValue = _ref3.minValue,\n      maxValue = _ref3.maxValue,\n      reverse = _ref3.reverse,\n      width = _ref3.width,\n      height = _ref3.height,\n      _ref3$padding = _ref3.padding,\n      padding = _ref3$padding === void 0 ? 0 : _ref3$padding,\n      _ref3$innerPadding = _ref3.innerPadding,\n      innerPadding = _ref3$innerPadding === void 0 ? 0 : _ref3$innerPadding,\n      valueScale = _ref3.valueScale,\n      indexScaleConfig = _ref3.indexScale,\n      _ref3$hiddenIds = _ref3.hiddenIds,\n      hiddenIds = _ref3$hiddenIds === void 0 ? [] : _ref3$hiddenIds,\n      props = _objectWithoutProperties(_ref3, [\"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"innerPadding\", \"valueScale\", \"indexScale\", \"hiddenIds\"]);\n\n  var keys = props.keys.filter(function (key) {\n    return !hiddenIds.includes(key);\n  });\n  var data = normalizeData(props.data, keys);\n\n  var _ref4 = layout === 'vertical' ? ['y', 'x', width] : ['x', 'y', height],\n      _ref5 = _slicedToArray(_ref4, 3),\n      axis = _ref5[0],\n      otherAxis = _ref5[1],\n      size = _ref5[2];\n\n  var indexScale = getIndexScale(data, props.getIndex, padding, indexScaleConfig, size, otherAxis);\n\n  var scaleSpec = _objectSpread2({\n    max: maxValue,\n    min: minValue,\n    reverse: reverse\n  }, valueScale);\n\n  var clampMin = scaleSpec.min === 'auto' ? clampToZero : function (value) {\n    return value;\n  };\n  var values = data.reduce(function (acc, entry) {\n    return [].concat(_toConsumableArray(acc), _toConsumableArray(keys.map(function (k) {\n      return entry[k];\n    })));\n  }, []).filter(Boolean);\n  var min = clampMin(Math.min.apply(Math, _toConsumableArray(values)));\n  var max = zeroIfNotFinite(Math.max.apply(Math, _toConsumableArray(values)));\n  var scale = computeScale(scaleSpec, {\n    all: values,\n    min: min,\n    max: max\n  }, axis === 'x' ? width : height, axis);\n\n  var _ref6 = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale],\n      _ref7 = _slicedToArray(_ref6, 2),\n      xScale = _ref7[0],\n      yScale = _ref7[1];\n\n  var bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length;\n  var params = [_objectSpread2(_objectSpread2({}, props), {}, {\n    data: data,\n    keys: keys,\n    innerPadding: innerPadding,\n    xScale: xScale,\n    yScale: yScale\n  }), bandwidth, scaleSpec.reverse, (_scale = scale(0)) !== null && _scale !== void 0 ? _scale : 0];\n  var bars = bandwidth > 0 ? layout === 'vertical' ? generateVerticalGroupedBars.apply(void 0, params) : generateHorizontalGroupedBars.apply(void 0, params) : [];\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    bars: bars\n  };\n};\n\nvar flattenDeep = function flattenDeep(arr) {\n  var _ref;\n\n  return arr.some(Array.isArray) ? flattenDeep((_ref = []).concat.apply(_ref, _toConsumableArray(arr))) : arr;\n};\n\nvar filterZerosIfLog = function filterZerosIfLog(array, type) {\n  return type === 'log' ? array.filter(function (num) {\n    return num !== 0;\n  }) : array;\n};\n\nvar generateVerticalStackedBars = function generateVerticalStackedBars(_ref2, barWidth, reverse) {\n  var formatValue = _ref2.formatValue,\n      getColor = _ref2.getColor,\n      getIndex = _ref2.getIndex,\n      getTooltipLabel = _ref2.getTooltipLabel,\n      innerPadding = _ref2.innerPadding,\n      stackedData = _ref2.stackedData,\n      xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      margin = _ref2.margin;\n\n  var getY = function getY(d) {\n    return yScale(d[reverse ? 0 : 1]);\n  };\n\n  var getHeight = function getHeight(d, y) {\n    var _yScale;\n\n    return ((_yScale = yScale(d[reverse ? 1 : 0])) !== null && _yScale !== void 0 ? _yScale : 0) - y;\n  };\n\n  var bars = [];\n  stackedData.forEach(function (stackedDataItem) {\n    return xScale.domain().forEach(function (index, i) {\n      var _xScale, _getY;\n\n      var d = stackedDataItem[i];\n      var x = (_xScale = xScale(getIndex(d.data))) !== null && _xScale !== void 0 ? _xScale : 0;\n      var y = ((_getY = getY(d)) !== null && _getY !== void 0 ? _getY : 0) + innerPadding * 0.5;\n      var barHeight = getHeight(d, y) - innerPadding;\n\n      var _coerceValue = coerceValue(d.data[stackedDataItem.key]),\n          _coerceValue2 = _slicedToArray(_coerceValue, 2),\n          rawValue = _coerceValue2[0],\n          value = _coerceValue2[1];\n\n      var barData = {\n        id: stackedDataItem.key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: i,\n        indexValue: index,\n        data: filterNullValues(d.data)\n      };\n      bars.push({\n        key: \"\".concat(stackedDataItem.key, \".\").concat(index),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateHorizontalStackedBars = function generateHorizontalStackedBars(_ref3, barHeight, reverse) {\n  var formatValue = _ref3.formatValue,\n      getColor = _ref3.getColor,\n      getIndex = _ref3.getIndex,\n      getTooltipLabel = _ref3.getTooltipLabel,\n      innerPadding = _ref3.innerPadding,\n      stackedData = _ref3.stackedData,\n      xScale = _ref3.xScale,\n      yScale = _ref3.yScale,\n      margin = _ref3.margin;\n\n  var getX = function getX(d) {\n    return xScale(d[reverse ? 1 : 0]);\n  };\n\n  var getWidth = function getWidth(d, x) {\n    var _xScale2;\n\n    return ((_xScale2 = xScale(d[reverse ? 0 : 1])) !== null && _xScale2 !== void 0 ? _xScale2 : 0) - x;\n  };\n\n  var bars = [];\n  stackedData.forEach(function (stackedDataItem) {\n    return yScale.domain().forEach(function (index, i) {\n      var _yScale2, _getX;\n\n      var d = stackedDataItem[i];\n      var y = (_yScale2 = yScale(getIndex(d.data))) !== null && _yScale2 !== void 0 ? _yScale2 : 0;\n      var x = ((_getX = getX(d)) !== null && _getX !== void 0 ? _getX : 0) + innerPadding * 0.5;\n      var barWidth = getWidth(d, x) - innerPadding;\n\n      var _coerceValue3 = coerceValue(d.data[stackedDataItem.key]),\n          _coerceValue4 = _slicedToArray(_coerceValue3, 2),\n          rawValue = _coerceValue4[0],\n          value = _coerceValue4[1];\n\n      var barData = {\n        id: stackedDataItem.key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: i,\n        indexValue: index,\n        data: filterNullValues(d.data)\n      };\n      bars.push({\n        key: \"\".concat(stackedDataItem.key, \".\").concat(index),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateStackedBars = function generateStackedBars(_ref4) {\n  var data = _ref4.data,\n      layout = _ref4.layout,\n      minValue = _ref4.minValue,\n      maxValue = _ref4.maxValue,\n      reverse = _ref4.reverse,\n      width = _ref4.width,\n      height = _ref4.height,\n      _ref4$padding = _ref4.padding,\n      padding = _ref4$padding === void 0 ? 0 : _ref4$padding,\n      valueScale = _ref4.valueScale,\n      indexScaleConfig = _ref4.indexScale,\n      _ref4$hiddenIds = _ref4.hiddenIds,\n      hiddenIds = _ref4$hiddenIds === void 0 ? [] : _ref4$hiddenIds,\n      props = _objectWithoutProperties(_ref4, [\"data\", \"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"valueScale\", \"indexScale\", \"hiddenIds\"]);\n\n  var keys = props.keys.filter(function (key) {\n    return !hiddenIds.includes(key);\n  });\n  var stackedData = stack().keys(keys).offset(stackOffsetDiverging)(normalizeData(data, keys));\n\n  var _ref5 = layout === 'vertical' ? ['y', 'x', width] : ['x', 'y', height],\n      _ref6 = _slicedToArray(_ref5, 3),\n      axis = _ref6[0],\n      otherAxis = _ref6[1],\n      size = _ref6[2];\n\n  var indexScale = getIndexScale(data, props.getIndex, padding, indexScaleConfig, size, otherAxis);\n\n  var scaleSpec = _objectSpread2({\n    max: maxValue,\n    min: minValue,\n    reverse: reverse\n  }, valueScale);\n\n  var values = filterZerosIfLog(flattenDeep(stackedData), valueScale.type);\n  var min = Math.min.apply(Math, _toConsumableArray(values));\n  var max = Math.max.apply(Math, _toConsumableArray(values));\n  var scale = computeScale(scaleSpec, {\n    all: values,\n    min: min,\n    max: max\n  }, axis === 'x' ? width : height, axis);\n\n  var _ref7 = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale],\n      _ref8 = _slicedToArray(_ref7, 2),\n      xScale = _ref8[0],\n      yScale = _ref8[1];\n\n  var innerPadding = props.innerPadding > 0 ? props.innerPadding : 0;\n  var bandwidth = indexScale.bandwidth();\n  var params = [_objectSpread2(_objectSpread2({}, props), {}, {\n    innerPadding: innerPadding,\n    stackedData: stackedData,\n    xScale: xScale,\n    yScale: yScale\n  }), bandwidth, scaleSpec.reverse];\n  var bars = bandwidth > 0 ? layout === 'vertical' ? generateVerticalStackedBars.apply(void 0, params) : generateHorizontalStackedBars.apply(void 0, params) : [];\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    bars: bars\n  };\n};\n\nvar getLegendDataForKeys = function getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel) {\n  var data = _uniqBy(bars.map(function (bar) {\n    var _bar$color;\n\n    return {\n      id: bar.data.id,\n      label: getLegendLabel(bar.data),\n      hidden: bar.data.hidden,\n      color: (_bar$color = bar.color) !== null && _bar$color !== void 0 ? _bar$color : '#000'\n    };\n  }), function (_ref) {\n    var id = _ref.id;\n    return id;\n  });\n\n  if (layout === 'vertical' && groupMode === 'stacked' && direction === 'column' && reverse !== true || layout === 'horizontal' && groupMode === 'stacked' && reverse === true) {\n    data.reverse();\n  }\n\n  return data;\n};\n\nvar getLegendDataForIndexes = function getLegendDataForIndexes(bars, layout, getLegendLabel) {\n  var data = _uniqBy(bars.map(function (bar) {\n    var _bar$data$indexValue, _bar$color2;\n\n    return {\n      id: (_bar$data$indexValue = bar.data.indexValue) !== null && _bar$data$indexValue !== void 0 ? _bar$data$indexValue : '',\n      label: getLegendLabel(bar.data),\n      hidden: bar.data.hidden,\n      color: (_bar$color2 = bar.color) !== null && _bar$color2 !== void 0 ? _bar$color2 : '#000'\n    };\n  }), function (_ref2) {\n    var id = _ref2.id;\n    return id;\n  });\n\n  if (layout === 'horizontal') {\n    data.reverse();\n  }\n\n  return data;\n};\n\nvar getLegendData = function getLegendData(_ref3) {\n  var bars = _ref3.bars,\n      direction = _ref3.direction,\n      from = _ref3.from,\n      groupMode = _ref3.groupMode,\n      layout = _ref3.layout,\n      legendLabel = _ref3.legendLabel,\n      reverse = _ref3.reverse;\n  var getLegendLabel = getPropertyAccessor(legendLabel !== null && legendLabel !== void 0 ? legendLabel : from === 'indexes' ? 'indexValue' : 'id');\n\n  if (from === 'indexes') {\n    return getLegendDataForIndexes(bars, layout, getLegendLabel);\n  }\n\n  return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel);\n};\n\nvar useBar = function useBar(_ref) {\n  var _ref$indexBy = _ref.indexBy,\n      indexBy = _ref$indexBy === void 0 ? defaultProps.indexBy : _ref$indexBy,\n      _ref$keys = _ref.keys,\n      keys = _ref$keys === void 0 ? defaultProps.keys : _ref$keys,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? defaultProps.label : _ref$label,\n      _ref$tooltipLabel = _ref.tooltipLabel,\n      tooltipLabel = _ref$tooltipLabel === void 0 ? defaultProps.tooltipLabel : _ref$tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,\n      _ref$colorBy = _ref.colorBy,\n      colorBy = _ref$colorBy === void 0 ? defaultProps.colorBy : _ref$colorBy,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? defaultProps.borderColor : _ref$borderColor,\n      _ref$labelTextColor = _ref.labelTextColor,\n      labelTextColor = _ref$labelTextColor === void 0 ? defaultProps.labelTextColor : _ref$labelTextColor,\n      _ref$groupMode = _ref.groupMode,\n      groupMode = _ref$groupMode === void 0 ? defaultProps.groupMode : _ref$groupMode,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? defaultProps.layout : _ref$layout,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? defaultProps.reverse : _ref$reverse,\n      data = _ref.data,\n      _ref$minValue = _ref.minValue,\n      minValue = _ref$minValue === void 0 ? defaultProps.minValue : _ref$minValue,\n      _ref$maxValue = _ref.maxValue,\n      maxValue = _ref$maxValue === void 0 ? defaultProps.maxValue : _ref$maxValue,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? defaultProps.padding : _ref$padding,\n      _ref$innerPadding = _ref.innerPadding,\n      innerPadding = _ref$innerPadding === void 0 ? defaultProps.innerPadding : _ref$innerPadding,\n      _ref$valueScale = _ref.valueScale,\n      valueScale = _ref$valueScale === void 0 ? defaultProps.valueScale : _ref$valueScale,\n      _ref$indexScale = _ref.indexScale,\n      indexScale = _ref$indexScale === void 0 ? defaultProps.indexScale : _ref$indexScale,\n      _ref$initialHiddenIds = _ref.initialHiddenIds,\n      initialHiddenIds = _ref$initialHiddenIds === void 0 ? defaultProps.initialHiddenIds : _ref$initialHiddenIds,\n      _ref$enableLabel = _ref.enableLabel,\n      enableLabel = _ref$enableLabel === void 0 ? defaultProps.enableLabel : _ref$enableLabel,\n      _ref$labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipWidth = _ref$labelSkipWidth === void 0 ? defaultProps.labelSkipWidth : _ref$labelSkipWidth,\n      _ref$labelSkipHeight = _ref.labelSkipHeight,\n      labelSkipHeight = _ref$labelSkipHeight === void 0 ? defaultProps.labelSkipHeight : _ref$labelSkipHeight,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? defaultProps.legends : _ref$legends,\n      legendLabel = _ref.legendLabel;\n\n  var _useState = useState(initialHiddenIds !== null && initialHiddenIds !== void 0 ? initialHiddenIds : []),\n      _useState2 = _slicedToArray(_useState, 2),\n      hiddenIds = _useState2[0],\n      setHiddenIds = _useState2[1];\n\n  var toggleSerie = useCallback(function (id) {\n    setHiddenIds(function (state) {\n      return state.indexOf(id) > -1 ? state.filter(function (item) {\n        return item !== id;\n      }) : [].concat(_toConsumableArray(state), [id]);\n    });\n  }, []);\n  var getIndex = usePropertyAccessor(indexBy);\n  var getLabel = usePropertyAccessor(label);\n  var getTooltipLabel = usePropertyAccessor(tooltipLabel);\n  var formatValue = useValueFormatter(valueFormat);\n  var theme = useTheme();\n  var getColor = useOrdinalColorScale(colors, colorBy);\n  var getBorderColor = useInheritedColor(borderColor, theme);\n  var getLabelColor = useInheritedColor(labelTextColor, theme);\n  var generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars;\n\n  var _generateBars = generateBars({\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    getIndex: getIndex,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    width: width,\n    height: height,\n    getColor: getColor,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    hiddenIds: hiddenIds,\n    formatValue: formatValue,\n    getTooltipLabel: getTooltipLabel,\n    margin: margin\n  }),\n      bars = _generateBars.bars,\n      xScale = _generateBars.xScale,\n      yScale = _generateBars.yScale;\n\n  var barsWithValue = useMemo(function () {\n    return bars.filter(function (bar) {\n      return bar.data.value !== null;\n    }).map(function (bar, index) {\n      return _objectSpread2(_objectSpread2({}, bar), {}, {\n        index: index\n      });\n    });\n  }, [bars]);\n  var shouldRenderBarLabel = useCallback(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    if (!enableLabel) return false;\n    if (labelSkipWidth > 0 && width < labelSkipWidth) return false;\n    if (labelSkipHeight > 0 && height < labelSkipHeight) return false;\n    return true;\n  }, [enableLabel, labelSkipWidth, labelSkipHeight]);\n  var legendData = useMemo(function () {\n    return keys.map(function (key) {\n      var bar = bars.find(function (bar) {\n        return bar.data.id === key;\n      });\n      return _objectSpread2(_objectSpread2({}, bar), {}, {\n        data: _objectSpread2(_objectSpread2({\n          id: key\n        }, bar === null || bar === void 0 ? void 0 : bar.data), {}, {\n          hidden: hiddenIds.includes(key)\n        })\n      });\n    });\n  }, [hiddenIds, keys, bars]);\n  var legendsWithData = useMemo(function () {\n    return legends.map(function (legend) {\n      var data = getLegendData({\n        bars: legend.dataFrom === 'keys' ? legendData : bars,\n        direction: legend.direction,\n        from: legend.dataFrom,\n        groupMode: groupMode,\n        layout: layout,\n        legendLabel: legendLabel,\n        reverse: reverse\n      });\n      return [legend, data];\n    });\n  }, [legends, legendData, bars, groupMode, layout, legendLabel, reverse]);\n  return {\n    bars: bars,\n    barsWithValue: barsWithValue,\n    xScale: xScale,\n    yScale: yScale,\n    getIndex: getIndex,\n    getLabel: getLabel,\n    getTooltipLabel: getTooltipLabel,\n    formatValue: formatValue,\n    getColor: getColor,\n    getBorderColor: getBorderColor,\n    getLabelColor: getLabelColor,\n    shouldRenderBarLabel: shouldRenderBarLabel,\n    hiddenIds: hiddenIds,\n    toggleSerie: toggleSerie,\n    legendsWithData: legendsWithData\n  };\n};\n\nvar InnerBar = function InnerBar(_ref) {\n  var data = _ref.data,\n      indexBy = _ref.indexBy,\n      keys = _ref.keys,\n      partialMargin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      groupMode = _ref.groupMode,\n      layout = _ref.layout,\n      reverse = _ref.reverse,\n      minValue = _ref.minValue,\n      maxValue = _ref.maxValue,\n      valueScale = _ref.valueScale,\n      indexScale = _ref.indexScale,\n      padding = _ref.padding,\n      innerPadding = _ref.innerPadding,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? svgDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? svgDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? svgDefaultProps.enableGridX : _ref$enableGridX,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? svgDefaultProps.enableGridY : _ref$enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? svgDefaultProps.layers : _ref$layers,\n      _ref$barComponent = _ref.barComponent,\n      barComponent = _ref$barComponent === void 0 ? svgDefaultProps.barComponent : _ref$barComponent,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipHeight = _ref.labelSkipHeight,\n      labelTextColor = _ref.labelTextColor,\n      _ref$markers = _ref.markers,\n      markers = _ref$markers === void 0 ? svgDefaultProps.markers : _ref$markers,\n      colorBy = _ref.colorBy,\n      colors = _ref.colors,\n      _ref$defs = _ref.defs,\n      defs = _ref$defs === void 0 ? svgDefaultProps.defs : _ref$defs,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? svgDefaultProps.fill : _ref$fill,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? svgDefaultProps.borderRadius : _ref$borderRadius,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? svgDefaultProps.borderWidth : _ref$borderWidth,\n      borderColor = _ref.borderColor,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? svgDefaultProps.annotations : _ref$annotations,\n      legendLabel = _ref.legendLabel,\n      tooltipLabel = _ref.tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? svgDefaultProps.tooltip : _ref$tooltip,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      legends = _ref.legends,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? svgDefaultProps.role : _ref$role,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy,\n      _ref$isFocusable = _ref.isFocusable,\n      isFocusable = _ref$isFocusable === void 0 ? svgDefaultProps.isFocusable : _ref$isFocusable,\n      barAriaLabel = _ref.barAriaLabel,\n      barAriaLabelledBy = _ref.barAriaLabelledBy,\n      barAriaDescribedBy = _ref.barAriaDescribedBy,\n      initialHiddenIds = _ref.initialHiddenIds;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight,\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight;\n\n  var _useBar = useBar({\n    indexBy: indexBy,\n    label: label,\n    tooltipLabel: tooltipLabel,\n    valueFormat: valueFormat,\n    colors: colors,\n    colorBy: colorBy,\n    borderColor: borderColor,\n    labelTextColor: labelTextColor,\n    groupMode: groupMode,\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    margin: margin,\n    width: innerWidth,\n    height: innerHeight,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    enableLabel: enableLabel,\n    labelSkipWidth: labelSkipWidth,\n    labelSkipHeight: labelSkipHeight,\n    legends: legends,\n    legendLabel: legendLabel,\n    initialHiddenIds: initialHiddenIds\n  }),\n      bars = _useBar.bars,\n      barsWithValue = _useBar.barsWithValue,\n      xScale = _useBar.xScale,\n      yScale = _useBar.yScale,\n      getLabel = _useBar.getLabel,\n      getTooltipLabel = _useBar.getTooltipLabel,\n      getBorderColor = _useBar.getBorderColor,\n      getLabelColor = _useBar.getLabelColor,\n      shouldRenderBarLabel = _useBar.shouldRenderBarLabel,\n      toggleSerie = _useBar.toggleSerie,\n      legendsWithData = _useBar.legendsWithData;\n\n  var transition = useTransition(barsWithValue, {\n    keys: function keys(bar) {\n      return bar.key;\n    },\n    from: function from(bar) {\n      return _objectSpread2({\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: 0,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 0,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y + bar.height, \")\"),\n        width: bar.width\n      }, layout === 'vertical' ? {} : {\n        height: bar.height,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: 0\n      });\n    },\n    enter: function enter(bar) {\n      return {\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: bar.height,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 1,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: bar.width\n      };\n    },\n    update: function update(bar) {\n      return {\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: bar.height,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 1,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: bar.width\n      };\n    },\n    leave: function leave(bar) {\n      return _objectSpread2({\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: 0,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 0,\n        labelX: bar.width / 2,\n        labelY: 0,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y + bar.height, \")\"),\n        width: bar.width\n      }, layout === 'vertical' ? {} : {\n        labelX: 0,\n        labelY: bar.height / 2,\n        height: bar.height,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: 0\n      });\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  var commonProps = useMemo(function () {\n    return {\n      borderRadius: borderRadius,\n      borderWidth: borderWidth,\n      enableLabel: enableLabel,\n      isInteractive: isInteractive,\n      labelSkipWidth: labelSkipWidth,\n      labelSkipHeight: labelSkipHeight,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      getTooltipLabel: getTooltipLabel,\n      tooltip: tooltip,\n      isFocusable: isFocusable,\n      ariaLabel: barAriaLabel,\n      ariaLabelledBy: barAriaLabelledBy,\n      ariaDescribedBy: barAriaDescribedBy\n    };\n  }, [borderRadius, borderWidth, enableLabel, getTooltipLabel, isInteractive, labelSkipHeight, labelSkipWidth, onClick, onMouseEnter, onMouseLeave, tooltip, isFocusable, barAriaLabel, barAriaLabelledBy, barAriaDescribedBy]);\n  var boundDefs = bindDefs(defs, bars, fill, {\n    dataKey: 'data',\n    targetKey: 'data.fill'\n  });\n  var layerById = {\n    annotations: null,\n    axes: null,\n    bars: null,\n    grid: null,\n    legends: null,\n    markers: null\n  };\n\n  if (layers.includes('annotations')) {\n    layerById.annotations = jsx(BarAnnotations, {\n      bars: bars,\n      annotations: annotations\n    }, \"annotations\");\n  }\n\n  if (layers.includes('axes')) {\n    layerById.axes = jsx(Axes, {\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, \"axes\");\n  }\n\n  if (layers.includes('bars')) {\n    layerById.bars = jsx(Fragment$1, {\n      children: transition(function (style, bar) {\n        return createElement(barComponent, _objectSpread2(_objectSpread2({}, commonProps), {}, {\n          bar: bar,\n          style: style,\n          shouldRenderLabel: shouldRenderBarLabel(bar),\n          label: getLabel(bar.data)\n        }));\n      })\n    }, \"bars\");\n  }\n\n  if (layers.includes('grid')) {\n    layerById.grid = jsx(Grid, {\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }, \"grid\");\n  }\n\n  if (layers.includes('legends')) {\n    layerById.legends = jsx(BarLegends, {\n      width: innerWidth,\n      height: innerHeight,\n      legends: legendsWithData,\n      toggleSerie: toggleSerie\n    }, \"legends\");\n  }\n\n  if (layers.includes('markers')) {\n    layerById.markers = jsx(CartesianMarkers, {\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale\n    }, \"markers\");\n  }\n\n  var layerContext = useMemo(function () {\n    return _objectSpread2(_objectSpread2({}, commonProps), {}, {\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      width: width,\n      height: height,\n      bars: bars,\n      xScale: xScale,\n      yScale: yScale\n    });\n  }, [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]);\n  return jsx(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    defs: boundDefs,\n    role: role,\n    ariaLabel: ariaLabel,\n    ariaLabelledBy: ariaLabelledBy,\n    ariaDescribedBy: ariaDescribedBy,\n    isFocusable: isFocusable,\n    children: layers.map(function (layer, i) {\n      var _layerById$layer;\n\n      if (typeof layer === 'function') {\n        return jsx(Fragment$1, {\n          children: createElement(layer, layerContext)\n        }, i);\n      }\n\n      return (_layerById$layer = layerById === null || layerById === void 0 ? void 0 : layerById[layer]) !== null && _layerById$layer !== void 0 ? _layerById$layer : null;\n    })\n  });\n};\n\nvar Bar = function Bar(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref2$isInteractive,\n      _ref2$animate = _ref2.animate,\n      animate = _ref2$animate === void 0 ? svgDefaultProps.animate : _ref2$animate,\n      _ref2$motionConfig = _ref2.motionConfig,\n      motionConfig = _ref2$motionConfig === void 0 ? svgDefaultProps.motionConfig : _ref2$motionConfig,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    animate: animate,\n    isInteractive: isInteractive,\n    motionConfig: motionConfig,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerBar, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar findBarUnderCursor = function findBarUnderCursor(nodes, margin, x, y) {\n  return nodes.find(function (node) {\n    return isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y);\n  });\n};\n\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\nvar InnerBarCanvas = function InnerBarCanvas(_ref) {\n  var data = _ref.data,\n      indexBy = _ref.indexBy,\n      keys = _ref.keys,\n      partialMargin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      groupMode = _ref.groupMode,\n      layout = _ref.layout,\n      reverse = _ref.reverse,\n      minValue = _ref.minValue,\n      maxValue = _ref.maxValue,\n      valueScale = _ref.valueScale,\n      indexScale = _ref.indexScale,\n      padding = _ref.padding,\n      innerPadding = _ref.innerPadding,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? canvasDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? canvasDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? canvasDefaultProps.enableGridX : _ref$enableGridX,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? canvasDefaultProps.enableGridY : _ref$enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? canvasDefaultProps.layers : _ref$layers,\n      _ref$renderBar = _ref.renderBar,\n      renderBar = _ref$renderBar === void 0 ? function (ctx, _ref2) {\n    var _ref2$bar = _ref2.bar,\n        color = _ref2$bar.color,\n        height = _ref2$bar.height,\n        width = _ref2$bar.width,\n        x = _ref2$bar.x,\n        y = _ref2$bar.y,\n        borderColor = _ref2.borderColor,\n        borderRadius = _ref2.borderRadius,\n        borderWidth = _ref2.borderWidth,\n        label = _ref2.label,\n        labelColor = _ref2.labelColor,\n        shouldRenderLabel = _ref2.shouldRenderLabel;\n    ctx.fillStyle = color;\n\n    if (borderWidth > 0) {\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n    }\n\n    ctx.beginPath();\n\n    if (borderRadius > 0) {\n      var radius = Math.min(borderRadius, height);\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n    } else {\n      ctx.rect(x, y, width, height);\n    }\n\n    ctx.fill();\n\n    if (borderWidth > 0) {\n      ctx.stroke();\n    }\n\n    if (shouldRenderLabel) {\n      ctx.textBaseline = 'middle';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = labelColor;\n      ctx.fillText(label, x + width / 2, y + height / 2);\n    }\n  } : _ref$renderBar,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipHeight = _ref.labelSkipHeight,\n      labelTextColor = _ref.labelTextColor,\n      colorBy = _ref.colorBy,\n      colors = _ref.colors,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? canvasDefaultProps.borderRadius : _ref$borderRadius,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? canvasDefaultProps.borderWidth : _ref$borderWidth,\n      borderColor = _ref.borderColor,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? canvasDefaultProps.annotations : _ref$annotations,\n      legendLabel = _ref.legendLabel,\n      tooltipLabel = _ref.tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? canvasDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? canvasDefaultProps.tooltip : _ref$tooltip,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      legends = _ref.legends,\n      _ref$pixelRatio = _ref.pixelRatio,\n      pixelRatio = _ref$pixelRatio === void 0 ? canvasDefaultProps.pixelRatio : _ref$pixelRatio,\n      canvasRef = _ref.canvasRef;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useBar = useBar({\n    indexBy: indexBy,\n    label: label,\n    tooltipLabel: tooltipLabel,\n    valueFormat: valueFormat,\n    colors: colors,\n    colorBy: colorBy,\n    borderColor: borderColor,\n    labelTextColor: labelTextColor,\n    groupMode: groupMode,\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    margin: margin,\n    width: innerWidth,\n    height: innerHeight,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    enableLabel: enableLabel,\n    labelSkipWidth: labelSkipWidth,\n    labelSkipHeight: labelSkipHeight,\n    legends: legends,\n    legendLabel: legendLabel\n  }),\n      bars = _useBar.bars,\n      barsWithValue = _useBar.barsWithValue,\n      xScale = _useBar.xScale,\n      yScale = _useBar.yScale,\n      getLabel = _useBar.getLabel,\n      getTooltipLabel = _useBar.getTooltipLabel,\n      getBorderColor = _useBar.getBorderColor,\n      getLabelColor = _useBar.getLabelColor,\n      shouldRenderBarLabel = _useBar.shouldRenderBarLabel,\n      legendsWithData = _useBar.legendsWithData;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var boundAnnotations = useComputedAnnotations({\n    annotations: useAnnotations({\n      data: bars,\n      annotations: annotations,\n      getPosition: function getPosition(node) {\n        return {\n          x: node.x,\n          y: node.y\n        };\n      },\n      getDimensions: function getDimensions(_ref3) {\n        var width = _ref3.width,\n            height = _ref3.height;\n        return {\n          width: width,\n          height: height,\n          size: Math.max(width, height)\n        };\n      }\n    })\n  });\n  var layerContext = useMemo(function () {\n    return {\n      borderRadius: borderRadius,\n      borderWidth: borderWidth,\n      enableLabel: enableLabel,\n      isInteractive: isInteractive,\n      labelSkipWidth: labelSkipWidth,\n      labelSkipHeight: labelSkipHeight,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      getTooltipLabel: getTooltipLabel,\n      tooltip: tooltip,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      width: width,\n      height: height,\n      bars: bars,\n      xScale: xScale,\n      yScale: yScale\n    };\n  }, [borderRadius, borderWidth, enableLabel, getTooltipLabel, height, innerHeight, innerWidth, isInteractive, labelSkipHeight, labelSkipWidth, margin, onClick, onMouseEnter, onMouseLeave, bars, xScale, yScale, tooltip, width]);\n  useEffect(function () {\n    var _canvasEl$current;\n\n    var ctx = (_canvasEl$current = canvasEl.current) === null || _canvasEl$current === void 0 ? void 0 : _canvasEl$current.getContext('2d');\n    if (!canvasEl.current) return;\n    if (!ctx) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (layer === 'grid') {\n        if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n          ctx.lineWidth = theme.grid.line.strokeWidth;\n          ctx.strokeStyle = theme.grid.line.stroke;\n\n          if (enableGridX) {\n            renderGridLinesToCanvas(ctx, {\n              width: width,\n              height: height,\n              scale: xScale,\n              axis: 'x',\n              values: gridXValues\n            });\n          }\n\n          if (enableGridY) {\n            renderGridLinesToCanvas(ctx, {\n              width: width,\n              height: height,\n              scale: yScale,\n              axis: 'y',\n              values: gridYValues\n            });\n          }\n        }\n      } else if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      } else if (layer === 'bars') {\n        barsWithValue.forEach(function (bar) {\n          renderBar(ctx, {\n            bar: bar,\n            borderColor: getBorderColor(bar),\n            borderRadius: borderRadius,\n            borderWidth: borderWidth,\n            label: getLabel(bar.data),\n            labelColor: getLabelColor(bar),\n            shouldRenderLabel: shouldRenderBarLabel(bar)\n          });\n        });\n      } else if (layer === 'legends') {\n        legendsWithData.forEach(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              legend = _ref5[0],\n              data = _ref5[1];\n\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: data,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      } else if (layer === 'annotations') {\n        renderAnnotationsToCanvas(ctx, {\n          annotations: boundAnnotations,\n          theme: theme\n        });\n      } else if (typeof layer === 'function') {\n        layer(ctx, layerContext);\n      }\n    });\n    ctx.save();\n  }, [axisBottom, axisLeft, axisRight, axisTop, barsWithValue, borderRadius, borderWidth, boundAnnotations, enableGridX, enableGridY, getBorderColor, getLabel, getLabelColor, gridXValues, gridYValues, groupMode, height, innerHeight, innerWidth, layerContext, layers, layout, legendsWithData, margin.left, margin.top, outerHeight, outerWidth, pixelRatio, renderBar, xScale, yScale, reverse, shouldRenderBarLabel, theme, width]);\n  var handleMouseHover = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar !== undefined) {\n      showTooltipFromEvent(createElement(tooltip, _objectSpread2(_objectSpread2({}, bar.data), {}, {\n        color: bar.color,\n        label: bar.label,\n        value: Number(bar.data.value)\n      })), event);\n\n      if (event.type === 'mouseenter') {\n        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(bar.data, event);\n      }\n    } else {\n      hideTooltip();\n    }\n  }, [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n    hideTooltip();\n\n    var _getRelativeCursor3 = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor4 = _slicedToArray(_getRelativeCursor3, 2),\n        x = _getRelativeCursor4[0],\n        y = _getRelativeCursor4[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar) {\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(bar.data, event);\n    }\n  }, [hideTooltip, margin, onMouseLeave, bars]);\n  var handleClick = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n\n    var _getRelativeCursor5 = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor6 = _slicedToArray(_getRelativeCursor5, 2),\n        x = _getRelativeCursor6[0],\n        y = _getRelativeCursor6[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar !== undefined) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(_objectSpread2(_objectSpread2({}, bar.data), {}, {\n        color: bar.color\n      }), event);\n    }\n  }, [margin, onClick, bars]);\n  return jsx(\"canvas\", {\n    ref: function ref(canvas) {\n      canvasEl.current = canvas;\n      if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas;\n    },\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nvar BarCanvas = forwardRef(function (_ref6, ref) {\n  var isInteractive = _ref6.isInteractive,\n      renderWrapper = _ref6.renderWrapper,\n      theme = _ref6.theme,\n      props = _objectWithoutProperties(_ref6, [\"isInteractive\", \"renderWrapper\", \"theme\"]);\n\n  return jsx(Container, {\n    isInteractive: isInteractive,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    animate: false,\n    children: jsx(InnerBarCanvas, _objectSpread2(_objectSpread2({}, props), {}, {\n      canvasRef: ref\n    }))\n  });\n});\n\nvar ResponsiveBar = function ResponsiveBar(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(Bar, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nvar ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas(props, ref) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(BarCanvas, _objectSpread2(_objectSpread2({\n        width: width,\n        height: height\n      }, props), {}, {\n        ref: ref\n      }));\n    }\n  });\n});\nexport { Bar, BarCanvas, BarItem, ResponsiveBar, ResponsiveBarCanvas, canvasDefaultProps, defaultProps, svgDefaultProps };","map":null,"metadata":{},"sourceType":"module"}