{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { loginRequest, loginFailure, loginSuccess, joinSuccess, joinFailure, joinRequest, existSuccess, existFailure, existRequest, modifySuccess, modifyFailure } from \"features/user/reducer/userSlice\";\nimport { userAPI } from \"features/user\";\n\n// function* token(action: PayloadAction<TokenPayload>) {\n//   // try {\n//   //   const {data} = await axios.post('/api/auth/signin', {email, password});\n//   //   console.log(data);\n//   try {\n//     const result: UserDataPayload = yield call(\n//       userAPI.tokenAPI,\n//       action.payload\n//     );\n//     dispatch(setToken(data.token))\n//     const { redirectUrl } = queryString.parse(props.location.search);\n//     if (redirectUrl) {\n//       props.history.push(redirectUrl);\n//     } else {\n//       props.history.push('/');\n//     }\n//   }\nfunction* exist(action) {\n  try {\n    const result = yield call(userAPI.existAPI, action.payload);\n    yield put(existSuccess(result));\n    alert(\"가능한 아이디입니다.\");\n  } catch (error) {\n    yield put(existFailure(error));\n    alert(\"쓸수없는 아이디입니다.\");\n  }\n}\n\nfunction* join(action) {\n  try {\n    console.log(action);\n    const result = yield call(userAPI.joinAPI, action.payload);\n    yield put(joinSuccess(result));\n    window.location.href = 'users/login';\n  } catch (error) {\n    // alert(\"아이디오류\")\n    yield put(joinFailure(error));\n  }\n}\n\nfunction* login(action) {\n  try {\n    // fork는 비동기 call은 동기\n    // fork를 쓰면 불러온것들을 result에 넣어줘야 하는데 바로 다음코드가 실행됨\n    // 블로그에 있는 코드로는 yield 생성기 에러 자꾸남.... => const result = yield call(userAPI.join, action.payload);\n    const result = yield call(userAPI.loginAPI, action.payload);\n    alert(`================================${JSON.stringify(action.payload)}`); // const token: UserDataPayload = yield call(\n    //   userAPI.tokenAPI,\n    //   action_t.payload\n    // );\n    //요청 성공시\n\n    yield put(loginSuccess(result));\n    console.log(`=============result===================${JSON.stringify(result)}`);\n    window.localStorage.setItem('sessionUser', JSON.stringify(result.data.user.username));\n    window.localStorage.setItem('sessionModify', JSON.stringify(result.data.user));\n    window.location.href = \"/home\";\n  } catch (error) {\n    alert(`error :: ${error}`);\n    alert(\"아이디 혹은 비밀번호가 틀렸습니다!\");\n    yield put(loginFailure(error));\n  }\n}\n\nfunction* modify(action) {\n  try {\n    const result = yield call(userAPI.modifyAPI, action.payload);\n    yield put(modifySuccess(result));\n  } catch (error) {\n    // alert(\"아이디오류\")\n    yield put(modifyFailure(error));\n  }\n} // Watch 함수\n\n\nexport function* watchLogin() {\n  yield takeLatest(loginRequest.type, login); // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n  // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n}\nexport function* watchJoin() {\n  yield takeLatest(joinRequest.type, join);\n}\nexport function* watchExist() {\n  yield takeLatest(existRequest.type, exist);\n}\nexport function* watchModify() {\n  yield takeLatest(existRequest.type, modify);\n}","map":{"version":3,"sources":["C:/Users/bitcamp/Desktop/자비스12-21/jarviis-msa-frontend/src/features/user/module/userSaga.ts"],"names":["call","put","takeLatest","loginRequest","loginFailure","loginSuccess","joinSuccess","joinFailure","joinRequest","existSuccess","existFailure","existRequest","modifySuccess","modifyFailure","userAPI","exist","action","result","existAPI","payload","alert","error","join","console","log","joinAPI","window","location","href","login","loginAPI","JSON","stringify","localStorage","setItem","data","user","username","modify","modifyAPI","watchLogin","type","watchJoin","watchExist","watchModify"],"mappings":"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","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, delay, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  LoginPayload,\n  UserDataPayload,\n  loginRequest,\n  loginFailure,\n  loginSuccess,\n  JoinPayload,\n  joinSuccess,\n  joinFailure,\n  joinRequest,\n  ExistPayload,\n  existSuccess,\n  existFailure,\n  existRequest,\n  ModifyPayload,\n  modifySuccess,\n  modifyFailure,\n  TokenPayload,\n} from \"features/user/reducer/userSlice\";\nimport { userAPI } from \"features/user\";\nimport { func } from \"prop-types\";\n\n\n// function* token(action: PayloadAction<TokenPayload>) {\n//   // try {\n//   //   const {data} = await axios.post('/api/auth/signin', {email, password});\n//   //   console.log(data);\n//   try {\n//     const result: UserDataPayload = yield call(\n//       userAPI.tokenAPI,\n//       action.payload\n//     );\n//     dispatch(setToken(data.token))\n//     const { redirectUrl } = queryString.parse(props.location.search);\n//     if (redirectUrl) {\n//       props.history.push(redirectUrl);\n//     } else {\n//       props.history.push('/');\n//     }\n//   }\n\nfunction* exist(action: PayloadAction<ExistPayload>) {\n    try {\n      const result: UserDataPayload = yield call(\n        userAPI.existAPI,\n        action.payload\n      );\n      yield put(existSuccess(result));\n      alert(\"가능한 아이디입니다.\")\n    } catch (error: any) {\n      yield put(existFailure(error))\n      alert(\"쓸수없는 아이디입니다.\")\n    }\n  }\n\n\n  function* join(action: PayloadAction<JoinPayload>) {\n    try {\n      console.log(action)\n      const result: UserDataPayload = yield call(\n\n        userAPI.joinAPI,\n        action.payload\n      );\n      yield put(joinSuccess(result));\n      window.location.href = 'users/login'\n    } catch (error: any) {\n      // alert(\"아이디오류\")\n      yield put(joinFailure(error));\n    }\n  }\n  function* login(action: PayloadAction<LoginPayload>) {\n    try {\n      // fork는 비동기 call은 동기\n      // fork를 쓰면 불러온것들을 result에 넣어줘야 하는데 바로 다음코드가 실행됨\n      // 블로그에 있는 코드로는 yield 생성기 에러 자꾸남.... => const result = yield call(userAPI.join, action.payload);\n      const result: UserDataPayload = yield call(\n        userAPI.loginAPI,\n        action.payload\n      );\n      alert(`================================${JSON.stringify(action.payload)}`)\n      // const token: UserDataPayload = yield call(\n      //   userAPI.tokenAPI,\n      //   action_t.payload\n      // );\n      //요청 성공시\n      yield put(loginSuccess(result));\n      console.log(`=============result===================${JSON.stringify(result)}`)\n      window.localStorage.setItem('sessionUser', JSON.stringify(result.data.user.username))\n      window.localStorage.setItem('sessionModify', JSON.stringify(result.data.user))\n      window.location.href = \"/home\"\n    } catch (error: any) {\n      alert(`error :: ${error}`)\n      alert(\"아이디 혹은 비밀번호가 틀렸습니다!\")\n      yield put(loginFailure(error));\n    }\n  }\n  function* modify(action: PayloadAction<ModifyPayload>) {\n    try {\n      const result: UserDataPayload = yield call(\n        userAPI.modifyAPI,\n        action.payload\n      );\n      yield put(modifySuccess(result));\n\n    } catch (error: any) {\n      // alert(\"아이디오류\")\n      yield put(modifyFailure(error));\n    }\n  }\n\n  // Watch 함수\n  export function* watchLogin() {\n    yield takeLatest(loginRequest.type, login);\n    // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n    // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n  }\n  export function* watchJoin() {\n    yield takeLatest(joinRequest.type, join);\n  }\n  export function* watchExist() {\n    yield takeLatest(existRequest.type, exist);\n  }\n  export function* watchModify() {\n    yield takeLatest(existRequest.type, modify);\n  }"]},"metadata":{},"sourceType":"module"}