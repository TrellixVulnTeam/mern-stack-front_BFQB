{"ast":null,"code":"import uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport sortBy from 'lodash/sortBy';\nimport last from 'lodash/last';\nimport isDate from 'lodash/isDate';\nimport { utcParse, timeParse } from 'd3-time-format';\nimport { scaleLinear, scalePoint, scaleBand, scaleUtc, scaleTime, scaleLog, scaleSymlog } from 'd3-scale';\nimport { timeInterval, timeMillisecond, utcMillisecond, timeSecond, utcSecond, timeMinute, utcMinute, timeHour, utcHour, timeWeek, utcWeek, timeSunday, utcSunday, timeMonday, utcMonday, timeTuesday, utcTuesday, timeWednesday, utcWednesday, timeThursday, utcThursday, timeFriday, utcFriday, timeSaturday, utcSaturday, timeMonth, utcMonth, timeYear, utcYear } from 'd3-time';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar timePrecisions = ['millisecond', 'second', 'minute', 'hour', 'day', 'month', 'year'];\nvar precisionCutOffs = [function (date) {\n  return date.setMilliseconds(0);\n}, function (date) {\n  return date.setSeconds(0);\n}, function (date) {\n  return date.setMinutes(0);\n}, function (date) {\n  return date.setHours(0);\n}, function (date) {\n  return date.setDate(1);\n}, function (date) {\n  return date.setMonth(0);\n}];\nvar precisionCutOffsByType = {\n  millisecond: [],\n  second: precisionCutOffs.slice(0, 1),\n  minute: precisionCutOffs.slice(0, 2),\n  hour: precisionCutOffs.slice(0, 3),\n  day: precisionCutOffs.slice(0, 4),\n  month: precisionCutOffs.slice(0, 5),\n  year: precisionCutOffs.slice(0, 6)\n};\n\nvar createPrecisionMethod = function createPrecisionMethod(precision) {\n  return function (date) {\n    precisionCutOffsByType[precision].forEach(function (cutOff) {\n      cutOff(date);\n    });\n    return date;\n  };\n};\n\nvar createDateNormalizer = function createDateNormalizer(_ref) {\n  var _ref$format = _ref.format,\n      format = _ref$format === void 0 ? 'native' : _ref$format,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 'millisecond' : _ref$precision,\n      _ref$useUTC = _ref.useUTC,\n      useUTC = _ref$useUTC === void 0 ? true : _ref$useUTC;\n  var precisionFn = createPrecisionMethod(precision);\n  return function (value) {\n    if (value === undefined) {\n      return value;\n    }\n\n    if (format === 'native' || value instanceof Date) {\n      return precisionFn(value);\n    }\n\n    var parseTime = useUTC ? utcParse(format) : timeParse(format);\n    return precisionFn(parseTime(value));\n  };\n};\n\nvar createLinearScale = function createLinearScale(_ref, data, size, axis) {\n  var _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 'auto' : _ref$max,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === void 0 ? false : _ref$clamp,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === void 0 ? false : _ref$nice;\n  var minValue;\n\n  if (min === 'auto') {\n    var _data$minStacked;\n\n    minValue = stacked === true ? (_data$minStacked = data.minStacked) !== null && _data$minStacked !== void 0 ? _data$minStacked : 0 : data.min;\n  } else {\n    minValue = min;\n  }\n\n  var maxValue;\n\n  if (max === 'auto') {\n    var _data$maxStacked;\n\n    maxValue = stacked === true ? (_data$maxStacked = data.maxStacked) !== null && _data$maxStacked !== void 0 ? _data$maxStacked : 0 : data.max;\n  } else {\n    maxValue = max;\n  }\n\n  var scale = scaleLinear().rangeRound(axis === 'x' ? [0, size] : [size, 0]).domain(reverse ? [maxValue, minValue] : [minValue, maxValue]).clamp(clamp);\n  if (nice === true) scale.nice();else if (typeof nice === 'number') scale.nice(nice);\n  return castLinearScale(scale, stacked);\n};\n\nvar castLinearScale = function castLinearScale(scale) {\n  var stacked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var typedScale = scale;\n  typedScale.type = 'linear';\n  typedScale.stacked = stacked;\n  return typedScale;\n};\n\nvar createPointScale = function createPointScale(_spec, data, size) {\n  var scale = scalePoint().range([0, size]).domain(data.all);\n  var typedScale = scale;\n  typedScale.type = 'point';\n  return typedScale;\n};\n\nvar createBandScale = function createBandScale(_ref, data, size, axis) {\n  var _ref$round = _ref.round,\n      round = _ref$round === void 0 ? true : _ref$round;\n  var scale = scaleBand().range(axis === 'x' ? [0, size] : [size, 0]).domain(data.all).round(round);\n  return castBandScale(scale);\n};\n\nvar castBandScale = function castBandScale(scale) {\n  var typedScale = scale;\n  typedScale.type = 'band';\n  return typedScale;\n};\n\nvar createTimeScale = function createTimeScale(_ref, data, size) {\n  var _ref$format = _ref.format,\n      format = _ref$format === void 0 ? 'native' : _ref$format,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 'millisecond' : _ref$precision,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 'auto' : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 'auto' : _ref$max,\n      _ref$useUTC = _ref.useUTC,\n      useUTC = _ref$useUTC === void 0 ? true : _ref$useUTC,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === void 0 ? false : _ref$nice;\n  var normalize = createDateNormalizer({\n    format: format,\n    precision: precision,\n    useUTC: useUTC\n  });\n  var minValue;\n\n  if (min === 'auto') {\n    minValue = normalize(data.min);\n  } else if (format !== 'native') {\n    minValue = normalize(min);\n  } else {\n    minValue = min;\n  }\n\n  var maxValue;\n\n  if (max === 'auto') {\n    maxValue = normalize(data.max);\n  } else if (format !== 'native') {\n    maxValue = normalize(max);\n  } else {\n    maxValue = max;\n  }\n\n  var scale = useUTC ? scaleUtc() : scaleTime();\n  scale.range([0, size]);\n  if (minValue && maxValue) scale.domain([minValue, maxValue]);\n  if (nice === true) scale.nice();else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice);\n  var typedScale = scale;\n  typedScale.type = 'time';\n  typedScale.useUTC = useUTC;\n  return typedScale;\n};\n\nvar createLogScale = function createLogScale(_ref, data, size, axis) {\n  var _ref$base = _ref.base,\n      base = _ref$base === void 0 ? 10 : _ref$base,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 'auto' : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 'auto' : _ref$max;\n  var hasZero = data.all.some(function (v) {\n    return v === 0;\n  });\n\n  if (hasZero) {\n    throw new Error(\"a log scale domain must not include or cross zero\");\n  }\n\n  var sign;\n  var hasMixedSign = false;\n  data.all.filter(function (v) {\n    return v != null;\n  }).forEach(function (v) {\n    if (hasMixedSign) return;\n\n    if (sign === undefined) {\n      sign = Math.sign(v);\n    } else if (Math.sign(v) !== sign) {\n      hasMixedSign = true;\n    }\n  });\n\n  if (hasMixedSign) {\n    throw new Error(\"a log scale domain must be strictly-positive or strictly-negative\");\n  }\n\n  var minValue;\n\n  if (min === 'auto') {\n    minValue = data.min;\n  } else {\n    minValue = min;\n  }\n\n  var maxValue;\n\n  if (max === 'auto') {\n    maxValue = data.max;\n  } else {\n    maxValue = max;\n  }\n\n  var scale = scaleLog().domain([minValue, maxValue]).rangeRound(axis === 'x' ? [0, size] : [size, 0]).base(base).nice();\n  var typedScale = scale;\n  typedScale.type = 'log';\n  return scale;\n};\n\nvar createSymlogScale = function createSymlogScale(_ref, data, size, axis) {\n  var _ref$constant = _ref.constant,\n      constant = _ref$constant === void 0 ? 1 : _ref$constant,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 'auto' : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 'auto' : _ref$max,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse;\n  var minValue;\n\n  if (min === 'auto') {\n    minValue = data.min;\n  } else {\n    minValue = min;\n  }\n\n  var maxValue;\n\n  if (max === 'auto') {\n    maxValue = data.max;\n  } else {\n    maxValue = max;\n  }\n\n  var scale = scaleSymlog().constant(constant).rangeRound(axis === 'x' ? [0, size] : [size, 0]).nice();\n  if (reverse === true) scale.domain([maxValue, minValue]);else scale.domain([minValue, maxValue]);\n  var typedScale = scale;\n  typedScale.type = 'symlog';\n  return typedScale;\n};\n\nvar getOtherAxis = function getOtherAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n};\n\nvar compareValues = function compareValues(a, b) {\n  return a === b;\n};\n\nvar compareDateValues = function compareDateValues(a, b) {\n  return a.getTime() === b.getTime();\n};\n\nfunction computeScale(spec, data, size, axis) {\n  switch (spec.type) {\n    case 'linear':\n      return createLinearScale(spec, data, size, axis);\n\n    case 'point':\n      return createPointScale(spec, data, size);\n\n    case 'band':\n      return createBandScale(spec, data, size, axis);\n\n    case 'time':\n      return createTimeScale(spec, data, size);\n\n    case 'log':\n      return createLogScale(spec, data, size, axis);\n\n    case 'symlog':\n      return createSymlogScale(spec, data, size, axis);\n\n    default:\n      throw new Error('invalid scale spec');\n  }\n}\n\nvar nestSerieData = function nestSerieData(serie) {\n  return _objectSpread2(_objectSpread2({}, serie), {}, {\n    data: serie.data.map(function (d) {\n      return {\n        data: _objectSpread2({}, d)\n      };\n    })\n  });\n};\n\nvar getDatumAxisPosition = function getDatumAxisPosition(datum, axis, scale) {\n  var _scale;\n\n  if ('stacked' in scale && scale.stacked) {\n    var stackedValue = datum.data[axis === 'x' ? 'xStacked' : 'yStacked'];\n\n    if (stackedValue === null || stackedValue === undefined) {\n      return null;\n    }\n\n    return scale(stackedValue);\n  }\n\n  return (_scale = scale(datum.data[axis])) !== null && _scale !== void 0 ? _scale : null;\n};\n\nvar computeXYScalesForSeries = function computeXYScalesForSeries(series, xScaleSpec, yScaleSpec, width, height) {\n  var nestedSeries = series.map(function (serie) {\n    return nestSerieData(serie);\n  });\n  var xy = generateSeriesXY(nestedSeries, xScaleSpec, yScaleSpec);\n\n  if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n    stackX(xy, nestedSeries);\n  }\n\n  if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n    stackY(xy, nestedSeries);\n  }\n\n  var xScale = computeScale(xScaleSpec, xy.x, width, 'x');\n  var yScale = computeScale(yScaleSpec, xy.y, height, 'y');\n  var computedSeries = nestedSeries.map(function (serie) {\n    return _objectSpread2(_objectSpread2({}, serie), {}, {\n      data: serie.data.map(function (datum) {\n        return _objectSpread2(_objectSpread2({}, datum), {}, {\n          position: {\n            x: getDatumAxisPosition(datum, 'x', xScale),\n            y: getDatumAxisPosition(datum, 'y', yScale)\n          }\n        });\n      })\n    });\n  });\n  return _objectSpread2(_objectSpread2({}, xy), {}, {\n    series: computedSeries,\n    xScale: xScale,\n    yScale: yScale\n  });\n};\n\nvar generateSeriesXY = function generateSeriesXY(series, xScaleSpec, yScaleSpec) {\n  return {\n    x: generateSeriesAxis(series, 'x', xScaleSpec),\n    y: generateSeriesAxis(series, 'y', yScaleSpec)\n  };\n};\n\nvar generateSeriesAxis = function generateSeriesAxis(series, axis, scaleSpec) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$getValue = _ref.getValue,\n      getValue = _ref$getValue === void 0 ? function (d) {\n    return d.data[axis];\n  } : _ref$getValue,\n      _ref$setValue = _ref.setValue,\n      setValue = _ref$setValue === void 0 ? function (d, v) {\n    d.data[axis] = v;\n  } : _ref$setValue;\n\n  if (scaleSpec.type === 'linear') {\n    series.forEach(function (serie) {\n      serie.data.forEach(function (d) {\n        var value = getValue(d);\n\n        if (value) {\n          setValue(d, parseFloat(String(value)));\n        }\n      });\n    });\n  } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n    var parseTime = createDateNormalizer(scaleSpec);\n    series.forEach(function (serie) {\n      serie.data.forEach(function (d) {\n        var value = getValue(d);\n\n        if (value) {\n          setValue(d, parseTime(value));\n        }\n      });\n    });\n  }\n\n  var values = [];\n  series.forEach(function (serie) {\n    serie.data.forEach(function (d) {\n      values.push(getValue(d));\n    });\n  });\n\n  switch (scaleSpec.type) {\n    case 'linear':\n      {\n        var all = sortBy(uniq(values).filter(function (v) {\n          return v !== null;\n        }), function (v) {\n          return v;\n        });\n        return {\n          all: all,\n          min: Math.min.apply(Math, _toConsumableArray(all)),\n          max: Math.max.apply(Math, _toConsumableArray(all))\n        };\n      }\n\n    case 'time':\n      {\n        var _all = uniqBy(values, function (v) {\n          return v.getTime();\n        }).slice(0).sort(function (a, b) {\n          return b.getTime() - a.getTime();\n        }).reverse();\n\n        return {\n          all: _all,\n          min: _all[0],\n          max: last(_all)\n        };\n      }\n\n    default:\n      {\n        var _all2 = uniq(values);\n\n        return {\n          all: _all2,\n          min: _all2[0],\n          max: last(_all2)\n        };\n      }\n  }\n};\n\nvar stackAxis = function stackAxis(axis, xy, series) {\n  var otherAxis = getOtherAxis(axis);\n  var all = [];\n  xy[otherAxis].all.forEach(function (v) {\n    var compare = isDate(v) ? compareDateValues : compareValues;\n    var stack = [];\n    series.forEach(function (serie) {\n      var datum = serie.data.find(function (d) {\n        return compare(d.data[otherAxis], v);\n      });\n      var value = null;\n      var stackValue = null;\n\n      if (datum !== undefined) {\n        value = datum.data[axis];\n\n        if (value !== null) {\n          var head = last(stack);\n\n          if (head === undefined) {\n            stackValue = value;\n          } else if (head !== null) {\n            stackValue = head + value;\n          }\n        }\n\n        datum.data[axis === 'x' ? 'xStacked' : 'yStacked'] = stackValue;\n      }\n\n      stack.push(stackValue);\n\n      if (stackValue !== null) {\n        all.push(stackValue);\n      }\n    });\n  });\n  xy[axis].minStacked = Math.min.apply(Math, all);\n  xy[axis].maxStacked = Math.max.apply(Math, all);\n};\n\nvar stackX = function stackX(xy, series) {\n  return stackAxis('x', xy, series);\n};\n\nvar stackY = function stackY(xy, series) {\n  return stackAxis('y', xy, series);\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar centerScale = function centerScale(scale) {\n  var bandwidth = scale.bandwidth();\n  if (bandwidth === 0) return scale;\n  var offset = bandwidth / 2;\n\n  if (scale.round()) {\n    offset = Math.round(offset);\n  }\n\n  return function (d) {\n    var _scale;\n\n    return ((_scale = scale(d)) !== null && _scale !== void 0 ? _scale : 0) + offset;\n  };\n};\n\nvar timeDay = timeInterval(function (date) {\n  return date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  return date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end.getTime() - start.getTime()) / 864e5;\n}, function (date) {\n  return Math.floor(date.getTime() / 864e5);\n});\nvar utcDay = timeInterval(function (date) {\n  return date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  return date.setUTCDate(date.getUTCDate() + step);\n}, function (start, end) {\n  return (end.getTime() - start.getTime()) / 864e5;\n}, function (date) {\n  return Math.floor(date.getTime() / 864e5);\n});\nvar timeByType = {\n  millisecond: [timeMillisecond, utcMillisecond],\n  second: [timeSecond, utcSecond],\n  minute: [timeMinute, utcMinute],\n  hour: [timeHour, utcHour],\n  day: [timeDay, utcDay],\n  week: [timeWeek, utcWeek],\n  sunday: [timeSunday, utcSunday],\n  monday: [timeMonday, utcMonday],\n  tuesday: [timeTuesday, utcTuesday],\n  wednesday: [timeWednesday, utcWednesday],\n  thursday: [timeThursday, utcThursday],\n  friday: [timeFriday, utcFriday],\n  saturday: [timeSaturday, utcSaturday],\n  month: [timeMonth, utcMonth],\n  year: [timeYear, utcYear]\n};\nvar timeTypes = Object.keys(timeByType);\nvar timeIntervalRegexp = new RegExp(\"^every\\\\s*(\\\\d+)?\\\\s*(\".concat(timeTypes.join('|'), \")s?$\"), 'i');\n\nvar isInteger = function isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nvar getScaleTicks = function getScaleTicks(scale, spec) {\n  if (Array.isArray(spec)) {\n    return spec;\n  }\n\n  if (typeof spec === 'string' && 'useUTC' in scale) {\n    var matches = spec.match(timeIntervalRegexp);\n\n    if (matches) {\n      var _matches = _slicedToArray(matches, 3),\n          amount = _matches[1],\n          type = _matches[2];\n\n      var timeType = timeByType[type][scale.useUTC ? 1 : 0];\n\n      if (type === 'day') {\n        var _timeType$every$range, _timeType$every;\n\n        var _scale$domain = scale.domain(),\n            _scale$domain2 = _slicedToArray(_scale$domain, 2),\n            start = _scale$domain2[0],\n            originalStop = _scale$domain2[1];\n\n        var stop = new Date(originalStop);\n        stop.setDate(stop.getDate() + 1);\n        return (_timeType$every$range = (_timeType$every = timeType.every(Number(amount !== null && amount !== void 0 ? amount : 1))) === null || _timeType$every === void 0 ? void 0 : _timeType$every.range(start, stop)) !== null && _timeType$every$range !== void 0 ? _timeType$every$range : [];\n      }\n\n      if (amount === undefined) {\n        return scale.ticks(timeType);\n      }\n\n      var interval = timeType.every(Number(amount));\n\n      if (interval) {\n        return scale.ticks(interval);\n      }\n    }\n\n    throw new Error(\"Invalid tickValues: \".concat(spec));\n  }\n\n  if ('ticks' in scale) {\n    if (spec === undefined) {\n      return scale.ticks();\n    }\n\n    if (isInteger(spec)) {\n      return scale.ticks(spec);\n    }\n  }\n\n  return scale.domain();\n};\n\nexport { castBandScale, castLinearScale, centerScale, compareDateValues, compareValues, computeScale, computeXYScalesForSeries, createBandScale, createDateNormalizer, createLinearScale, createLogScale, createPointScale, createPrecisionMethod, createSymlogScale, createTimeScale, generateSeriesAxis, generateSeriesXY, getOtherAxis, getScaleTicks, precisionCutOffs, precisionCutOffsByType, stackAxis, timePrecisions };","map":null,"metadata":{},"sourceType":"module"}