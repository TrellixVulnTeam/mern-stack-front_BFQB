{"ast":null,"code":"var repeat = function repeat(str, times) {\n  return new Array(times + 1).join(str);\n};\n\nvar pad = function pad(num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num;\n};\n\nvar formatTime = function formatTime(time) {\n  return pad(time.getHours(), 2) + ':' + pad(time.getMinutes(), 2) + ':' + pad(time.getSeconds(), 2) + '.' + pad(time.getMilliseconds(), 3);\n}; // Use performance API if it's available in order to get better precision\n\n\nvar timer = typeof performance !== 'undefined' && performance !== null && typeof performance.now === 'function' ? performance : Date;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar toConsumableArray = function toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar $scope;\nvar conflict;\nvar conflictResolution = [];\n\nif ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global) {\n  $scope = global;\n} else if (typeof window !== 'undefined') {\n  $scope = window;\n} else {\n  $scope = {};\n}\n\nconflict = $scope.DeepDiff;\n\nif (conflict) {\n  conflictResolution.push(function () {\n    if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {\n      $scope.DeepDiff = conflict;\n      conflict = undefined;\n    }\n  });\n} // nodejs compatible on server side and in the browser.\n\n\nfunction inherits$$1(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nfunction Diff(kind, path) {\n  Object.defineProperty(this, 'kind', {\n    value: kind,\n    enumerable: true\n  });\n\n  if (path && path.length) {\n    Object.defineProperty(this, 'path', {\n      value: path,\n      enumerable: true\n    });\n  }\n}\n\nfunction DiffEdit(path, origin, value) {\n  DiffEdit.super_.call(this, 'E', path);\n  Object.defineProperty(this, 'lhs', {\n    value: origin,\n    enumerable: true\n  });\n  Object.defineProperty(this, 'rhs', {\n    value: value,\n    enumerable: true\n  });\n}\n\ninherits$$1(DiffEdit, Diff);\n\nfunction DiffNew(path, value) {\n  DiffNew.super_.call(this, 'N', path);\n  Object.defineProperty(this, 'rhs', {\n    value: value,\n    enumerable: true\n  });\n}\n\ninherits$$1(DiffNew, Diff);\n\nfunction DiffDeleted(path, value) {\n  DiffDeleted.super_.call(this, 'D', path);\n  Object.defineProperty(this, 'lhs', {\n    value: value,\n    enumerable: true\n  });\n}\n\ninherits$$1(DiffDeleted, Diff);\n\nfunction DiffArray(path, index, item) {\n  DiffArray.super_.call(this, 'A', path);\n  Object.defineProperty(this, 'index', {\n    value: index,\n    enumerable: true\n  });\n  Object.defineProperty(this, 'item', {\n    value: item,\n    enumerable: true\n  });\n}\n\ninherits$$1(DiffArray, Diff);\n\nfunction arrayRemove(arr, from, to) {\n  var rest = arr.slice((to || from) + 1 || arr.length);\n  arr.length = from < 0 ? arr.length + from : from;\n  arr.push.apply(arr, rest);\n  return arr;\n}\n\nfunction realTypeOf(subject) {\n  var type = typeof subject === 'undefined' ? 'undefined' : _typeof(subject);\n\n  if (type !== 'object') {\n    return type;\n  }\n\n  if (subject === Math) {\n    return 'math';\n  } else if (subject === null) {\n    return 'null';\n  } else if (Array.isArray(subject)) {\n    return 'array';\n  } else if (Object.prototype.toString.call(subject) === '[object Date]') {\n    return 'date';\n  } else if (typeof subject.toString === 'function' && /^\\/.*\\//.test(subject.toString())) {\n    return 'regexp';\n  }\n\n  return 'object';\n}\n\nfunction deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {\n  path = path || [];\n  stack = stack || [];\n  var currentPath = path.slice(0);\n\n  if (typeof key !== 'undefined') {\n    if (prefilter) {\n      if (typeof prefilter === 'function' && prefilter(currentPath, key)) {\n        return;\n      } else if ((typeof prefilter === 'undefined' ? 'undefined' : _typeof(prefilter)) === 'object') {\n        if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {\n          return;\n        }\n\n        if (prefilter.normalize) {\n          var alt = prefilter.normalize(currentPath, key, lhs, rhs);\n\n          if (alt) {\n            lhs = alt[0];\n            rhs = alt[1];\n          }\n        }\n      }\n    }\n\n    currentPath.push(key);\n  } // Use string comparison for regexes\n\n\n  if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {\n    lhs = lhs.toString();\n    rhs = rhs.toString();\n  }\n\n  var ltype = typeof lhs === 'undefined' ? 'undefined' : _typeof(lhs);\n  var rtype = typeof rhs === 'undefined' ? 'undefined' : _typeof(rhs);\n  var ldefined = ltype !== 'undefined' || stack && stack[stack.length - 1].lhs && stack[stack.length - 1].lhs.hasOwnProperty(key);\n  var rdefined = rtype !== 'undefined' || stack && stack[stack.length - 1].rhs && stack[stack.length - 1].rhs.hasOwnProperty(key);\n\n  if (!ldefined && rdefined) {\n    changes(new DiffNew(currentPath, rhs));\n  } else if (!rdefined && ldefined) {\n    changes(new DiffDeleted(currentPath, lhs));\n  } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {\n    changes(new DiffEdit(currentPath, lhs, rhs));\n  } else if (realTypeOf(lhs) === 'date' && lhs - rhs !== 0) {\n    changes(new DiffEdit(currentPath, lhs, rhs));\n  } else if (ltype === 'object' && lhs !== null && rhs !== null) {\n    if (!stack.filter(function (x) {\n      return x.lhs === lhs;\n    }).length) {\n      stack.push({\n        lhs: lhs,\n        rhs: rhs\n      });\n\n      if (Array.isArray(lhs)) {\n        var i,\n            len = lhs.length;\n\n        for (i = 0; i < lhs.length; i++) {\n          if (i >= rhs.length) {\n            changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));\n          } else {\n            deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);\n          }\n        }\n\n        while (i < rhs.length) {\n          changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));\n        }\n      } else {\n        var akeys = Object.keys(lhs);\n        var pkeys = Object.keys(rhs);\n        akeys.forEach(function (k, i) {\n          var other = pkeys.indexOf(k);\n\n          if (other >= 0) {\n            deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);\n            pkeys = arrayRemove(pkeys, other);\n          } else {\n            deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);\n          }\n        });\n        pkeys.forEach(function (k) {\n          deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);\n        });\n      }\n\n      stack.length = stack.length - 1;\n    } else if (lhs !== rhs) {\n      // lhs is contains a cycle at this element and it differs from rhs\n      changes(new DiffEdit(currentPath, lhs, rhs));\n    }\n  } else if (lhs !== rhs) {\n    if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {\n      changes(new DiffEdit(currentPath, lhs, rhs));\n    }\n  }\n}\n\nfunction accumulateDiff(lhs, rhs, prefilter, accum) {\n  accum = accum || [];\n  deepDiff(lhs, rhs, function (diff) {\n    if (diff) {\n      accum.push(diff);\n    }\n  }, prefilter);\n  return accum.length ? accum : undefined;\n}\n\nfunction applyArrayChange(arr, index, change) {\n  if (change.path && change.path.length) {\n    var it = arr[index],\n        i,\n        u = change.path.length - 1;\n\n    for (i = 0; i < u; i++) {\n      it = it[change.path[i]];\n    }\n\n    switch (change.kind) {\n      case 'A':\n        applyArrayChange(it[change.path[i]], change.index, change.item);\n        break;\n\n      case 'D':\n        delete it[change.path[i]];\n        break;\n\n      case 'E':\n      case 'N':\n        it[change.path[i]] = change.rhs;\n        break;\n    }\n  } else {\n    switch (change.kind) {\n      case 'A':\n        applyArrayChange(arr[index], change.index, change.item);\n        break;\n\n      case 'D':\n        arr = arrayRemove(arr, index);\n        break;\n\n      case 'E':\n      case 'N':\n        arr[index] = change.rhs;\n        break;\n    }\n  }\n\n  return arr;\n}\n\nfunction applyChange(target, source, change) {\n  if (target && source && change && change.kind) {\n    var it = target,\n        i = -1,\n        last = change.path ? change.path.length - 1 : 0;\n\n    while (++i < last) {\n      if (typeof it[change.path[i]] === 'undefined') {\n        it[change.path[i]] = typeof change.path[i] === 'number' ? [] : {};\n      }\n\n      it = it[change.path[i]];\n    }\n\n    switch (change.kind) {\n      case 'A':\n        applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n        break;\n\n      case 'D':\n        delete it[change.path[i]];\n        break;\n\n      case 'E':\n      case 'N':\n        it[change.path[i]] = change.rhs;\n        break;\n    }\n  }\n}\n\nfunction revertArrayChange(arr, index, change) {\n  if (change.path && change.path.length) {\n    // the structure of the object at the index has changed...\n    var it = arr[index],\n        i,\n        u = change.path.length - 1;\n\n    for (i = 0; i < u; i++) {\n      it = it[change.path[i]];\n    }\n\n    switch (change.kind) {\n      case 'A':\n        revertArrayChange(it[change.path[i]], change.index, change.item);\n        break;\n\n      case 'D':\n        it[change.path[i]] = change.lhs;\n        break;\n\n      case 'E':\n        it[change.path[i]] = change.lhs;\n        break;\n\n      case 'N':\n        delete it[change.path[i]];\n        break;\n    }\n  } else {\n    // the array item is different...\n    switch (change.kind) {\n      case 'A':\n        revertArrayChange(arr[index], change.index, change.item);\n        break;\n\n      case 'D':\n        arr[index] = change.lhs;\n        break;\n\n      case 'E':\n        arr[index] = change.lhs;\n        break;\n\n      case 'N':\n        arr = arrayRemove(arr, index);\n        break;\n    }\n  }\n\n  return arr;\n}\n\nfunction revertChange(target, source, change) {\n  if (target && source && change && change.kind) {\n    var it = target,\n        i,\n        u;\n    u = change.path.length - 1;\n\n    for (i = 0; i < u; i++) {\n      if (typeof it[change.path[i]] === 'undefined') {\n        it[change.path[i]] = {};\n      }\n\n      it = it[change.path[i]];\n    }\n\n    switch (change.kind) {\n      case 'A':\n        // Array was modified...\n        // it will be an array...\n        revertArrayChange(it[change.path[i]], change.index, change.item);\n        break;\n\n      case 'D':\n        // Item was deleted...\n        it[change.path[i]] = change.lhs;\n        break;\n\n      case 'E':\n        // Item was edited...\n        it[change.path[i]] = change.lhs;\n        break;\n\n      case 'N':\n        // Item is new...\n        delete it[change.path[i]];\n        break;\n    }\n  }\n}\n\nfunction applyDiff(target, source, filter) {\n  if (target && source) {\n    var onChange = function onChange(change) {\n      if (!filter || filter(target, source, change)) {\n        applyChange(target, source, change);\n      }\n    };\n\n    deepDiff(target, source, onChange);\n  }\n}\n\nObject.defineProperties(accumulateDiff, {\n  diff: {\n    value: accumulateDiff,\n    enumerable: true\n  },\n  observableDiff: {\n    value: deepDiff,\n    enumerable: true\n  },\n  applyDiff: {\n    value: applyDiff,\n    enumerable: true\n  },\n  applyChange: {\n    value: applyChange,\n    enumerable: true\n  },\n  revertChange: {\n    value: revertChange,\n    enumerable: true\n  },\n  isConflict: {\n    value: function value() {\n      return 'undefined' !== typeof conflict;\n    },\n    enumerable: true\n  },\n  noConflict: {\n    value: function value() {\n      if (conflictResolution) {\n        conflictResolution.forEach(function (it) {\n          it();\n        });\n        conflictResolution = null;\n      }\n\n      return accumulateDiff;\n    },\n    enumerable: true\n  }\n}); // https://github.com/flitbit/diff#differences\n\nvar dictionary = {\n  E: {\n    color: '#2196F3',\n    text: 'CHANGED:'\n  },\n  N: {\n    color: '#4CAF50',\n    text: 'ADDED:'\n  },\n  D: {\n    color: '#F44336',\n    text: 'DELETED:'\n  },\n  A: {\n    color: '#2196F3',\n    text: 'ARRAY:'\n  }\n};\n\nfunction style(kind) {\n  return 'color: ' + dictionary[kind].color + '; font-weight: bold';\n}\n\nfunction render(diff) {\n  var kind = diff.kind,\n      path = diff.path,\n      lhs = diff.lhs,\n      rhs = diff.rhs,\n      index = diff.index,\n      item = diff.item;\n\n  switch (kind) {\n    case 'E':\n      return [path.join('.'), lhs, '→', rhs];\n\n    case 'N':\n      return [path.join('.'), rhs];\n\n    case 'D':\n      return [path.join('.')];\n\n    case 'A':\n      return [path.join('.') + '[' + index + ']', item];\n\n    default:\n      return [];\n  }\n}\n\nfunction diffLogger(prevState, newState, logger, isCollapsed) {\n  var diff = accumulateDiff(prevState, newState);\n\n  try {\n    if (isCollapsed) {\n      logger.groupCollapsed('diff');\n    } else {\n      logger.group('diff');\n    }\n  } catch (e) {\n    logger.log('diff');\n  }\n\n  if (diff) {\n    diff.forEach(function (elem) {\n      var kind = elem.kind;\n      var output = render(elem);\n      logger.log.apply(logger, ['%c ' + dictionary[kind].text, style(kind)].concat(toConsumableArray(output)));\n    });\n  } else {\n    logger.log('—— no diff ——');\n  }\n\n  try {\n    logger.groupEnd();\n  } catch (e) {\n    logger.log('—— diff end —— ');\n  }\n}\n/**\n * Get log level string based on supplied params\n *\n * @param {string | function | object} level - console[level]\n * @param {object} action - selected action\n * @param {array} payload - selected payload\n * @param {string} type - log entry type\n *\n * @returns {string} level\n */\n\n\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level === 'undefined' ? 'undefined' : _typeof(level)) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type].apply(level, toConsumableArray(payload)) : level[type];\n\n    case 'function':\n      return level(action);\n\n    default:\n      return level;\n  }\n}\n\nfunction defaultTitleFormatter(options) {\n  var timestamp = options.timestamp,\n      duration = options.duration;\n  return function (action, time, took) {\n    var parts = ['action'];\n    parts.push('%c' + String(action.type));\n    if (timestamp) parts.push('%c@ ' + time);\n    if (duration) parts.push('%c(in ' + took.toFixed(2) + ' ms)');\n    return parts.join(' ');\n  };\n}\n\nfunction printBuffer(buffer, options) {\n  var logger = options.logger,\n      actionTransformer = options.actionTransformer,\n      _options$titleFormatt = options.titleFormatter,\n      titleFormatter = _options$titleFormatt === undefined ? defaultTitleFormatter(options) : _options$titleFormatt,\n      collapsed = options.collapsed,\n      colors = options.colors,\n      level = options.level,\n      diff = options.diff;\n  var isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n  buffer.forEach(function (logEntry, key) {\n    var started = logEntry.started,\n        startedTime = logEntry.startedTime,\n        action = logEntry.action,\n        prevState = logEntry.prevState,\n        error = logEntry.error;\n    var took = logEntry.took,\n        nextState = logEntry.nextState;\n    var nextEntry = buffer[key + 1];\n\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    } // Message\n\n\n    var formattedAction = actionTransformer(action);\n    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {\n      return nextState;\n    }, action, logEntry) : collapsed;\n    var formattedTime = formatTime(startedTime);\n    var titleCSS = colors.title ? 'color: ' + colors.title(formattedAction) + ';' : '';\n    var headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    var title = titleFormatter(formattedAction, formattedTime, took); // Render\n\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed.apply(logger, ['%c ' + title].concat(headerCSS));\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group.apply(logger, ['%c ' + title].concat(headerCSS));\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n\n    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        var styles = 'color: ' + colors.prevState(prevState) + '; font-weight: bold';\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n\n    if (actionLevel) {\n      if (colors.action) {\n        var _styles = 'color: ' + colors.action(formattedAction) + '; font-weight: bold';\n\n        logger[actionLevel]('%c action    ', _styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n\n    if (error && errorLevel) {\n      if (colors.error) {\n        var _styles2 = 'color: ' + colors.error(error, prevState) + '; font-weight: bold;';\n\n        logger[errorLevel]('%c error     ', _styles2, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        var _styles3 = 'color: ' + colors.nextState(nextState) + '; font-weight: bold';\n\n        logger[nextStateLevel]('%c next state', _styles3, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n\n    if (logger.withTrace) {\n      logger.groupCollapsed('TRACE');\n      logger.trace();\n      logger.groupEnd();\n    }\n\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\n\nvar defaults$1 = {\n  level: 'log',\n  logger: console,\n  logErrors: true,\n  collapsed: undefined,\n  predicate: undefined,\n  duration: false,\n  timestamp: true,\n  stateTransformer: function stateTransformer(state) {\n    return state;\n  },\n  actionTransformer: function actionTransformer(action) {\n    return action;\n  },\n  errorTransformer: function errorTransformer(error) {\n    return error;\n  },\n  colors: {\n    title: function title() {\n      return 'inherit';\n    },\n    prevState: function prevState() {\n      return '#9E9E9E';\n    },\n    action: function action() {\n      return '#03A9F4';\n    },\n    nextState: function nextState() {\n      return '#4CAF50';\n    },\n    error: function error() {\n      return '#F20404';\n    }\n  },\n  diff: false,\n  diffPredicate: undefined,\n  // Deprecated options\n  transformer: undefined\n};\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\n\nfunction createLogger() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var loggerOptions = Object.assign({}, defaults$1, options);\n  var logger = loggerOptions.logger,\n      stateTransformer = loggerOptions.stateTransformer,\n      errorTransformer = loggerOptions.errorTransformer,\n      predicate = loggerOptions.predicate,\n      logErrors = loggerOptions.logErrors,\n      diffPredicate = loggerOptions.diffPredicate; // Return if 'console' object is not defined\n\n  if (typeof logger === 'undefined') {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  } // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n\n\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error('[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from \\'redux-logger\\'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport { createLogger } from \\'redux-logger\\'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n');\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n\n  var logBuffer = [];\n  return function (_ref) {\n    var getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        // Exit early if predicate function returns 'false'\n        if (typeof predicate === 'function' && !predicate(getState, action)) {\n          return next(action);\n        }\n\n        var logEntry = {};\n        logBuffer.push(logEntry);\n        logEntry.started = timer.now();\n        logEntry.startedTime = new Date();\n        logEntry.prevState = stateTransformer(getState());\n        logEntry.action = action;\n        var returnedValue = void 0;\n\n        if (logErrors) {\n          try {\n            returnedValue = next(action);\n          } catch (e) {\n            logEntry.error = errorTransformer(e);\n          }\n        } else {\n          returnedValue = next(action);\n        }\n\n        logEntry.took = timer.now() - logEntry.started;\n        logEntry.nextState = stateTransformer(getState());\n        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;\n        printBuffer(logBuffer, Object.assign({}, loggerOptions, {\n          diff: diff\n        }));\n        logBuffer.length = 0;\n        if (logEntry.error) throw logEntry.error;\n        return returnedValue;\n      };\n    };\n  };\n} // eslint-disable-next-line consistent-return\n\n\nvar defaultLogger = function defaultLogger() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      dispatch = _ref2.dispatch,\n      getState = _ref2.getState;\n\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({\n      dispatch: dispatch,\n      getState: getState\n    });\n  } // eslint-disable-next-line no-console\n\n\n  console.error('\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from \\'redux-logger\\'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from \\'redux-logger\\'\\n');\n};\n\nexport { defaults$1 as defaults, createLogger, defaultLogger as logger };\nexport default defaultLogger;","map":null,"metadata":{},"sourceType":"module"}