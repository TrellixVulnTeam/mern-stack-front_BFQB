{"ast":null,"code":"import { useMemo, createElement, useCallback } from 'react';\nimport { radiansToDegrees, positionFromAngle, degreesToRadians, midAngle, useMotionConfig, useTheme, usePropertyAccessor, textPropsByEngine, getDistance, getAngle } from '@nivo/core';\nimport { useInheritedColor } from '@nivo/colors';\nimport { to, useTransition, animated, useSpring } from '@react-spring/web';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { line, arc } from 'd3-shape';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getNormalizedAngle = function getNormalizedAngle(angle) {\n  var normalizedAngle = angle % (Math.PI * 2);\n\n  if (normalizedAngle < 0) {\n    normalizedAngle += Math.PI * 2;\n  }\n\n  return normalizedAngle;\n};\n\nvar filterDataBySkipAngle = function filterDataBySkipAngle(data, skipAngle) {\n  return data.filter(function (datum) {\n    return Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle;\n  });\n};\n\nvar useFilteredDataBySkipAngle = function useFilteredDataBySkipAngle(data, skipAngle) {\n  return useMemo(function () {\n    return filterDataBySkipAngle(data, skipAngle);\n  }, [data, skipAngle]);\n};\n\nvar svgEllipticalArcCommand = function svgEllipticalArcCommand(radius, largeArcFlag, sweepFlag, x, y) {\n  return ['A', radius, radius, 0, largeArcFlag, sweepFlag, x, y].join(' ');\n};\n\nvar generateSvgArc = function generateSvgArc(radius, originalStartAngle, originalEndAngle) {\n  var startAngle = Math.min(originalStartAngle, originalEndAngle);\n  var endAngle = Math.max(originalStartAngle, originalEndAngle);\n  var start = positionFromAngle(degreesToRadians(endAngle), radius);\n  var end = positionFromAngle(degreesToRadians(startAngle), radius);\n\n  if (endAngle - startAngle >= 360) {\n    var mid = positionFromAngle(degreesToRadians(startAngle + 180), radius);\n    return [\"M \".concat(start.x, \" \").concat(start.y), svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y), \"M \".concat(start.x, \" \").concat(start.y), svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y)].join(' ');\n  }\n\n  var largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  return [\"M \".concat(start.x, \" \").concat(start.y), svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y)].join(' ');\n};\n\nvar arcTransitionModes = ['startAngle', 'middleAngle', 'endAngle', 'innerRadius', 'centerRadius', 'outerRadius', 'pushIn', 'pushOut'];\nvar arcTransitionModeById = {\n  startAngle: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        endAngle: arc.startAngle\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        startAngle: arc.endAngle\n      });\n    }\n  },\n  middleAngle: {\n    enter: function enter(arc) {\n      var middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2;\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        startAngle: middleAngle,\n        endAngle: middleAngle\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      var middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2;\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        startAngle: middleAngle,\n        endAngle: middleAngle\n      });\n    }\n  },\n  endAngle: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        startAngle: arc.endAngle\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        endAngle: arc.startAngle\n      });\n    }\n  },\n  innerRadius: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        outerRadius: arc.innerRadius\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.outerRadius\n      });\n    }\n  },\n  centerRadius: {\n    enter: function enter(arc) {\n      var centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2;\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: centerRadius,\n        outerRadius: centerRadius\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      var centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2;\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: centerRadius,\n        outerRadius: centerRadius\n      });\n    }\n  },\n  outerRadius: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.outerRadius\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        outerRadius: arc.innerRadius\n      });\n    }\n  },\n  pushIn: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n        outerRadius: arc.innerRadius\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.outerRadius,\n        outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius\n      });\n    }\n  },\n  pushOut: {\n    enter: function enter(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.outerRadius,\n        outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius\n      });\n    },\n    update: function update(arc) {\n      return arc;\n    },\n    leave: function leave(arc) {\n      return _objectSpread2(_objectSpread2({}, arc), {}, {\n        innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n        outerRadius: arc.innerRadius\n      });\n    }\n  }\n};\n\nvar useArcTransitionMode = function useArcTransitionMode(mode, extraTransition) {\n  return useMemo(function () {\n    var transitionMode = arcTransitionModeById[mode];\n    return {\n      enter: function enter(datum) {\n        return _objectSpread2(_objectSpread2({\n          progress: 0\n        }, transitionMode.enter(datum.arc)), extraTransition ? extraTransition.enter(datum) : {});\n      },\n      update: function update(datum) {\n        return _objectSpread2(_objectSpread2({\n          progress: 1\n        }, transitionMode.update(datum.arc)), extraTransition ? extraTransition.update(datum) : {});\n      },\n      leave: function leave(datum) {\n        return _objectSpread2(_objectSpread2({\n          progress: 0\n        }, transitionMode.leave(datum.arc)), extraTransition ? extraTransition.leave(datum) : {});\n      }\n    };\n  }, [mode, extraTransition]);\n};\n\nvar computeArcCenter = function computeArcCenter(arc, offset) {\n  var angle = midAngle(arc) - Math.PI / 2;\n  var radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset;\n  return positionFromAngle(angle, radius);\n};\n\nvar interpolateArcCenter = function interpolateArcCenter(offset) {\n  return function (startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue) {\n    return to([startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue], function (startAngle, endAngle, innerRadius, outerRadius) {\n      var centroid = computeArcCenter({\n        startAngle: startAngle,\n        endAngle: endAngle,\n        innerRadius: innerRadius,\n        outerRadius: outerRadius\n      }, offset);\n      return \"translate(\".concat(centroid.x, \",\").concat(centroid.y, \")\");\n    });\n  };\n};\n\nvar useArcCentersTransition = function useArcCentersTransition(data) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'innerRadius';\n  var extra = arguments.length > 3 ? arguments[3] : undefined;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var phases = useArcTransitionMode(mode, extra);\n  var transition = useTransition(data, {\n    keys: function keys(datum) {\n      return datum.id;\n    },\n    initial: phases.update,\n    from: phases.enter,\n    enter: phases.update,\n    update: phases.update,\n    leave: phases.leave,\n    config: springConfig,\n    immediate: !animate\n  });\n  return {\n    transition: transition,\n    interpolate: interpolateArcCenter(offset)\n  };\n};\n\nvar useArcCenters = function useArcCenters(_ref) {\n  var data = _ref.data,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0.5 : _ref$offset,\n      _ref$skipAngle = _ref.skipAngle,\n      skipAngle = _ref$skipAngle === void 0 ? 0 : _ref$skipAngle,\n      _ref$computeExtraProp = _ref.computeExtraProps,\n      computeExtraProps = _ref$computeExtraProp === void 0 ? function () {\n    return {};\n  } : _ref$computeExtraProp;\n  return useMemo(function () {\n    return filterDataBySkipAngle(data, skipAngle).map(function (datum) {\n      var position = computeArcCenter(datum.arc, offset);\n      return _objectSpread2(_objectSpread2({}, computeExtraProps(datum)), {}, {\n        x: position.x,\n        y: position.y,\n        data: datum\n      });\n    });\n  }, [data, offset, skipAngle, computeExtraProps]);\n};\n\nvar staticStyle = {\n  pointerEvents: 'none'\n};\n\nvar ArcLabel = function ArcLabel(_ref) {\n  var label = _ref.label,\n      style = _ref.style;\n  var theme = useTheme();\n  return jsx(animated.g, {\n    transform: style.transform,\n    opacity: style.progress,\n    style: staticStyle,\n    children: jsx(animated.text, {\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      style: _objectSpread2(_objectSpread2({}, theme.labels.text), {}, {\n        fill: style.textColor\n      }),\n      children: label\n    })\n  });\n};\n\nvar ArcLabelsLayer = function ArcLabelsLayer(_ref) {\n  var center = _ref.center,\n      data = _ref.data,\n      transitionMode = _ref.transitionMode,\n      labelAccessor = _ref.label,\n      radiusOffset = _ref.radiusOffset,\n      skipAngle = _ref.skipAngle,\n      textColor = _ref.textColor,\n      _ref$component = _ref.component,\n      component = _ref$component === void 0 ? ArcLabel : _ref$component;\n  var getLabel = usePropertyAccessor(labelAccessor);\n  var theme = useTheme();\n  var getTextColor = useInheritedColor(textColor, theme);\n  var filteredData = useMemo(function () {\n    return data.filter(function (datum) {\n      return Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle;\n    });\n  }, [data, skipAngle]);\n\n  var _useArcCentersTransit = useArcCentersTransition(filteredData, radiusOffset, transitionMode),\n      transition = _useArcCentersTransit.transition,\n      interpolate = _useArcCentersTransit.interpolate;\n\n  var Label = component;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(center[0], \",\").concat(center[1], \")\"),\n    children: transition(function (transitionProps, datum) {\n      return createElement(Label, {\n        key: datum.id,\n        datum: datum,\n        label: getLabel(datum),\n        style: _objectSpread2(_objectSpread2({}, transitionProps), {}, {\n          transform: interpolate(transitionProps.startAngle, transitionProps.endAngle, transitionProps.innerRadius, transitionProps.outerRadius),\n          textColor: getTextColor(datum)\n        })\n      });\n    })\n  });\n};\n\nvar drawCanvasArcLabels = function drawCanvasArcLabels(ctx, labels, theme) {\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.font = \"\".concat(theme.labels.text.fontSize, \"px \").concat(theme.labels.text.fontFamily);\n  labels.forEach(function (label) {\n    ctx.fillStyle = label.textColor;\n    ctx.fillText(\"\".concat(label.label), label.x, label.y);\n  });\n};\n\nvar useArcLabels = function useArcLabels(_ref) {\n  var data = _ref.data,\n      offset = _ref.offset,\n      skipAngle = _ref.skipAngle,\n      label = _ref.label,\n      textColor = _ref.textColor;\n  var getLabel = usePropertyAccessor(label);\n  var theme = useTheme();\n  var getTextColor = useInheritedColor(textColor, theme);\n  var computeExtraProps = useCallback(function (datum) {\n    return {\n      label: getLabel(datum),\n      textColor: getTextColor(datum)\n    };\n  }, [getLabel, getTextColor]);\n  return useArcCenters({\n    data: data,\n    offset: offset,\n    skipAngle: skipAngle,\n    computeExtraProps: computeExtraProps\n  });\n};\n\nvar computeArcLinkTextAnchor = function computeArcLinkTextAnchor(arc) {\n  var centerAngle = getNormalizedAngle(arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2);\n\n  if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n    return 'start';\n  }\n\n  return 'end';\n};\n\nvar computeArcLink = function computeArcLink(arc, offset, diagonalLength, straightLength) {\n  var centerAngle = getNormalizedAngle(arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2);\n  var point0 = positionFromAngle(centerAngle, arc.outerRadius + offset);\n  var point1 = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength);\n  var side;\n  var point2;\n\n  if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n    side = 'after';\n    point2 = {\n      x: point1.x + straightLength,\n      y: point1.y\n    };\n  } else {\n    side = 'before';\n    point2 = {\n      x: point1.x - straightLength,\n      y: point1.y\n    };\n  }\n\n  return {\n    side: side,\n    points: [point0, point1, point2]\n  };\n};\n\nvar lineGenerator = line().x(function (d) {\n  return d.x;\n}).y(function (d) {\n  return d.y;\n});\n\nvar useTransitionPhases = function useTransitionPhases(_ref) {\n  var offset = _ref.offset,\n      diagonalLength = _ref.diagonalLength,\n      straightLength = _ref.straightLength,\n      textOffset = _ref.textOffset,\n      getLinkColor = _ref.getLinkColor,\n      getTextColor = _ref.getTextColor;\n  return useMemo(function () {\n    return {\n      enter: function enter(datum) {\n        return {\n          startAngle: datum.arc.startAngle,\n          endAngle: datum.arc.endAngle,\n          innerRadius: datum.arc.innerRadius,\n          outerRadius: datum.arc.outerRadius,\n          offset: offset,\n          diagonalLength: 0,\n          straightLength: 0,\n          textOffset: textOffset,\n          linkColor: getLinkColor(datum),\n          textColor: getTextColor(datum),\n          opacity: 0\n        };\n      },\n      update: function update(d) {\n        return {\n          startAngle: d.arc.startAngle,\n          endAngle: d.arc.endAngle,\n          innerRadius: d.arc.innerRadius,\n          outerRadius: d.arc.outerRadius,\n          offset: offset,\n          diagonalLength: diagonalLength,\n          straightLength: straightLength,\n          textOffset: textOffset,\n          linkColor: getLinkColor(d),\n          textColor: getTextColor(d),\n          opacity: 1\n        };\n      },\n      leave: function leave(d) {\n        return {\n          startAngle: d.arc.startAngle,\n          endAngle: d.arc.endAngle,\n          innerRadius: d.arc.innerRadius,\n          outerRadius: d.arc.outerRadius,\n          offset: offset,\n          diagonalLength: 0,\n          straightLength: 0,\n          textOffset: textOffset,\n          linkColor: getLinkColor(d),\n          textColor: getTextColor(d),\n          opacity: 0\n        };\n      }\n    };\n  }, [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]);\n};\n\nvar interpolateLink = function interpolateLink(startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue, offsetValue, diagonalLengthValue, straightLengthValue) {\n  return to([startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue, offsetValue, diagonalLengthValue, straightLengthValue], function (startAngle, endAngle, innerRadius, outerRadius, offset, diagonalLengthAnimated, straightLengthAnimated) {\n    var _computeArcLink = computeArcLink({\n      startAngle: startAngle,\n      endAngle: endAngle,\n      innerRadius: innerRadius,\n      outerRadius: outerRadius\n    }, offset, diagonalLengthAnimated, straightLengthAnimated),\n        points = _computeArcLink.points;\n\n    return lineGenerator(points);\n  });\n};\n\nvar interpolateTextAnchor = function interpolateTextAnchor(startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue) {\n  return to([startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue], function (startAngle, endAngle, innerRadius, outerRadius) {\n    return computeArcLinkTextAnchor({\n      startAngle: startAngle,\n      endAngle: endAngle,\n      innerRadius: innerRadius,\n      outerRadius: outerRadius\n    });\n  });\n};\n\nvar interpolateTextPosition = function interpolateTextPosition(startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue, offsetValue, diagonalLengthValue, straightLengthValue, textOffsetValue) {\n  return to([startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue, offsetValue, diagonalLengthValue, straightLengthValue, textOffsetValue], function (startAngle, endAngle, innerRadius, outerRadius, offset, diagonalLengthAnimated, straightLengthAnimated, textOffset) {\n    var _computeArcLink2 = computeArcLink({\n      startAngle: startAngle,\n      endAngle: endAngle,\n      innerRadius: innerRadius,\n      outerRadius: outerRadius\n    }, offset, diagonalLengthAnimated, straightLengthAnimated),\n        points = _computeArcLink2.points,\n        side = _computeArcLink2.side;\n\n    var position = points[2];\n\n    if (side === 'before') {\n      position.x -= textOffset;\n    } else {\n      position.x += textOffset;\n    }\n\n    return \"translate(\".concat(position.x, \",\").concat(position.y, \")\");\n  });\n};\n\nvar useArcLinkLabelsTransition = function useArcLinkLabelsTransition(_ref2) {\n  var data = _ref2.data,\n      _ref2$offset = _ref2.offset,\n      offset = _ref2$offset === void 0 ? 0 : _ref2$offset,\n      diagonalLength = _ref2.diagonalLength,\n      straightLength = _ref2.straightLength,\n      _ref2$skipAngle = _ref2.skipAngle,\n      skipAngle = _ref2$skipAngle === void 0 ? 0 : _ref2$skipAngle,\n      textOffset = _ref2.textOffset,\n      linkColor = _ref2.linkColor,\n      textColor = _ref2.textColor;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var theme = useTheme();\n  var getLinkColor = useInheritedColor(linkColor, theme);\n  var getTextColor = useInheritedColor(textColor, theme);\n  var filteredData = useFilteredDataBySkipAngle(data, skipAngle);\n  var transitionPhases = useTransitionPhases({\n    offset: offset,\n    diagonalLength: diagonalLength,\n    straightLength: straightLength,\n    textOffset: textOffset,\n    getLinkColor: getLinkColor,\n    getTextColor: getTextColor\n  });\n  var transition = useTransition(filteredData, {\n    keys: function keys(datum) {\n      return datum.id;\n    },\n    initial: transitionPhases.update,\n    from: transitionPhases.enter,\n    enter: transitionPhases.update,\n    update: transitionPhases.update,\n    leave: transitionPhases.leave,\n    config: springConfig,\n    immediate: !animate\n  });\n  return {\n    transition: transition,\n    interpolateLink: interpolateLink,\n    interpolateTextAnchor: interpolateTextAnchor,\n    interpolateTextPosition: interpolateTextPosition\n  };\n};\n\nvar ArcLinkLabel = function ArcLinkLabel(_ref) {\n  var label = _ref.label,\n      style = _ref.style;\n  var theme = useTheme();\n  return jsxs(animated.g, {\n    opacity: style.opacity,\n    children: [jsx(animated.path, {\n      fill: \"none\",\n      stroke: style.linkColor,\n      strokeWidth: style.thickness,\n      d: style.path\n    }), jsx(animated.text, {\n      transform: style.textPosition,\n      textAnchor: style.textAnchor,\n      dominantBaseline: \"central\",\n      style: _objectSpread2(_objectSpread2({}, theme.labels.text), {}, {\n        fill: style.textColor\n      }),\n      children: label\n    })]\n  });\n};\n\nvar ArcLinkLabelsLayer = function ArcLinkLabelsLayer(_ref) {\n  var center = _ref.center,\n      data = _ref.data,\n      labelAccessor = _ref.label,\n      skipAngle = _ref.skipAngle,\n      offset = _ref.offset,\n      diagonalLength = _ref.diagonalLength,\n      straightLength = _ref.straightLength,\n      strokeWidth = _ref.strokeWidth,\n      textOffset = _ref.textOffset,\n      textColor = _ref.textColor,\n      linkColor = _ref.linkColor,\n      _ref$component = _ref.component,\n      component = _ref$component === void 0 ? ArcLinkLabel : _ref$component;\n  var getLabel = usePropertyAccessor(labelAccessor);\n\n  var _useArcLinkLabelsTran = useArcLinkLabelsTransition({\n    data: data,\n    skipAngle: skipAngle,\n    offset: offset,\n    diagonalLength: diagonalLength,\n    straightLength: straightLength,\n    textOffset: textOffset,\n    linkColor: linkColor,\n    textColor: textColor\n  }),\n      transition = _useArcLinkLabelsTran.transition,\n      interpolateLink = _useArcLinkLabelsTran.interpolateLink,\n      interpolateTextAnchor = _useArcLinkLabelsTran.interpolateTextAnchor,\n      interpolateTextPosition = _useArcLinkLabelsTran.interpolateTextPosition;\n\n  var Label = component;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(center[0], \",\").concat(center[1], \")\"),\n    children: transition(function (transitionProps, datum) {\n      return createElement(Label, {\n        key: datum.id,\n        datum: datum,\n        label: getLabel(datum),\n        style: _objectSpread2(_objectSpread2({}, transitionProps), {}, {\n          thickness: strokeWidth,\n          path: interpolateLink(transitionProps.startAngle, transitionProps.endAngle, transitionProps.innerRadius, transitionProps.outerRadius, transitionProps.offset, transitionProps.diagonalLength, transitionProps.straightLength),\n          textAnchor: interpolateTextAnchor(transitionProps.startAngle, transitionProps.endAngle, transitionProps.innerRadius, transitionProps.outerRadius),\n          textPosition: interpolateTextPosition(transitionProps.startAngle, transitionProps.endAngle, transitionProps.innerRadius, transitionProps.outerRadius, transitionProps.offset, transitionProps.diagonalLength, transitionProps.straightLength, transitionProps.textOffset)\n        })\n      });\n    })\n  });\n};\n\nvar drawCanvasArcLinkLabels = function drawCanvasArcLinkLabels(ctx, labels, theme, strokeWidth) {\n  ctx.textBaseline = 'middle';\n  ctx.font = \"\".concat(theme.labels.text.fontSize, \"px \").concat(theme.labels.text.fontFamily);\n  labels.forEach(function (label) {\n    ctx.fillStyle = label.textColor;\n    ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor];\n    ctx.fillText(\"\".concat(label.label), label.x, label.y);\n    ctx.beginPath();\n    ctx.strokeStyle = label.linkColor;\n    ctx.lineWidth = strokeWidth;\n    label.points.forEach(function (point, index) {\n      if (index === 0) ctx.moveTo(point.x, point.y);else ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n  });\n};\n\nvar useArcLinks = function useArcLinks(_ref) {\n  var data = _ref.data,\n      _ref$skipAngle = _ref.skipAngle,\n      skipAngle = _ref$skipAngle === void 0 ? 0 : _ref$skipAngle,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0.5 : _ref$offset,\n      diagonalLength = _ref.diagonalLength,\n      straightLength = _ref.straightLength,\n      _ref$computeExtraProp = _ref.computeExtraProps,\n      computeExtraProps = _ref$computeExtraProp === void 0 ? function () {\n    return {};\n  } : _ref$computeExtraProp;\n  var links = useMemo(function () {\n    return data.filter(function (datum) {\n      return Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle;\n    }).map(function (datum) {\n      return _objectSpread2(_objectSpread2({}, computeArcLink(datum.arc, offset, diagonalLength, straightLength)), {}, {\n        data: datum\n      });\n    });\n  }, [data, skipAngle, offset, diagonalLength, straightLength]);\n  return useMemo(function () {\n    return links.map(function (link) {\n      return _objectSpread2(_objectSpread2({}, computeExtraProps(link)), link);\n    });\n  }, [links, computeExtraProps]);\n};\n\nvar useArcLinkLabels = function useArcLinkLabels(_ref) {\n  var data = _ref.data,\n      skipAngle = _ref.skipAngle,\n      offset = _ref.offset,\n      diagonalLength = _ref.diagonalLength,\n      straightLength = _ref.straightLength,\n      _ref$textOffset = _ref.textOffset,\n      textOffset = _ref$textOffset === void 0 ? 0 : _ref$textOffset,\n      label = _ref.label,\n      linkColor = _ref.linkColor,\n      textColor = _ref.textColor;\n  var getLabel = usePropertyAccessor(label);\n  var theme = useTheme();\n  var getLinkColor = useInheritedColor(linkColor, theme);\n  var getTextColor = useInheritedColor(textColor, theme);\n  var computeExtraProps = useCallback(function (link) {\n    var position = {\n      x: link.points[2].x,\n      y: link.points[2].y\n    };\n    var textAnchor;\n\n    if (link.side === 'before') {\n      position.x -= textOffset;\n      textAnchor = 'end';\n    } else {\n      position.x += textOffset;\n      textAnchor = 'start';\n    }\n\n    return _objectSpread2(_objectSpread2({}, position), {}, {\n      label: getLabel(link.data),\n      linkColor: getLinkColor(link.data),\n      textAnchor: textAnchor,\n      textColor: getTextColor(link.data)\n    });\n  }, [getLabel, getLinkColor, getTextColor, textOffset]);\n  return useArcLinks({\n    data: data,\n    skipAngle: skipAngle,\n    offset: offset,\n    diagonalLength: diagonalLength,\n    straightLength: straightLength,\n    computeExtraProps: computeExtraProps\n  });\n};\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar ArcLine = function ArcLine(_ref) {\n  var animatedProps = _ref.animated,\n      rest = _objectWithoutProperties(_ref, [\"animated\"]);\n\n  return jsx(animated.path, _objectSpread2({\n    d: to([animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle], function (radius, start, end) {\n      return generateSvgArc(radius, start, end);\n    })\n  }, rest));\n};\n\nvar ArcShape = function ArcShape(_ref) {\n  var datum = _ref.datum,\n      style = _ref.style,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave;\n  var handleClick = useCallback(function (event) {\n    return onClick === null || onClick === void 0 ? void 0 : onClick(datum, event);\n  }, [onClick, datum]);\n  var handleMouseEnter = useCallback(function (event) {\n    return onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(datum, event);\n  }, [onMouseEnter, datum]);\n  var handleMouseMove = useCallback(function (event) {\n    return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(datum, event);\n  }, [onMouseMove, datum]);\n  var handleMouseLeave = useCallback(function (event) {\n    return onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(datum, event);\n  }, [onMouseLeave, datum]);\n  return jsx(animated.path, {\n    d: style.path,\n    opacity: style.opacity,\n    fill: datum.fill || style.color,\n    stroke: style.borderColor,\n    strokeWidth: style.borderWidth,\n    onClick: onClick ? handleClick : undefined,\n    onMouseEnter: onMouseEnter ? handleMouseEnter : undefined,\n    onMouseMove: onMouseMove ? handleMouseMove : undefined,\n    onMouseLeave: onMouseLeave ? handleMouseLeave : undefined\n  });\n};\n\nvar interpolateArc = function interpolateArc(startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue, arcGenerator) {\n  return to([startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue], function (startAngle, endAngle, innerRadius, outerRadius) {\n    return arcGenerator({\n      startAngle: startAngle,\n      endAngle: endAngle,\n      innerRadius: Math.max(0, innerRadius),\n      outerRadius: Math.max(0, outerRadius)\n    });\n  });\n};\n\nvar useArcsTransition = function useArcsTransition(data) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'innerRadius';\n  var extra = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var phases = useArcTransitionMode(mode, extra);\n  var transition = useTransition(data, {\n    keys: function keys(datum) {\n      return datum.id;\n    },\n    initial: phases.update,\n    from: phases.enter,\n    enter: phases.update,\n    update: phases.update,\n    leave: phases.leave,\n    config: springConfig,\n    immediate: !animate\n  });\n  return {\n    transition: transition,\n    interpolate: interpolateArc\n  };\n};\n\nvar ArcsLayer = function ArcsLayer(_ref) {\n  var center = _ref.center,\n      data = _ref.data,\n      arcGenerator = _ref.arcGenerator,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      transitionMode = _ref.transitionMode,\n      _ref$component = _ref.component,\n      component = _ref$component === void 0 ? ArcShape : _ref$component;\n  var theme = useTheme();\n  var getBorderColor = useInheritedColor(borderColor, theme);\n\n  var _useArcsTransition = useArcsTransition(data, transitionMode, {\n    enter: function enter(datum) {\n      return {\n        opacity: 0,\n        color: datum.color,\n        borderColor: getBorderColor(datum)\n      };\n    },\n    update: function update(datum) {\n      return {\n        opacity: 1,\n        color: datum.color,\n        borderColor: getBorderColor(datum)\n      };\n    },\n    leave: function leave(datum) {\n      return {\n        opacity: 0,\n        color: datum.color,\n        borderColor: getBorderColor(datum)\n      };\n    }\n  }),\n      transition = _useArcsTransition.transition,\n      interpolate = _useArcsTransition.interpolate;\n\n  var Arc = component;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(center[0], \",\").concat(center[1], \")\"),\n    children: transition(function (transitionProps, datum) {\n      return createElement(Arc, {\n        key: datum.id,\n        datum: datum,\n        style: _objectSpread2(_objectSpread2({}, transitionProps), {}, {\n          borderWidth: borderWidth,\n          path: interpolate(transitionProps.startAngle, transitionProps.endAngle, transitionProps.innerRadius, transitionProps.outerRadius, arcGenerator)\n        }),\n        onClick: onClick,\n        onMouseEnter: onMouseEnter,\n        onMouseMove: onMouseMove,\n        onMouseLeave: onMouseLeave\n      });\n    })\n  });\n};\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar computeArcBoundingBox = function computeArcBoundingBox(centerX, centerY, radius, startAngle, endAngle) {\n  var includeCenter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  var points = [];\n  var p0 = positionFromAngle(degreesToRadians(startAngle), radius);\n  points.push([p0.x, p0.y]);\n  var p1 = positionFromAngle(degreesToRadians(endAngle), radius);\n  points.push([p1.x, p1.y]);\n\n  for (var angle = Math.round(Math.min(startAngle, endAngle)); angle <= Math.round(Math.max(startAngle, endAngle)); angle++) {\n    if (angle % 90 === 0) {\n      var p = positionFromAngle(degreesToRadians(angle), radius);\n      points.push([p.x, p.y]);\n    }\n  }\n\n  points = points.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return [centerX + x, centerY + y];\n  });\n\n  if (includeCenter) {\n    points.push([centerX, centerY]);\n  }\n\n  var xs = points.map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        x = _ref4[0];\n\n    return x;\n  });\n  var ys = points.map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        y = _ref6[1];\n\n    return y;\n  });\n  var x0 = Math.min.apply(Math, _toConsumableArray(xs));\n  var x1 = Math.max.apply(Math, _toConsumableArray(xs));\n  var y0 = Math.min.apply(Math, _toConsumableArray(ys));\n  var y1 = Math.max.apply(Math, _toConsumableArray(ys));\n  return {\n    points: points,\n    x: x0,\n    y: y0,\n    width: x1 - x0,\n    height: y1 - y0\n  };\n};\n\nvar isCursorInRing = function isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY) {\n  var distance = getDistance(cursorX, cursorY, centerX, centerY);\n  return distance < radius && distance > innerRadius;\n};\n\nvar findArcUnderCursor = function findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs, cursorX, cursorY) {\n  if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n    return undefined;\n  }\n\n  var cursorAngle = getAngle(cursorX, cursorY, centerX, centerY);\n  return arcs.find(function (_ref) {\n    var startAngle = _ref.startAngle,\n        endAngle = _ref.endAngle;\n    return cursorAngle >= startAngle && cursorAngle < endAngle;\n  });\n};\n\nvar useAnimatedArc = function useAnimatedArc(datumWithArc, arcGenerator) {\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedValues = useSpring({\n    startAngle: datumWithArc.arc.startAngle,\n    endAngle: datumWithArc.arc.endAngle,\n    innerRadius: datumWithArc.arc.innerRadius,\n    outerRadius: datumWithArc.arc.outerRadius,\n    config: springConfig,\n    immediate: !animate\n  });\n  return _objectSpread2(_objectSpread2({}, animatedValues), {}, {\n    path: interpolateArc(animatedValues.startAngle, animatedValues.endAngle, animatedValues.innerRadius, animatedValues.outerRadius, arcGenerator)\n  });\n};\n\nvar useArcGenerator = function useArcGenerator() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$cornerRadius = _ref.cornerRadius,\n      cornerRadius = _ref$cornerRadius === void 0 ? 0 : _ref$cornerRadius,\n      _ref$padAngle = _ref.padAngle,\n      padAngle = _ref$padAngle === void 0 ? 0 : _ref$padAngle;\n\n  return useMemo(function () {\n    return arc().innerRadius(function (arc) {\n      return arc.innerRadius;\n    }).outerRadius(function (arc) {\n      return arc.outerRadius;\n    }).cornerRadius(cornerRadius).padAngle(padAngle);\n  }, [cornerRadius, padAngle]);\n};\n\nexport { ArcLabelsLayer, ArcLine, ArcLinkLabelsLayer, ArcShape, ArcsLayer, arcTransitionModeById, arcTransitionModes, computeArcBoundingBox, computeArcCenter, computeArcLink, computeArcLinkTextAnchor, drawCanvasArcLabels, drawCanvasArcLinkLabels, findArcUnderCursor, interpolateArc, interpolateArcCenter, isCursorInRing, useAnimatedArc, useArcCenters, useArcCentersTransition, useArcGenerator, useArcLabels, useArcLinkLabels, useArcLinkLabelsTransition, useArcLinks, useArcTransitionMode, useArcsTransition };","map":null,"metadata":{},"sourceType":"module"}