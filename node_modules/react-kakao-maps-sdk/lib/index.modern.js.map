{"version":3,"file":"index.modern.js","sources":["../src/hooks/useKakaoEvent.tsx","../src/components/Map.tsx","../src/hooks/useMap.tsx","../src/components/InfoWindow.tsx","../src/components/MarkerClusterer.tsx","../src/components/Marker.tsx","../src/components/MapMarker.tsx","../src/components/MapInfoWindow.tsx","../src/components/CustomOverlayMap.tsx","../src/components/MapTypeControl.tsx","../src/components/ZoomControl.tsx","../src/components/MapTypeId.tsx","../src/components/Circle.tsx","../src/components/Polyline.tsx","../src/components/Polygon.tsx","../src/components/Rectangle.tsx","../src/components/Ellipse.tsx","../src/components/AbstractOverlay.tsx","../src/components/Roadview.tsx","../src/hooks/useRoadview.tsx","../src/components/CustomOverlayRoadview.tsx","../src/components/RoadviewMarker.tsx","../src/components/RoadviewInfoWindow.tsx"],"sourcesContent":["import { useEffect } from \"react\"\n\nconst useKakaoEvent = <T extends kakao.maps.event.EventTarget>(\n  /**\n   * 이벤트 타겟\n   */\n  target: T | undefined,\n  /**\n   * event 타입\n   */\n  type: string,\n  /**\n   * 호출될 callback\n   */\n  callback: ((target: T, ...args: any[]) => void) | undefined\n) => {\n  useEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    kakao.maps.event.addListener(target, type, wrapCallback)\n\n    return () => {\n      kakao.maps.event.removeListener(target, type, wrapCallback)\n    }\n  }, [target, type, callback])\n}\n\nexport default useKakaoEvent\n","import React, { useEffect, useRef, useState } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\n\nexport const KakaoMapContext = React.createContext<kakao.maps.Map>(\n  undefined as unknown as kakao.maps.Map\n)\nexport interface MapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   *\n   * @default  \"kakao-map-container\"\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  /**\n   * 중심을 이동시킬때 Panto를 사용할지 정합니다.\n   * @default false\n   */\n  isPanto?: boolean\n\n  /**\n   * 중심 좌표를 지정한 좌표 또는 영역으로 부드럽게 이동한다. 필요하면 확대 또는 축소도 수행한다.\n   * 만약 이동할 거리가 지도 화면의 크기보다 클 경우 애니메이션 없이 이동한다.\n   * padding 만큼 제외하고 영역을 계산하며, padding 을 지정하지 않으면 기본값으로 32가 사용된다.\n   */\n  padding?: number\n\n  /**\n   * 확대 수준 (기본값: 3)\n   */\n  level?: number\n\n  /**\n   * 최대 확대 수준\n   */\n  maxLevel?: number\n\n  /**\n   * 최소 확대 수준\n   */\n  minLevel?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 마우스 드래그, 휠, 모바일 터치를 이용한 시점 변경(이동, 확대, 축소) 가능 여부\n   */\n  draggable?: boolean\n\n  /**\n   * 마우스 휠이나 멀티터치로 지도 확대, 축소 기능을 막습니다. 상황에 따라 지도 확대, 축소 기능을 제어할 수 있습니다.\n   */\n  zoomable?: boolean\n\n  /**\n   * 마우스 휠, 모바일 터치를 이용한 확대 및 축소 가능 여부\n   */\n  scrollwheel?: boolean\n\n  /**\n   * 더블클릭 이벤트 및 더블클릭 확대 가능 여부\n   */\n  disableDoubleClick?: boolean\n\n  /**\n   * 더블클릭 확대 가능 여부\n   */\n  disableDoubleClickZoom?: boolean\n\n  /**\n   * 투영법 지정 (기본값: kakao.maps.ProjectionId.WCONG)\n   */\n  projectionId?: string\n\n  /**\n   * 지도 타일 애니메이션 설정 여부 (기본값: true)\n   */\n  tileAnimation?: boolean\n\n  /**\n   * 키보드의 방향키와 +, – 키로 지도 이동,확대,축소 가능 여부 (기본값: false)\n   */\n  keyboardShortcuts?:\n    | boolean\n    | {\n        /**\n         * 지도 이동 속도\n         */\n        speed: number\n      }\n\n  /**\n   * map 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (map: kakao.maps.Map) => void\n\n  /**\n   * 중심 좌표가 변경되면 발생한다.\n   */\n  onCenterChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되기 직전 발생한다.\n   */\n  onZoomStart?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되면 발생한다.\n   */\n  onZoomChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 영역이 변경되면 발생한다.\n   */\n  onBoundsChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도를 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 더블클릭하면 발생한다.\n   */\n  onDoubleClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 마우스 오른쪽 버튼으로 클릭하면 발생한다.\n   */\n  onRightClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도에서 마우스 커서를 이동하면 발생한다.\n   */\n  onMouseMove?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 시작할 때 발생한다.\n   */\n  onDragStart?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 하는 동안 발생한다.\n   */\n  onDrag?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그가 끝날 때 발생한다.\n   */\n  onDragEnd?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 중심 좌표나 확대 수준이 변경되면 발생한다.\n   * 단, 애니메이션 도중에는 발생하지 않는다.\n   */\n  onIdle?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대수준이 변경되거나 지도가 이동했을때 타일 이미지 로드가 모두 완료되면 발생한다.\n   * 지도이동이 미세하기 일어나 타일 이미지 로드가 일어나지 않은경우 발생하지 않는다.\n   */\n  onTileLoaded?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 기본 타일(일반지도, 스카이뷰, 하이브리드)이 변경되면 발생한다.\n   */\n  onMaptypeidChanged?: (target: kakao.maps.Map) => void\n}\n\n/**\n * 기본적인 Map 객체를 생성하는 Comeponent 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `map` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Map: React.FC<MapProps> = ({\n  id = \"kakao-map-container\",\n  style,\n  children,\n  center,\n  isPanto = false,\n  padding = 32,\n  className,\n  disableDoubleClick,\n  disableDoubleClickZoom,\n  draggable,\n  zoomable,\n  keyboardShortcuts,\n  level,\n  maxLevel,\n  minLevel,\n  mapTypeId,\n  projectionId,\n  scrollwheel,\n  tileAnimation,\n  onCreate,\n  onBoundsChanged,\n  onCenterChanged,\n  onClick,\n  onDoubleClick,\n  onDrag,\n  onDragEnd,\n  onDragStart,\n  onIdle,\n  onMaptypeidChanged,\n  onMouseMove,\n  onRightClick,\n  onTileLoaded,\n  onZoomChanged,\n  onZoomStart,\n}) => {\n  const [map, setMap] = useState<kakao.maps.Map>()\n\n  const container = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!window.kakao) {\n      console.warn(\n        \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n      )\n      return\n    }\n    if (!container.current) {\n      return\n    }\n\n    kakao.maps.load(() => {\n      const initalMapCenter =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n      const kakaoMap = new kakao.maps.Map(container.current as HTMLDivElement, {\n        center: initalMapCenter,\n        disableDoubleClick: disableDoubleClick,\n        disableDoubleClickZoom: disableDoubleClickZoom,\n        draggable: draggable,\n        keyboardShortcuts: keyboardShortcuts,\n        level: level,\n        mapTypeId: mapTypeId,\n        projectionId: projectionId,\n        scrollwheel: scrollwheel,\n        tileAnimation: tileAnimation,\n      })\n\n      setMap(kakaoMap)\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disableDoubleClick, disableDoubleClickZoom, mapTypeId, tileAnimation])\n\n  useEffect(() => {\n    if (!map || !onCreate) return\n    onCreate(map)\n  }, [map, onCreate])\n\n  // center position 변경시 map center 변경\n  useEffect(() => {\n    if (!map) return\n\n    let prevCenter = map.getCenter()\n    if (prevCenter instanceof kakao.maps.Coords) {\n      prevCenter = prevCenter.toLatLng()\n    }\n\n    const centerPosition =\n      \"lat\" in center\n        ? new kakao.maps.LatLng(center.lat, center.lng)\n        : new kakao.maps.Coords(center.x, center.y)\n\n    if (\n      (centerPosition instanceof kakao.maps.LatLng &&\n        centerPosition.equals(prevCenter)) ||\n      (centerPosition instanceof kakao.maps.Coords &&\n        centerPosition.toLatLng().equals(prevCenter))\n    ) {\n      return\n    }\n\n    if (isPanto) {\n      map.panTo(centerPosition, padding)\n    } else {\n      map.setCenter(centerPosition)\n    }\n    // @ts-ignore\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, center.lat, center.lng, center.x, center.y])\n\n  useEffect(() => {\n    if (!map || typeof draggable === \"undefined\") return\n    map.setDraggable(draggable)\n  }, [map, draggable])\n\n  useEffect(() => {\n    if (!map || typeof zoomable === \"undefined\") return\n    map.setZoomable(zoomable)\n  }, [map, zoomable])\n\n  useEffect(() => {\n    if (!map || !keyboardShortcuts || typeof keyboardShortcuts !== \"boolean\")\n      return\n    map.setKeyboardShortcuts(keyboardShortcuts)\n  }, [map, keyboardShortcuts])\n\n  useEffect(() => {\n    if (!map || !level) return\n    map.setLevel(level)\n  }, [map, level])\n\n  useEffect(() => {\n    if (!map || !mapTypeId) return\n    map.setMapTypeId(mapTypeId)\n  }, [map, mapTypeId])\n\n  useEffect(() => {\n    if (!map || !projectionId) return\n    map.setProjectionId(projectionId)\n  }, [map, projectionId])\n\n  useEffect(() => {\n    if (!map || !maxLevel) return\n    map.setMaxLevel(maxLevel)\n  }, [map, maxLevel])\n\n  useEffect(() => {\n    if (!map || !minLevel) return\n    map.setMinLevel(minLevel)\n  }, [map, minLevel])\n\n  useKakaoEvent(map, \"bounds_changed\", onBoundsChanged)\n  useKakaoEvent(map, \"center_changed\", onCenterChanged)\n  useKakaoEvent(map, \"click\", onClick)\n  useKakaoEvent(map, \"dblclick\", onDoubleClick)\n  useKakaoEvent(map, \"drag\", onDrag)\n  useKakaoEvent(map, \"dragstart\", onDragStart)\n  useKakaoEvent(map, \"dragend\", onDragEnd)\n  useKakaoEvent(map, \"idle\", onIdle)\n  useKakaoEvent(map, \"maptypeid_changed\", onMaptypeidChanged)\n  useKakaoEvent(map, \"mousemove\", onMouseMove)\n  useKakaoEvent(map, \"rightclick\", onRightClick)\n  useKakaoEvent(map, \"tilesloaded\", onTileLoaded)\n  useKakaoEvent(map, \"zoom_changed\", onZoomChanged)\n  useKakaoEvent(map, \"zoom_start\", onZoomStart)\n\n  return (\n    <>\n      <div id={id} style={style} className={className} ref={container}></div>\n      {map && (\n        <KakaoMapContext.Provider value={map}>\n          {children}\n        </KakaoMapContext.Provider>\n      )}\n    </>\n  )\n}\n\nexport default Map\n","import { useContext } from \"react\"\nimport { KakaoMapContext } from \"../components/Map\"\n\n/**\n * kakao map 객체를 가져오는 hook 입니다.\n * Map 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useMap = (componentName?: string) => {\n  const kakaoMap = useContext(KakaoMapContext)\n  if (!kakaoMap) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useMap\"\n      } must exist inside Map Component!`\n    )\n  }\n\n  return kakaoMap\n}\n\nexport default useMap\n","import React, { useEffect, useMemo, useRef } from \"react\"\nimport ReactDom from \"react-dom\"\n\ninterface InfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n  marker?: kakao.maps.Marker\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부\n   * @default false\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\nconst InfoWindow: React.FC<InfoWindowProps> = ({\n  id,\n  className,\n  style,\n  map,\n  position,\n  marker,\n  children,\n  altitude,\n  disableAutoPan,\n  range,\n  removable,\n  zIndex,\n  onCreate,\n}) => {\n  const container = useRef(document.createElement(\"div\"))\n\n  const infoWindow = useMemo(() => {\n    const kakaoInfoWindow = new kakao.maps.InfoWindow({\n      altitude: altitude,\n      disableAutoPan: disableAutoPan,\n      range: range,\n      removable: removable,\n      zIndex: zIndex,\n      content: container.current,\n      position: position,\n    })\n    container.current.style.whiteSpace = \"nowrap\"\n    return kakaoInfoWindow\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disableAutoPan, removable])\n\n  useEffect(() => {\n    infoWindow.open(map, marker)\n    return () => {\n      infoWindow.close()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, marker])\n\n  useEffect(() => {\n    if (onCreate) onCreate(infoWindow)\n  }, [infoWindow, onCreate])\n\n  useEffect(() => {\n    if (!infoWindow) return\n    infoWindow.setPosition(position)\n  }, [infoWindow, position])\n\n  useEffect(() => {\n    if (!infoWindow || !altitude) return\n    infoWindow.setAltitude(altitude)\n  }, [infoWindow, altitude])\n\n  useEffect(() => {\n    if (!infoWindow || !range) return\n    infoWindow.setRange(range)\n  }, [infoWindow, range])\n\n  useEffect(() => {\n    if (!infoWindow || !zIndex) return\n    infoWindow.setZIndex(zIndex)\n  }, [infoWindow, zIndex])\n\n  useEffect(() => {\n    if (id) container.current.id = id\n  }, [id])\n\n  useEffect(() => {\n    if (className) container.current.className = className\n  }, [className])\n\n  useEffect(() => {\n    if (style) {\n      for (const [key, value] of Object.entries(style)) {\n        container.current.style[key] = value\n      }\n    }\n  }, [style])\n\n  return ReactDom.createPortal(children, container.current)\n}\n\nexport default InfoWindow\n","import React, { useEffect, useState } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport const KakaoMapMarkerClustererContext =\n  React.createContext<kakao.maps.MarkerClusterer>(\n    undefined as unknown as kakao.maps.MarkerClusterer\n  )\n\nexport interface MarkerClustererProps {\n  /**\n   * 클러스터의 격자 크기. 화면 픽셀 단위이며 해당 격자 영역 안에 마커가 포함되면 클러스터에 포함시킨다\n   * @default 60\n   */\n  gridSize?: number\n  /**\n   * 마커들의 좌표 평균을 클러스터 좌표 설정 여부\n   * @default false\n   */\n  averageCenter?: boolean\n  /**\n   * 클러스터링 할 지도의 최소 레벨 값. 지정한 숫자에 해당하는 레벨 미만에서는 클러스터링 하지 않는다\n   * @default 0\n   */\n  minLevel?: number\n  /**\n   * 클러스터링 할 최소 마커 수\n   * @default 2\n   */\n  minClusterSize?: number\n  /**\n   * 클러스터의 스타일. 여러개를 선언하면 calculator 로 구분된 사이즈 구간마다 서로 다른 스타일을 적용시킬 수 있다\n   */\n  styles?: React.CSSProperties[] | object[]\n  /**\n   * 클러스터에 표시할 문자열 또는 문자열 생성 함수.\n   * @default \"클러스터에 포함된 숫자\"\n   */\n  texts?: string[] | ((size: number) => string)\n  /**\n   * 클러스터 크기를 구분하는 값을 가진 배열 또는 구분값 생성함수\n   * @default [10, 100, 1000, 10000]\n   */\n  calculator?: number[] | ((size: number) => number[])\n  /**\n   * 클러스터 클릭 시 지도 확대 여부. true로 설정하면 클러스터 클릭 시 확대 되지 않는다\n   * @default false\n   */\n  disableClickZoom?: boolean\n  /**\n   * 클러스터 클릭 가능 여부 지정 옵션. false일 경우 클러스터의 clusterclick, clusterdblclick, clusterrightclick 이벤트가 발생하지 않으며, 커서가 변경되지 않는다.\n   * @default true\n   */\n  clickable?: boolean\n  /**\n   * 클러스터에 마우스 over/out 가능 여부 지정 옵션. false일 경우 클러스터의 clusterover, clusterout 이벤트가 발생하지 않는다.\n   * @default true\n   */\n  hoverable?: boolean\n\n  /**\n   * 클러스터 마커를 클릭 했을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 Cluster 객체가 넘어온다.\n   * 클러스터 마커 클릭 시 지도가 줌인 되는 경우 원하는 Cluster 객체를 얻지 못할 수도 있다.\n   * 때문에 MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정하여\n   * 클러스터 마커를 클릭했을 때 지도가 줌인되지 않도록 설정 후 사용한다.\n   */\n  onClusterclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 오버 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 오버한 Cluster 객체가 넘어온다.\n   */\n  onClusterover?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 아웃 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 아웃된 Cluster 객체가 넘어온다.\n   */\n  onClusterout?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 더블클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 더블클릭한 Cluster 객체가 넘어온다.\n   * MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정해야만 이벤트가 발생한다.\n   */\n  onClusterdblclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 오른쪽 클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 오른쪽 클릭한 Cluster 객체가 넘어온다.\n   */\n  onClusterrightclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터링이 완료됐을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 생성된 Cluster 객체 전체가 배열로 넘어온다.\n   */\n  onClustered?: (\n    target: kakao.maps.MarkerClusterer,\n    clusters: kakao.maps.Cluster[]\n  ) => void\n  /**\n   * MarkerClusterer 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (target: kakao.maps.MarkerClusterer) => void\n}\n\nconst MarkerClusterer: React.FC<MarkerClustererProps> = ({\n  children,\n  averageCenter,\n  calculator,\n  clickable,\n  disableClickZoom,\n  gridSize,\n  hoverable,\n  minClusterSize,\n  minLevel,\n  styles,\n  texts,\n  onClusterclick,\n  onClusterdblclick,\n  onClustered,\n  onClusterout,\n  onClusterover,\n  onClusterrightclick,\n  onCreate,\n}) => {\n  const map = useMap(`MarkerClusterer`)\n  const [markerCluster, setMarkerCluster] =\n    useState<kakao.maps.MarkerClusterer>()\n\n  useEffect(() => {\n    if (!window.kakao.maps.MarkerClusterer) {\n      console.warn(\n        \"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n      )\n      return\n    }\n    const cluster = new kakao.maps.MarkerClusterer({\n      averageCenter,\n      calculator,\n      clickable,\n      disableClickZoom,\n      gridSize,\n      hoverable,\n      minClusterSize,\n      minLevel,\n      styles,\n      texts,\n    })\n\n    setMarkerCluster(cluster)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    markerCluster?.setMap(map)\n  }, [map, markerCluster])\n\n  useEffect(() => {\n    if (markerCluster && onCreate) onCreate(markerCluster)\n  }, [markerCluster, onCreate])\n\n  useEffect(() => {\n    if (markerCluster && gridSize) {\n      markerCluster.setGridSize(gridSize)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, gridSize])\n\n  useEffect(() => {\n    if (markerCluster && minClusterSize) {\n      markerCluster.setMinClusterSize(minClusterSize)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, minClusterSize])\n\n  useEffect(() => {\n    if (markerCluster && typeof averageCenter !== \"undefined\") {\n      markerCluster.setAverageCenter(averageCenter)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, averageCenter])\n\n  useEffect(() => {\n    if (markerCluster && minLevel) {\n      markerCluster.setMinLevel(minLevel)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, minLevel])\n\n  useEffect(() => {\n    if (markerCluster && texts) {\n      markerCluster.setTexts(texts)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, texts])\n\n  useEffect(() => {\n    if (markerCluster && calculator) {\n      markerCluster.setCalculator(calculator)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, calculator])\n\n  useEffect(() => {\n    if (markerCluster && styles) {\n      markerCluster.setStyles(styles)\n      markerCluster.redraw()\n    }\n  }, [markerCluster, styles])\n\n  useKakaoEvent(markerCluster, \"clusterclick\", onClusterclick)\n  useKakaoEvent(markerCluster, \"clusterover\", onClusterover)\n  useKakaoEvent(markerCluster, \"clusterout\", onClusterout)\n  useKakaoEvent(markerCluster, \"clusterdblclick\", onClusterdblclick)\n  useKakaoEvent(markerCluster, \"clusterrightclick\", onClusterrightclick)\n  useKakaoEvent(markerCluster, \"clustered\", onClustered)\n\n  if (!markerCluster) {\n    return null\n  }\n\n  return (\n    <KakaoMapMarkerClustererContext.Provider value={markerCluster}>\n      {children}\n    </KakaoMapMarkerClustererContext.Provider>\n  )\n}\n\nexport default MarkerClusterer\n","import React, { useContext, useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport InfoWindow from \"./InfoWindow\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\ninterface MarkerProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n\n  /**\n   * marker 생성 후 marker 객체를 전달하는 callback\n   */\n  onCreate?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * 마커의 이미지\n   */\n  image?: kakao.maps.MarkerImage\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * Contianer id에 대해서 지정합니다.\n     */\n    id?: string\n\n    /**\n     * Contianer className에 대해서 지정합니다.\n     */\n    className?: string\n\n    /**\n     * Contianer style에 대해서 지정합니다.\n     */\n    style?: React.CSSProperties\n\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n\n    /**\n     * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n     */\n    altitude?: number\n\n    /**\n     * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n     */\n    range?: number\n  }\n}\n\nconst Marker: React.FC<MarkerProps> = ({\n  map,\n  position,\n  children,\n  altitude,\n  clickable,\n  draggable,\n  image,\n  infoWindowOptions,\n  onCreate,\n  onClick,\n  onDragEnd,\n  onDragStart,\n  onMouseOut,\n  onMouseOver,\n  opacity,\n  range,\n  title,\n  zIndex,\n}) => {\n  const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n  // Marker 객체는 단 한번만 생성 되도록 함\n  const marker = useMemo(() => {\n    const kakaoMarker = new kakao.maps.Marker({\n      altitude,\n      clickable,\n      draggable,\n      image,\n      opacity,\n      range,\n      title,\n      zIndex,\n      position,\n    })\n\n    return kakaoMarker\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (markerCluster) {\n      markerCluster.addMarker(marker)\n    } else {\n      marker.setMap(map)\n    }\n\n    return () => {\n      if (markerCluster) {\n        markerCluster.removeMarker(marker)\n      } else {\n        marker.setMap(null)\n      }\n    }\n  }, [map, markerCluster, marker])\n\n  useEffect(() => {\n    if (onCreate) onCreate(marker)\n  }, [marker, onCreate])\n\n  useKakaoEvent(marker, \"click\", onClick)\n  useKakaoEvent(marker, \"dragstart\", onDragStart)\n  useKakaoEvent(marker, \"dragend\", onDragEnd)\n  useKakaoEvent(marker, \"mouseout\", onMouseOut)\n  useKakaoEvent(marker, \"mouseover\", onMouseOver)\n\n  // position이 변경되면 객체를 갱신한다.\n  useEffect(() => {\n    if (!map || !marker || !position) return\n\n    marker.setPosition(position)\n  }, [map, marker, position])\n\n  // image 객체가 존재하면 이미지를 로드한다\n  useEffect(() => {\n    if (!map || !marker || !image) return\n\n    marker.setImage(image)\n  }, [map, marker, image])\n\n  // altitude 값이 있으면 높이를 조정한다\n  useEffect(() => {\n    if (!map || !marker || !altitude) return\n\n    marker.setAltitude(altitude)\n  }, [map, marker, altitude])\n\n  // clickable 값이 있으면 클릭이 가능하도록 한다.\n  useEffect(() => {\n    if (!map || !marker || typeof clickable === \"undefined\") return\n\n    marker.setClickable(clickable)\n  }, [map, marker, clickable])\n\n  // draggable 값이 있으면 드래그가 가능하도록 한다.\n  useEffect(() => {\n    if (!map || !marker || typeof draggable === \"undefined\") return\n\n    marker.setDraggable(draggable)\n  }, [map, marker, draggable])\n\n  // opacity 값이 있으면 투명도를 조절한다.\n  useEffect(() => {\n    if (!map || !marker || !opacity) return\n\n    marker.setOpacity(opacity)\n  }, [map, marker, opacity])\n\n  // range 값이 있으면 마커의 가시반경을 조절한다.\n  useEffect(() => {\n    if (!map || !marker || !range) return\n\n    marker.setRange(range)\n  }, [map, marker, range])\n\n  // title 값이 있으면 마커의 제목을 조절한다.\n  useEffect(() => {\n    if (!map || !marker || !title) return\n\n    marker.setTitle(title)\n  }, [map, marker, title])\n\n  // zIndex 값이 있으면 마커의 zindex를 조절한다.\n  useEffect(() => {\n    if (!map || !marker || !zIndex) return\n\n    marker.setZIndex(zIndex)\n  }, [map, marker, zIndex])\n\n  if (children)\n    return (\n      <InfoWindow\n        position={position}\n        map={map}\n        marker={marker}\n        id={infoWindowOptions?.id}\n        className={infoWindowOptions?.className}\n        style={infoWindowOptions?.style}\n        altitude={infoWindowOptions?.altitude}\n        disableAutoPan={infoWindowOptions?.disableAutoPan}\n        range={infoWindowOptions?.range}\n        removable={infoWindowOptions?.removable}\n        zIndex={infoWindowOptions?.zIndex}\n      >\n        {children}\n      </InfoWindow>\n    )\n\n  return null\n}\n\nexport default Marker\n","import React, { useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport Marker from \"./Marker\"\n\nexport interface MapMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * Contianer id에 대해서 지정합니다.\n       */\n      id?: string\n\n      /**\n       * Contianer className에 대해서 지정합니다.\n       */\n      className?: string\n\n      /**\n       * Contianer style에 대해서 지정합니다.\n       */\n      style?: React.CSSProperties\n\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * Contianer id에 대해서 지정합니다.\n     */\n    id?: string\n\n    /**\n     * Contianer className에 대해서 지정합니다.\n     */\n    className?: string\n\n    /**\n     * Contianer style에 대해서 지정합니다.\n     */\n    style?: React.CSSProperties\n\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapMarker: React.FC<MapMarkerProps> = ({\n  image,\n  position,\n  children,\n  clickable,\n  draggable,\n  infoWindowOptions,\n  onClick,\n  onDragEnd,\n  onDragStart,\n  onMouseOut,\n  onMouseOver,\n  onCreate,\n  opacity,\n  title,\n  zIndex,\n}) => {\n  const map = useMap(`MapMarker`)\n\n  const markerImage = useMemo(() => {\n    return (\n      image &&\n      new kakao.maps.MarkerImage(\n        image.src,\n        new kakao.maps.Size(image.size.width, image.size.height),\n        {\n          alt: image.options?.alt,\n          coords: image.options?.coords,\n          offset:\n            image.options?.offset &&\n            new kakao.maps.Point(\n              image.options?.offset.x,\n              image.options?.offset.y\n            ),\n          shape: image.options?.shape,\n          spriteOrigin:\n            image.options?.spriteOrigin &&\n            new kakao.maps.Point(\n              image.options?.spriteOrigin.x,\n              image.options?.spriteOrigin.y\n            ),\n          spriteSize:\n            image.options?.spriteSize &&\n            new kakao.maps.Size(\n              image.options?.spriteSize.width,\n              image.options?.spriteSize.height\n            ),\n        }\n      )\n    )\n  }, [image])\n\n  const markerPosition = useMemo(() => {\n    if (\"lat\" in position) {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }\n    return new kakao.maps.Coords(position.x, position.y).toLatLng()\n\n    // @ts-ignore\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [position.lat, position.lng, position.x, position.y])\n\n  return (\n    <Marker\n      map={map}\n      position={markerPosition}\n      image={markerImage}\n      clickable={clickable}\n      draggable={draggable}\n      infoWindowOptions={infoWindowOptions}\n      onClick={onClick}\n      onDragEnd={onDragEnd}\n      onDragStart={onDragStart}\n      onMouseOut={onMouseOut}\n      onMouseOver={onMouseOver}\n      onCreate={onCreate}\n      opacity={opacity}\n      title={title}\n      zIndex={zIndex}\n    >\n      {children}\n    </Marker>\n  )\n}\n\nexport default MapMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapInfoWindow: React.FC<MapInfoWindowProps> = ({\n  id,\n  className,\n  style,\n  position,\n  children,\n  disableAutoPan,\n  removable,\n  zIndex,\n  onCreate,\n}) => {\n  const map = useMap(`MapInfoWindow`)\n  const infoPosition = useMemo(() => {\n    return new kakao.maps.LatLng(position.lat, position.lng)\n  }, [position.lat, position.lng])\n\n  return (\n    <InfoWindow\n      id={id}\n      className={className}\n      style={style}\n      disableAutoPan={disableAutoPan}\n      removable={removable}\n      zIndex={zIndex}\n      map={map}\n      position={infoPosition}\n      onCreate={onCreate}\n    >\n      {children}\n    </InfoWindow>\n  )\n}\n\nexport default MapInfoWindow\n","import React, { useEffect, useMemo, useRef } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CustomOverlayMapProps {\n  /**\n   * CustomOverlay의 Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * CustomOverlay의 Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * CustomOverlay의 Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Map에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 함수를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayMap: React.FC<CustomOverlayMapProps> = ({\n  id,\n  className,\n  style,\n  position,\n  children,\n  clickable,\n  xAnchor,\n  yAnchor,\n  zIndex,\n  onCreate,\n}) => {\n  const map = useMap(`CustomOverlayMap`)\n  const container = useRef(document.createElement(\"div\"))\n\n  const overlayPosition = useMemo(() => {\n    return new kakao.maps.LatLng(position.lat, position.lng)\n  }, [position.lat, position.lng])\n\n  const overlay = useMemo(() => {\n    const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n      clickable: clickable,\n      xAnchor: xAnchor,\n      yAnchor: yAnchor,\n      zIndex: zIndex,\n      position: overlayPosition,\n      content: container.current,\n    })\n\n    return KakaoCustomOverlay\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickable, xAnchor, yAnchor])\n\n  useEffect(() => {\n    if (!map) return\n\n    overlay.setMap(map)\n    return () => {\n      overlay.setMap(null)\n    }\n  }, [map, overlay])\n\n  useEffect(() => {\n    if (onCreate) onCreate(overlay)\n  }, [overlay, onCreate])\n\n  useEffect(() => {\n    overlay.setPosition(overlayPosition)\n  }, [overlay, overlayPosition])\n\n  useEffect(() => {\n    if (!zIndex) return\n    overlay.setZIndex(zIndex)\n  }, [overlay, zIndex])\n\n  useEffect(() => {\n    if (id) container.current.id = id\n  }, [id])\n\n  useEffect(() => {\n    if (className) container.current.className = className\n  }, [className])\n\n  useEffect(() => {\n    if (style) {\n      for (const [key, value] of Object.entries(style)) {\n        container.current.style[key] = value\n      }\n    }\n  }, [style])\n\n  return ReactDOM.createPortal(children, container.current)\n}\n\nexport default CustomOverlayMap\n","import React, { useEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeControlProps {\n  /**\n   * MapTypeControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 일반 지도/하이브리드 간 지도 타입 전환 컨트롤을 생성한다.\n * 현재는 일반 지도/하이브리드 간 전환 컨트롤만 지원되며 다른 지도 타입을 제어하는 컨트롤이 필요할 경우에는 직접 구현해야 한다.\n */\nconst MapTypeControl: React.FC<MapTypeControlProps> = ({\n  position = kakao.maps.ControlPosition.TOPRIGHT,\n}) => {\n  const map = useMap(`MapTypeControl`)\n\n  const mapTypeControl = useMemo(() => {\n    return new kakao.maps.MapTypeControl()\n  }, [])\n\n  useEffect(() => {\n    map.addControl(mapTypeControl, position)\n\n    return () => {\n      map.removeControl(mapTypeControl)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, position])\n\n  return null\n}\n\nexport default MapTypeControl\n","import React, { useEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface ZoomControlProps {\n  /**\n   * ZoomControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 확대·축소 컨트롤을 생성한다.\n */\nconst ZoomControl: React.FC<ZoomControlProps> = ({\n  position = kakao.maps.ControlPosition.RIGHT,\n}) => {\n  const map = useMap(`ZoomControl`)\n\n  const ZoomControl = useMemo(() => {\n    return new kakao.maps.ZoomControl()\n  }, [])\n\n  useEffect(() => {\n    map.addControl(ZoomControl, position)\n\n    return () => {\n      map.removeControl(ZoomControl)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, position])\n\n  return null\n}\n\nexport default ZoomControl\n","import React, { useEffect } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeIdProps {\n  /**\n   * MapTypeId를 정의 한다.\n   */\n  type: kakao.maps.MapTypeId\n}\n\n/**\n * 추가적으로 보이고 싶은 지도 타입을 추가 할 때 사용한다.\n */\nconst MapTypeId: React.FC<MapTypeIdProps> = ({ type }) => {\n  const map = useMap(`MapTypeId`)\n\n  useEffect(() => {\n    map.addOverlayMapTypeId(type)\n\n    return () => {\n      map.removeOverlayMapTypeId(type)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, type])\n\n  return null\n}\n\nexport default MapTypeId\n","import React, { useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CircleProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 원의 반지름 크기를 지정합니다 (미터 단위).\n   */\n  radius: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Circle) => void\n}\n\n/**\n * Map 상에 원을 그립니다.\n */\nconst Circle: React.FC<CircleProps> = ({\n  center,\n  radius,\n  fillColor,\n  fillOpacity,\n  strokeColor,\n  strokeOpacity,\n  strokeStyle,\n  strokeWeight,\n  zIndex,\n  onMouseover,\n  onMouseout,\n  onMousemove,\n  onMousedown,\n  onClick,\n  onCreate,\n}) => {\n  const map = useMap(`Circle`)\n\n  const circleCenter = useMemo(() => {\n    return new kakao.maps.LatLng(center.lat, center.lng)\n  }, [center.lat, center.lng])\n\n  const circle = useMemo(() => {\n    return new kakao.maps.Circle({\n      center: circleCenter,\n      radius,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    circle.setMap(map)\n    return () => {\n      circle.setMap(null)\n    }\n  }, [map, circle])\n\n  useEffect(() => {\n    if (onCreate) onCreate(circle)\n  }, [circle, onCreate])\n\n  useEffect(() => {\n    if (circle) circle.setPosition(circleCenter)\n  }, [circle, circleCenter])\n\n  useEffect(() => {\n    circle.setRadius(radius)\n  }, [circle, radius])\n\n  useEffect(() => {\n    if (!zIndex) return\n    circle.setZIndex(zIndex)\n  }, [circle, zIndex])\n\n  useEffect(() => {\n    circle.setOptions({\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    })\n  }, [\n    circle,\n    fillColor,\n    fillOpacity,\n    strokeColor,\n    strokeOpacity,\n    strokeStyle,\n    strokeWeight,\n  ])\n\n  useKakaoEvent(circle, \"mouseover\", onMouseover)\n  useKakaoEvent(circle, \"mouseout\", onMouseout)\n  useKakaoEvent(circle, \"mousemove\", onMousemove)\n  useKakaoEvent(circle, \"mousedown\", onMousedown)\n  useKakaoEvent(circle, \"click\", onClick)\n\n  return null\n}\n\nexport default Circle\n","import React, { useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolylineProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * 화살표 여부\n   */\n  endArrow?: boolean\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polyline) => void\n}\n\n/**\n * Map 상에 폴리라인을 그립니다.\n */\nconst Polyline: React.FC<PolylineProps> = ({\n  path,\n  endArrow,\n  onClick,\n  onMousedown,\n  onMousemove,\n  onMouseout,\n  onMouseover,\n  onCreate,\n  strokeColor,\n  strokeOpacity,\n  strokeStyle,\n  strokeWeight,\n  zIndex,\n}) => {\n  const map = useMap(`Polyline`)\n\n  const polyLinePath = useMemo(() => {\n    if ((path as LatLng[]).every((v) => v instanceof Array)) {\n      return (path as LatLng[][]).map((v) => {\n        return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n      })\n    }\n    return (path as LatLng[]).map((v) => {\n      return new kakao.maps.LatLng(v.lat, v.lng)\n    })\n  }, [path])\n\n  const polyline = useMemo(() => {\n    return new kakao.maps.Polyline({\n      path: polyLinePath,\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    polyline.setMap(map)\n    return () => polyline.setMap(null)\n  }, [map, polyline])\n\n  useEffect(() => {\n    if (onCreate) onCreate(polyline)\n  }, [polyline, onCreate])\n\n  useEffect(() => {\n    polyline.setOptions({\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    })\n  }, [\n    polyline,\n    endArrow,\n    strokeColor,\n    strokeOpacity,\n    strokeStyle,\n    strokeWeight,\n  ])\n\n  useEffect(() => {\n    polyline.setPath(polyLinePath)\n  }, [polyline, polyLinePath])\n\n  useEffect(() => {\n    if (zIndex) polyline.setZIndex(zIndex)\n  }, [polyline, zIndex])\n\n  useKakaoEvent(polyline, \"mouseover\", onMouseover)\n  useKakaoEvent(polyline, \"mouseout\", onMouseout)\n  useKakaoEvent(polyline, \"mousemove\", onMousemove)\n  useKakaoEvent(polyline, \"mousedown\", onMousedown)\n  useKakaoEvent(polyline, \"click\", onClick)\n\n  return null\n}\n\nexport default Polyline\n","import React, { useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolygonProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polygon) => void\n}\n\n/**\n * Map 상에 다각형을 그립니다.\n */\nconst Polygon: React.FC<PolygonProps> = ({\n  path,\n  onClick,\n  onMousedown,\n  onMousemove,\n  onMouseout,\n  onMouseover,\n  onCreate,\n  strokeColor,\n  strokeOpacity,\n  strokeStyle,\n  strokeWeight,\n  fillColor,\n  fillOpacity,\n  zIndex,\n}) => {\n  const map = useMap(`Polygon`)\n\n  const polygonPath = useMemo(() => {\n    if ((path as LatLng[]).every((v) => v instanceof Array)) {\n      return (path as LatLng[][]).map((v) => {\n        return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n      })\n    }\n    return (path as LatLng[]).map((v) => {\n      return new kakao.maps.LatLng(v.lat, v.lng)\n    })\n  }, [path])\n\n  const polygon = useMemo(() => {\n    return new kakao.maps.Polygon({\n      path: polygonPath,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    polygon.setMap(map)\n    return () => polygon.setMap(null)\n  }, [map, polygon])\n\n  useEffect(() => {\n    if (onCreate) onCreate(polygon)\n  }, [polygon, onCreate])\n\n  useEffect(() => {\n    polygon.setOptions({\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    })\n  }, [\n    polygon,\n    fillColor,\n    fillOpacity,\n    strokeColor,\n    strokeOpacity,\n    strokeStyle,\n    strokeWeight,\n  ])\n\n  useEffect(() => {\n    polygon.setPath(polygonPath)\n  }, [polygon, polygonPath])\n\n  useEffect(() => {\n    if (zIndex) polygon.setZIndex(zIndex)\n  }, [polygon, zIndex])\n\n  useKakaoEvent(polygon, \"mouseover\", onMouseover)\n  useKakaoEvent(polygon, \"mouseout\", onMouseout)\n  useKakaoEvent(polygon, \"mousemove\", onMousemove)\n  useKakaoEvent(polygon, \"mousedown\", onMousedown)\n  useKakaoEvent(polygon, \"click\", onClick)\n\n  return null\n}\n\nexport default Polygon\n","import React, { useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface RectangleProps {\n  bounds: {\n    sw: LatLng\n    ne: LatLng\n  }\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Rectangle) => void\n}\n\n/**\n * Map 상에 사각형을 그립니다.\n */\nconst Rectangle: React.FC<RectangleProps> = ({\n  bounds,\n  onClick,\n  onMousedown,\n  onMousemove,\n  onMouseout,\n  onMouseover,\n  onCreate,\n  strokeColor,\n  strokeOpacity,\n  strokeStyle,\n  strokeWeight,\n  fillColor,\n  fillOpacity,\n  zIndex,\n}) => {\n  const map = useMap(`Rectangle`)\n\n  const rectangleBounds = useMemo(() => {\n    return new kakao.maps.LatLngBounds(\n      new kakao.maps.LatLng(bounds.sw.lat, bounds.sw.lng),\n      new kakao.maps.LatLng(bounds.ne.lat, bounds.ne.lng)\n    )\n  }, [bounds])\n\n  const rectangle = useMemo(() => {\n    return new kakao.maps.Rectangle({\n      bounds: rectangleBounds,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    rectangle.setMap(map)\n    return () => rectangle.setMap(null)\n  }, [map, rectangle])\n\n  useEffect(() => {\n    if (onCreate) onCreate(rectangle)\n  }, [rectangle, onCreate])\n\n  useEffect(() => {\n    rectangle.setOptions({\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    })\n  }, [\n    rectangle,\n    fillColor,\n    fillOpacity,\n    strokeColor,\n    strokeOpacity,\n    strokeStyle,\n    strokeWeight,\n  ])\n\n  useEffect(() => {\n    rectangle.setBounds(rectangleBounds)\n  }, [rectangle, rectangleBounds])\n\n  useEffect(() => {\n    if (zIndex) rectangle.setZIndex(zIndex)\n  }, [rectangle, zIndex])\n\n  useKakaoEvent(rectangle, \"mouseover\", onMouseover)\n  useKakaoEvent(rectangle, \"mouseout\", onMouseout)\n  useKakaoEvent(rectangle, \"mousemove\", onMousemove)\n  useKakaoEvent(rectangle, \"mousedown\", onMousedown)\n  useKakaoEvent(rectangle, \"click\", onClick)\n\n  return null\n}\n\nexport default Rectangle\n","import React, { useEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface EllipseProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 미터 단위의 x축 반지름\n   */\n  rx: number\n\n  /**\n   * 미터 단위의 y축 반지름\n   */\n  ry: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n\n  /**\n   * 타원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 타원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 타원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Ellipse) => void\n}\n\n/**\n * Map 상에 타원을 그립니다.\n */\nconst Ellipse: React.FC<EllipseProps> = ({\n  center,\n  rx,\n  ry,\n  fillColor,\n  fillOpacity,\n  strokeColor,\n  strokeOpacity,\n  strokeStyle,\n  strokeWeight,\n  zIndex,\n  onMouseover,\n  onMouseout,\n  onMousemove,\n  onMousedown,\n  onClick,\n  onCreate,\n}) => {\n  const map = useMap(`Ellipse`)\n\n  const ellipseCenter = useMemo(() => {\n    return new kakao.maps.LatLng(center.lat, center.lng)\n  }, [center.lat, center.lng])\n\n  const ellipse = useMemo(() => {\n    return new kakao.maps.Ellipse({\n      center: ellipseCenter,\n      rx,\n      ry,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    ellipse.setMap(map)\n\n    return () => {\n      ellipse.setMap(null)\n    }\n  }, [map, ellipse])\n\n  useEffect(() => {\n    if (onCreate) onCreate(ellipse)\n  }, [ellipse, onCreate])\n\n  useEffect(() => {\n    if (ellipse) ellipse.setPosition(ellipseCenter)\n  }, [ellipse, ellipseCenter])\n\n  useEffect(() => {\n    ellipse.setRadius(rx, ry)\n  }, [ellipse, rx, ry])\n\n  useEffect(() => {\n    if (!zIndex) return\n    ellipse.setZIndex(zIndex)\n  }, [ellipse, zIndex])\n\n  useEffect(() => {\n    ellipse.setOptions({\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    })\n  }, [\n    ellipse,\n    fillColor,\n    fillOpacity,\n    strokeColor,\n    strokeOpacity,\n    strokeStyle,\n    strokeWeight,\n  ])\n\n  useKakaoEvent(ellipse, \"mouseover\", onMouseover)\n  useKakaoEvent(ellipse, \"mouseout\", onMouseout)\n  useKakaoEvent(ellipse, \"mousemove\", onMousemove)\n  useKakaoEvent(ellipse, \"mousedown\", onMousedown)\n  useKakaoEvent(ellipse, \"click\", onClick)\n\n  return null\n}\n\nexport default Ellipse\n","import React, { useEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface AbstractOverlayProps {\n  /**\n   * AbstractOverlay에서 필요한 `onAdd` 함수를 구현 합니다.\n   * 위치를 재조정할 필요가 있을 때 호출된다.\n   * 이 함수 내에서 엘리먼트의 위치를 잡아주어야 한다.\n   *\n   * 이때 arrow 함수가 아닌 일반 funtion으로 하여 this 바인딩이 되도록 하여 AbstractOverlay를 상속 받은 객체에 접근하여 필요 기능을 정의 합니다.\n   * ```tsx\n   * const panel = (this as kakao.maps.AbstractOverlay).getPanels().overlayLayer\n   * panel.appendChild(node.current)\n   * ```\n   */\n  draw: () => void\n  /**\n   * 지도에 올릴 때 호출된다.\n   * setMap(map) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 생성된 `DOM` 객체를 MapPanels에 자식 노드로 넣어주도록 한다.\n   *\n   * ```tsx\n   * var projection = this.getProjection()\n   * var point = projection.pointFromCoords(positionLatlng)\n   * var width = node.current.offsetWidth\n   * var height = node.current.offsetHeight\n   *\n   * console.log(point, width, height)\n   *\n   * node.current.style.left = point.x - width / 2 + \"px\"\n   * node.current.style.top = point.y - height / 2 + \"px\"\n   * ```\n   */\n  onAdd: () => void\n\n  /**\n   * 지도에서 제거할 때 호출된다.\n   * setMap(null) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 MapPanels에 자식 노드로 넣어준 엘리먼트를 제거하도록 한다.\n   *\n   * ```tsx\n   * this.node.parentNode.removeChild(this.node);\n   * ```\n   */\n  onRemove: () => void\n\n  /**\n   * 생성된 kakao.maps.AbstractOverlay 객체를 받을 수 있는 CallBack 함수 입니다.\n   */\n  onCreate?: (target: kakao.maps.AbstractOverlay) => void\n}\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay: React.FC<AbstractOverlayProps> = ({\n  draw,\n  onAdd,\n  onRemove,\n  onCreate,\n}) => {\n  const map = useMap()\n\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw: () => void, onAdd: () => void, onRemove: () => void) {\n        super()\n        this.draw = draw\n        this.onAdd = onAdd\n        this.onRemove = onRemove\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove)\n    return overlay\n  }, [draw, onAdd, onRemove])\n\n  useEffect(() => {\n    reactAbstractOverlay.setMap(map)\n\n    return () => {\n      reactAbstractOverlay.setMap(null)\n    }\n  }, [map, reactAbstractOverlay])\n\n  useEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay)\n  }, [reactAbstractOverlay, onCreate])\n  return null\n}\n\nexport default AbstractOverlay\n","import React, { useEffect, useRef, useState } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\n\nexport const KakaoRoadviewContext = React.createContext<kakao.maps.Roadview>(\n  undefined as unknown as kakao.maps.Roadview\n)\n\nexport interface RoadviewProps {\n  /**\n   * roadviewContinaer의 id에 대해서 지정합니다.\n   *\n   * @default  \"kakao-roadview-container\"\n   */\n  id?: string\n\n  /**\n   * roadviewContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * roadviewContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   * 해당 lat와 lng에 해당하는 radius범위 안에서 가장가까운 Roadview을 선택합니다.\n   * 만약 없다면 lat, lng로 설정 됩니다.\n   */\n  position: {\n    lat: number\n    lng: number\n    radius: number\n  }\n\n  /**\n   * 로드뷰 시작 지역의 고유 아이디 값.\n   */\n  panoId?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수평 좌표값.\n   */\n  panoX?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수직 좌표값.\n   */\n  panoY?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수평 각. 0이 정북방향. (0_360)\n   */\n  pan?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수직 각.(-90_90)\n   */\n  tilt?: number\n\n  /**\n   * 로드뷰 줌 초기값.(-3_3)\n   */\n  zoom?: number\n\n  /**\n   * 로드뷰 생성후 해당 객체를 전달하는 callback.\n   */\n  onCreate?: (roadview: kakao.maps.Roadview) => void\n\n  /**\n   * 로드뷰가 초기화를 끝내면 발생한다.\n   */\n  onInit?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 파노라마 ID가 바뀌면 발생한다.\n   */\n  onPanoidChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 시점이 바뀌면 발생한다.\n   */\n  onViewpointChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 지도 좌표가 바뀌면 발생한다.\n   */\n  onPositionChanged?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * getNearestPanoId 동작 실패시 호출 합니다.\n   */\n  onErrorGetNearestPanoId?: (target: kakao.maps.Roadview) => void\n}\n\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview: React.FC<RoadviewProps> = ({\n  id = \"kakao-roadview-container\",\n  style,\n  children,\n  position,\n  className,\n  pan,\n  panoId,\n  panoX,\n  panoY,\n  tilt,\n  zoom,\n  onCreate,\n  onInit,\n  onPanoidChange,\n  onPositionChanged,\n  onViewpointChange,\n  onErrorGetNearestPanoId,\n}) => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [roadview, setRoadview] = useState<kakao.maps.Roadview>()\n  const container = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!window.kakao) {\n      console.warn(\n        \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n      )\n      return\n    }\n    if (!container.current) return\n\n    const kakaoRoadview = new kakao.maps.Roadview(container.current, {\n      pan: pan,\n      panoId: panoId,\n      panoX: panoX,\n      panoY: panoY,\n      tilt: tilt,\n      zoom: zoom,\n    })\n\n    setRoadview(kakaoRoadview)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panoX, panoY, zoom])\n\n  useEffect(() => {\n    if (!roadview || !onCreate) return\n    onCreate(roadview)\n  }, [roadview, onCreate])\n\n  useEffect(() => {\n    if (\n      !roadview ||\n      panoId ||\n      (roadview.getPosition().getLat() === position.lat &&\n        roadview.getPosition().getLng() === position.lng)\n    )\n      return\n\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n\n    new kakao.maps.RoadviewClient().getNearestPanoId(\n      newPostion,\n      position.radius,\n      (panoId) => {\n        if (panoId === null && onErrorGetNearestPanoId) {\n          onErrorGetNearestPanoId(roadview)\n        } else {\n          roadview.setPanoId(panoId, newPostion)\n        }\n      }\n    )\n  }, [\n    roadview,\n    panoId,\n    position.lat,\n    position.lng,\n    position.radius,\n    onErrorGetNearestPanoId,\n  ])\n\n  useEffect(() => {\n    if (\n      !roadview ||\n      !panoId ||\n      panoId === roadview.getPanoId() ||\n      (roadview.getPosition().getLat() === position.lat &&\n        roadview.getPosition().getLng() === position.lng)\n    )\n      return\n\n    const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n    roadview.setPanoId(panoId, newPostion)\n  }, [roadview, panoId, position.lat, position.lng])\n\n  useEffect(() => {\n    if (!roadview) return\n\n    const prevViewpoint = roadview.getViewpoint()\n\n    if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return\n\n    if (pan) prevViewpoint.pan = pan\n    if (tilt) prevViewpoint.tilt = tilt\n    roadview.setViewpoint(prevViewpoint)\n  }, [roadview, pan, tilt])\n\n  useKakaoEvent(roadview, \"init\", (target) => {\n    setIsLoading(false)\n    if (onInit) onInit(target)\n  })\n  useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange)\n  useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange)\n  useKakaoEvent(roadview, \"position_changed\", onPositionChanged)\n\n  return (\n    <>\n      <div id={id} className={className} style={style} ref={container}></div>\n      {roadview && !isLoading && (\n        <KakaoRoadviewContext.Provider value={roadview}>\n          {children}\n        </KakaoRoadviewContext.Provider>\n      )}\n    </>\n  )\n}\n\nexport default Roadview\n","import { useContext } from \"react\"\nimport { KakaoRoadviewContext } from \"../components/Roadview\"\n\n/**\n * kakao roadview 객체를 가져오는 hook 입니다.\n * Roadview 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useRoadview = (componentName?: string) => {\n  const kakaoRoadview = useContext(KakaoRoadviewContext)\n  if (!kakaoRoadview) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useRoadview\"\n      } must exist inside Roadview Component!`\n    )\n  }\n\n  return kakaoRoadview\n}\n\nexport default useRoadview\n","import React, { useEffect, useMemo, useRef } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface CustomOverlayRoadviewProps {\n  /**\n   * CustomOverlay의 Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * CustomOverlay의 Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * CustomOverlay의 Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n  /**\n   * 해당 객체 생성 후 Roadview의 시점을 전환하여 Focus 할 지에 대해서 정의 합니다.\n   */\n  isFocus?: boolean\n\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰상에서 커스텀 오버레이의 높이(위치)를 지정한다.\n   * 단위는 m(미터)이며 현재 로드뷰의 바닥 높이를 기준으로 떨어져있는 높이를 말한다.\n   */\n  altitude?: number\n\n  /**\n   * 커스텀 오버레이의 가시반경을 설정한다.\n   * 로드뷰의 위치와 커스텀 오버레이의 위치 사이의 거리가 가시반경 이내일 경우에만 로드뷰상에 노출된다.\n   * 단위는 m(미터)이며 기본값은 500m이다.\n   */\n  range?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Roadview에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 함수를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayRoadview: React.FC<CustomOverlayRoadviewProps> = ({\n  id,\n  className,\n  style,\n  position,\n  children,\n  clickable,\n  xAnchor,\n  yAnchor,\n  zIndex,\n  altitude,\n  range,\n  isFocus,\n  onCreate,\n}) => {\n  const roadview = useRoadview(`CustomOverlayRoadview`)\n  const container = useRef(document.createElement(\"div\"))\n\n  const overlayPosition = useMemo(() => {\n    if (\"lat\" in position) {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }\n    return new kakao.maps.Viewpoint(\n      position.pan,\n      position.tilt,\n      position.zoom,\n      position.panoId\n    )\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [\n    // @ts-ignore\n    position.lat,\n    // @ts-ignore\n    position.lng,\n    // @ts-ignore\n    position.pan,\n    // @ts-ignore\n    position.tilt,\n    // @ts-ignore\n    position.zoom,\n    // @ts-ignore\n    position.panoId,\n  ])\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  const overlay = useMemo(() => {\n    const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n      clickable: clickable,\n      xAnchor: xAnchor,\n      yAnchor: yAnchor,\n      zIndex: zIndex,\n      position: overlayPosition,\n      content: container.current,\n    })\n\n    return KakaoCustomOverlay\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickable, xAnchor, yAnchor])\n\n  useEffect(() => {\n    if (!roadview) return\n\n    overlay.setMap(roadview)\n\n    if (isFocus) {\n      const projection = roadview.getProjection() // viewpoint(화면좌표)값을 추출할 수 있는 projection 객체를 가져옵니다.\n\n      // 커스텀오버레이의 position과 altitude값을 통해 viewpoint값(화면좌표)를 추출합니다.\n      const viewpoint = projection.viewpointFromCoords(\n        overlay.getPosition(),\n        overlay.getAltitude()\n      )\n      roadview.setViewpoint(viewpoint) //커스텀 오버레이를 로드뷰의 가운데에 오도록 로드뷰의 시점을 변화 시킵니다.\n    }\n\n    return () => {\n      overlay.setMap(null)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [overlay, roadview])\n\n  useEffect(() => {\n    if (onCreate) onCreate(overlay)\n  }, [overlay, onCreate])\n\n  useEffect(() => {\n    overlay.setPosition(overlayPosition)\n  }, [overlay, overlayPosition])\n\n  useEffect(() => {\n    if (!zIndex) return\n    overlay.setZIndex(zIndex)\n  }, [overlay, zIndex])\n\n  useEffect(() => {\n    if (!altitude) return\n    overlay.setAltitude(altitude)\n  }, [overlay, altitude])\n\n  useEffect(() => {\n    if (!range) return\n    overlay.setRange(range)\n  }, [overlay, range])\n\n  useEffect(() => {\n    if (id) container.current.id = id\n  }, [id])\n\n  useEffect(() => {\n    if (className) container.current.className = className\n  }, [className])\n\n  useEffect(() => {\n    if (style) {\n      for (const [key, value] of Object.entries(style)) {\n        container.current.style[key] = value\n      }\n    }\n  }, [style])\n\n  return ReactDOM.createPortal(children, container.current)\n}\n\nexport default CustomOverlayRoadview\n","import React, { useMemo } from \"react\"\nimport useRoadview from \"../hooks/useRoadview\"\nimport Marker from \"./Marker\"\n\nexport interface RoadviewMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * Contianer id에 대해서 지정합니다.\n     */\n    id?: string\n\n    /**\n     * Contianer className에 대해서 지정합니다.\n     */\n    className?: string\n\n    /**\n     * Contianer style에 대해서 지정합니다.\n     */\n    style?: React.CSSProperties\n\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewMarker: React.FC<RoadviewMarkerProps> = ({\n  image,\n  position,\n  children,\n  altitude,\n  clickable,\n  infoWindowOptions,\n  onClick,\n  onDragEnd,\n  onDragStart,\n  onMouseOut,\n  onMouseOver,\n  onCreate,\n  opacity,\n  range,\n  title,\n  zIndex,\n}) => {\n  const roadview = useRoadview(`RoadviewMarker`)\n\n  const markerImage = useMemo(() => {\n    return (\n      image &&\n      new kakao.maps.MarkerImage(\n        image.src,\n        new kakao.maps.Size(image.size.width, image.size.height),\n        {\n          alt: image.options?.alt,\n          coords: image.options?.coords,\n          offset:\n            image.options?.offset &&\n            new kakao.maps.Point(\n              image.options?.offset.x,\n              image.options?.offset.y\n            ),\n          shape: image.options?.shape,\n          spriteOrigin:\n            image.options?.spriteOrigin &&\n            new kakao.maps.Point(\n              image.options?.spriteOrigin.x,\n              image.options?.spriteOrigin.y\n            ),\n          spriteSize:\n            image.options?.spriteSize &&\n            new kakao.maps.Size(\n              image.options?.spriteSize.width,\n              image.options?.spriteSize.height\n            ),\n        }\n      )\n    )\n  }, [image])\n\n  const markerPosition = useMemo(() => {\n    if (\"lat\" in position) {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }\n    if (\"x\" in position) {\n      return new kakao.maps.Coords(position.x, position.y).toLatLng()\n    }\n    return new kakao.maps.Viewpoint(\n      position.pan,\n      position.tilt,\n      position.zoom,\n      position.panoId\n    )\n\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [\n    // @ts-ignore\n    position.lat,\n    // @ts-ignore\n    position.lng,\n    // @ts-ignore\n    position.x,\n    // @ts-ignore\n    position.y,\n    // @ts-ignore\n    position.pan,\n    // @ts-ignore\n    position.tilt,\n    // @ts-ignore\n    position.zoom,\n    // @ts-ignore\n    position?.panoId,\n  ])\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return (\n    <Marker\n      map={roadview}\n      position={markerPosition}\n      image={markerImage}\n      altitude={altitude}\n      clickable={clickable}\n      infoWindowOptions={infoWindowOptions}\n      onClick={onClick}\n      onDragEnd={onDragEnd}\n      onDragStart={onDragStart}\n      onMouseOut={onMouseOut}\n      onMouseOver={onMouseOver}\n      onCreate={onCreate}\n      opacity={opacity}\n      range={range}\n      title={title}\n      zIndex={zIndex}\n    >\n      {children}\n    </Marker>\n  )\n}\n\nexport default RoadviewMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface RoadviewInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewInfoWindow: React.FC<RoadviewInfoWindowProps> = ({\n  id,\n  className,\n  style,\n  position,\n  children,\n  altitude,\n  disableAutoPan,\n  range,\n  removable,\n  zIndex,\n  onCreate,\n}) => {\n  const roadview = useRoadview(`RoadviewInfoWindow`)\n  const infoPosition = useMemo(() => {\n    if (\"lat\" in position) {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }\n    return new kakao.maps.Viewpoint(\n      position.pan,\n      position.tilt,\n      position.zoom,\n      position.panoId\n    )\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [\n    // @ts-ignore\n    position.lat,\n    // @ts-ignore\n    position.lng,\n    // @ts-ignore\n    position.pan,\n    // @ts-ignore\n    position.tilt,\n    // @ts-ignore\n    position.zoom,\n    // @ts-ignore\n    position.panoId,\n  ])\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return (\n    <InfoWindow\n      id={id}\n      className={className}\n      style={style}\n      altitude={altitude}\n      disableAutoPan={disableAutoPan}\n      range={range}\n      removable={removable}\n      zIndex={zIndex}\n      map={roadview}\n      position={infoPosition}\n      onCreate={onCreate}\n    >\n      {children}\n    </InfoWindow>\n  )\n}\n\nexport default RoadviewInfoWindow\n"],"names":["useKakaoEvent","target","type","callback","useEffect","wrapCallback","arg","undefined","kakao","maps","event","addListener","removeListener","KakaoMapContext","React","createContext","Map","id","style","children","center","isPanto","padding","className","disableDoubleClick","disableDoubleClickZoom","draggable","zoomable","keyboardShortcuts","level","maxLevel","minLevel","mapTypeId","projectionId","scrollwheel","tileAnimation","onCreate","onBoundsChanged","onCenterChanged","onClick","onDoubleClick","onDrag","onDragEnd","onDragStart","onIdle","onMaptypeidChanged","onMouseMove","onRightClick","onTileLoaded","onZoomChanged","onZoomStart","map","setMap","useState","container","useRef","window","current","load","initalMapCenter","LatLng","lat","lng","Coords","x","y","kakaoMap","console","warn","prevCenter","getCenter","toLatLng","centerPosition","equals","panTo","setCenter","setDraggable","setZoomable","setKeyboardShortcuts","setLevel","setMapTypeId","setProjectionId","setMaxLevel","setMinLevel","ref","Provider","value","useMap","componentName","useContext","Error","InfoWindow","position","marker","altitude","disableAutoPan","range","removable","zIndex","document","createElement","infoWindow","useMemo","kakaoInfoWindow","content","whiteSpace","open","close","setPosition","setAltitude","setRange","setZIndex","key","Object","entries","ReactDom","createPortal","KakaoMapMarkerClustererContext","MarkerClusterer","averageCenter","calculator","clickable","disableClickZoom","gridSize","hoverable","minClusterSize","styles","texts","onClusterclick","onClusterdblclick","onClustered","onClusterout","onClusterover","onClusterrightclick","markerCluster","setMarkerCluster","cluster","setGridSize","redraw","setMinClusterSize","setAverageCenter","setTexts","setCalculator","setStyles","Marker","image","infoWindowOptions","onMouseOut","onMouseOver","opacity","title","addMarker","removeMarker","setImage","setClickable","setOpacity","setTitle","MapMarker","markerImage","MarkerImage","src","Size","size","width","height","alt","options","_image$options","coords","_image$options2","offset","Point","_image$options4","_image$options5","shape","_image$options6","spriteOrigin","_image$options8","_image$options9","spriteSize","_image$options11","_image$options12","markerPosition","MapInfoWindow","infoPosition","CustomOverlayMap","xAnchor","yAnchor","overlayPosition","overlay","CustomOverlay","ReactDOM","MapTypeControl","ControlPosition","TOPRIGHT","mapTypeControl","addControl","removeControl","ZoomControl","RIGHT","MapTypeId","addOverlayMapTypeId","removeOverlayMapTypeId","Circle","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeStyle","strokeWeight","onMouseover","onMouseout","onMousemove","onMousedown","circleCenter","circle","setRadius","setOptions","Polyline","path","endArrow","polyLinePath","every","v","Array","p","polyline","setPath","Polygon","polygonPath","polygon","Rectangle","bounds","rectangleBounds","LatLngBounds","sw","ne","rectangle","setBounds","Ellipse","rx","ry","ellipseCenter","ellipse","AbstractOverlay","draw","onAdd","onRemove","reactAbstractOverlay","ReactAbstractOveraly","constructor","super","this","KakaoRoadviewContext","Roadview","pan","panoId","panoX","panoY","tilt","zoom","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","isLoading","setIsLoading","roadview","setRoadview","kakaoRoadview","getPosition","getLat","getLng","newPostion","RoadviewClient","getNearestPanoId","setPanoId","getPanoId","prevViewpoint","getViewpoint","setViewpoint","useRoadview","CustomOverlayRoadview","isFocus","Viewpoint","viewpoint","getProjection","viewpointFromCoords","getAltitude","RoadviewMarker","RoadviewInfoWindow"],"mappings":"qHAEA,MAAMA,EAAgB,CAIpBC,EAIAC,EAIAC,KAEAC,EAAU,KACR,IAAKH,IAAWE,EAAU,OAE1B,MAAME,EAAe,IAAIC,SACXC,IAARD,EAA0BH,EAASF,GAC3BE,EAASF,KAAWK,GAKlC,OAFAE,MAAMC,KAAKC,MAAMC,YAAYV,EAAQC,EAAMG,GAEpC,KACLG,MAAMC,KAAKC,MAAME,eAAeX,EAAQC,EAAMG,KAE/C,CAACJ,EAAQC,EAAMC,KC1BPU,EAAkBC,EAAMC,mBACnCR,GAyNIS,EAA0B,EAC9BC,GAAAA,EAAK,sBACLC,MAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,QAAAA,GAAU,EACVC,QAAAA,EAAU,GACVC,UAAAA,EACAC,mBAAAA,EACAC,uBAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,kBAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,QAAAA,EACAC,cAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,YAAAA,MAEA,MAAOC,EAAKC,GAAUC,IAEhBC,EAAYC,EAAuB,MAiIzC,OA/HAnD,EAAU,KACHoD,OAAOhD,MAMP8C,EAAUG,SAIfjD,MAAMC,KAAKiD,KAAK,KACd,MAAMC,EACJ,QAASvC,EACL,IAAIZ,MAAMC,KAAKmD,OAAOxC,EAAOyC,IAAKzC,EAAO0C,KACzC,IAAItD,MAAMC,KAAKsD,OAAO3C,EAAO4C,EAAG5C,EAAO6C,GACvCC,EAAW,IAAI1D,MAAMC,KAAKO,IAAIsC,EAAUG,QAA2B,CACvErC,OAAQuC,EACRnC,mBAAoBA,EACpBC,uBAAwBA,EACxBC,UAAWA,EACXE,kBAAmBA,EACnBC,MAAOA,EACPG,UAAWA,EACXC,aAAcA,EACdC,YAAaA,EACbC,cAAeA,IAGjBiB,EAAOc,KA3BPC,QAAQC,KACN,kFA6BH,CAAC5C,EAAoBC,EAAwBO,EAAWG,IAE3D/B,EAAU,KACH+C,GAAQf,GACbA,EAASe,IACR,CAACA,EAAKf,IAGThC,EAAU,KACR,IAAK+C,EAAK,OAEV,IAAIkB,EAAalB,EAAImB,YACjBD,aAAsB7D,MAAMC,KAAKsD,SACnCM,EAAaA,EAAWE,YAG1B,MAAMC,EACJ,QAASpD,EACL,IAAIZ,MAAMC,KAAKmD,OAAOxC,EAAOyC,IAAKzC,EAAO0C,KACzC,IAAItD,MAAMC,KAAKsD,OAAO3C,EAAO4C,EAAG5C,EAAO6C,GAG1CO,aAA0BhE,MAAMC,KAAKmD,QACpCY,EAAeC,OAAOJ,IACvBG,aAA0BhE,MAAMC,KAAKsD,QACpCS,EAAeD,WAAWE,OAAOJ,KAKjChD,EACF8B,EAAIuB,MAAMF,EAAgBlD,GAE1B6B,EAAIwB,UAAUH,KAIf,CAACrB,EAAK/B,EAAOyC,IAAKzC,EAAO0C,IAAK1C,EAAO4C,EAAG5C,EAAO6C,IAElD7D,EAAU,KACH+C,QAA4B,IAAdzB,GACnByB,EAAIyB,aAAalD,IAChB,CAACyB,EAAKzB,IAETtB,EAAU,KACH+C,QAA2B,IAAbxB,GACnBwB,EAAI0B,YAAYlD,IACf,CAACwB,EAAKxB,IAETvB,EAAU,KACH+C,GAAQvB,GAAkD,kBAAtBA,GAEzCuB,EAAI2B,qBAAqBlD,IACxB,CAACuB,EAAKvB,IAETxB,EAAU,KACH+C,GAAQtB,GACbsB,EAAI4B,SAASlD,IACZ,CAACsB,EAAKtB,IAETzB,EAAU,KACH+C,GAAQnB,GACbmB,EAAI6B,aAAahD,IAChB,CAACmB,EAAKnB,IAET5B,EAAU,KACH+C,GAAQlB,GACbkB,EAAI8B,gBAAgBhD,IACnB,CAACkB,EAAKlB,IAET7B,EAAU,KACH+C,GAAQrB,GACbqB,EAAI+B,YAAYpD,IACf,CAACqB,EAAKrB,IAET1B,EAAU,KACH+C,GAAQpB,GACboB,EAAIgC,YAAYpD,IACf,CAACoB,EAAKpB,IAET/B,EAAcmD,EAAK,iBAAkBd,GACrCrC,EAAcmD,EAAK,iBAAkBb,GACrCtC,EAAcmD,EAAK,QAASZ,GAC5BvC,EAAcmD,EAAK,WAAYX,GAC/BxC,EAAcmD,EAAK,OAAQV,GAC3BzC,EAAcmD,EAAK,YAAaR,GAChC3C,EAAcmD,EAAK,UAAWT,GAC9B1C,EAAcmD,EAAK,OAAQP,GAC3B5C,EAAcmD,EAAK,oBAAqBN,GACxC7C,EAAcmD,EAAK,YAAaL,GAChC9C,EAAcmD,EAAK,aAAcJ,GACjC/C,EAAcmD,EAAK,cAAeH,GAClChD,EAAcmD,EAAK,eAAgBF,GACnCjD,EAAcmD,EAAK,aAAcD,GAG/BpC,gCACEA,uBAAKG,GAAIA,EAAIC,MAAOA,EAAOK,UAAWA,EAAW6D,IAAK9B,IACrDH,GACCrC,gBAACD,EAAgBwE,UAASC,MAAOnC,GAC9BhC,KClYLoE,EAAUC,IACd,MAAMtB,EAAWuB,EAAW5E,GAC5B,IAAKqD,EACH,UAAUwB,OAENF,EAAgBA,EAAgB,aAAe,+CAKrD,OAAOtB,GCqCHyB,EAAwC,EAC5C1E,GAAAA,EACAM,UAAAA,EACAL,MAAAA,EACAiC,IAAAA,EACAyC,SAAAA,EACAC,OAAAA,EACA1E,SAAAA,EACA2E,SAAAA,EACAC,eAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,OAAAA,EACA9D,SAAAA,MAEA,MAAMkB,EAAYC,EAAO4C,SAASC,cAAc,QAE1CC,EAAaC,EAAQ,KACzB,MAAMC,EAAkB,IAAI/F,MAAMC,KAAKkF,WAAW,CAChDG,SAAUA,EACVC,eAAgBA,EAChBC,MAAOA,EACPC,UAAWA,EACXC,OAAQA,EACRM,QAASlD,EAAUG,QACnBmC,SAAUA,IAGZ,OADAtC,EAAUG,QAAQvC,MAAMuF,WAAa,SAC9BF,GAEN,CAACR,EAAgBE,IAkDpB,OAhDA7F,EAAU,KACRiG,EAAWK,KAAKvD,EAAK0C,GACd,KACLQ,EAAWM,UAGZ,CAACxD,EAAK0C,IAETzF,EAAU,KACJgC,GAAUA,EAASiE,IACtB,CAACA,EAAYjE,IAEhBhC,EAAU,KACHiG,GACLA,EAAWO,YAAYhB,IACtB,CAACS,EAAYT,IAEhBxF,EAAU,KACHiG,GAAeP,GACpBO,EAAWQ,YAAYf,IACtB,CAACO,EAAYP,IAEhB1F,EAAU,KACHiG,GAAeL,GACpBK,EAAWS,SAASd,IACnB,CAACK,EAAYL,IAEhB5F,EAAU,KACHiG,GAAeH,GACpBG,EAAWU,UAAUb,IACpB,CAACG,EAAYH,IAEhB9F,EAAU,KACJa,IAAIqC,EAAUG,QAAQxC,GAAKA,IAC9B,CAACA,IAEJb,EAAU,KACJmB,IAAW+B,EAAUG,QAAQlC,UAAYA,IAC5C,CAACA,IAEJnB,EAAU,KACR,GAAIc,EACF,IAAK,MAAO8F,EAAK1B,KAAU2B,OAAOC,QAAQhG,GACxCoC,EAAUG,QAAQvC,MAAM8F,GAAO1B,GAGlC,CAACpE,IAEGiG,EAASC,aAAajG,EAAUmC,EAAUG,UClItC4D,EACXvG,EAAMC,mBACJR,GAgHE+G,EAAkD,EACtDnG,SAAAA,EACAoG,cAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,eAAAA,EACA9F,SAAAA,EACA+F,OAAAA,EACAC,MAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,oBAAAA,EACAjG,SAAAA,MAEA,MAAMe,EAAMoC,sBACL+C,EAAeC,GACpBlF,IA0FF,OAxFAjD,EAAU,KACR,IAAKoD,OAAOhD,MAAMC,KAAK6G,gBAIrB,YAHAnD,QAAQC,KACN,2FAIJ,MAAMoE,EAAU,IAAIhI,MAAMC,KAAK6G,gBAAgB,CAC7CC,cAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,eAAAA,EACA9F,SAAAA,EACA+F,OAAAA,EACAC,MAAAA,IAGFQ,EAAiBC,IAEhB,IAEHpI,EAAU,WACRkI,GAAAA,EAAelF,OAAOD,IACrB,CAACA,EAAKmF,IAETlI,EAAU,KACJkI,GAAiBlG,GAAUA,EAASkG,IACvC,CAACA,EAAelG,IAEnBhC,EAAU,KACJkI,GAAiBX,IACnBW,EAAcG,YAAYd,GAC1BW,EAAcI,WAEf,CAACJ,EAAeX,IAEnBvH,EAAU,KACJkI,GAAiBT,IACnBS,EAAcK,kBAAkBd,GAChCS,EAAcI,WAEf,CAACJ,EAAeT,IAEnBzH,EAAU,KACJkI,QAA0C,IAAlBf,IAC1Be,EAAcM,iBAAiBrB,GAC/Be,EAAcI,WAEf,CAACJ,EAAef,IAEnBnH,EAAU,KACJkI,GAAiBvG,IACnBuG,EAAcnD,YAAYpD,GAC1BuG,EAAcI,WAEf,CAACJ,EAAevG,IAEnB3B,EAAU,KACJkI,GAAiBP,IACnBO,EAAcO,SAASd,GACvBO,EAAcI,WAEf,CAACJ,EAAeP,IAEnB3H,EAAU,KACJkI,GAAiBd,IACnBc,EAAcQ,cAActB,GAC5Bc,EAAcI,WAEf,CAACJ,EAAed,IAEnBpH,EAAU,KACJkI,GAAiBR,IACnBQ,EAAcS,UAAUjB,GACxBQ,EAAcI,WAEf,CAACJ,EAAeR,IAEnB9H,EAAcsI,EAAe,eAAgBN,GAC7ChI,EAAcsI,EAAe,cAAeF,GAC5CpI,EAAcsI,EAAe,aAAcH,GAC3CnI,EAAcsI,EAAe,kBAAmBL,GAChDjI,EAAcsI,EAAe,oBAAqBD,GAClDrI,EAAcsI,EAAe,YAAaJ,GAErCI,EAKHxH,gBAACuG,EAA+BhC,UAASC,MAAOgD,GAC7CnH,SC/GD6H,EAAgC,EACpC7F,IAAAA,EACAyC,SAAAA,EACAzE,SAAAA,EACA2E,SAAAA,EACA2B,UAAAA,EACA/F,UAAAA,EACAuH,MAAAA,EACAC,kBAAAA,EACA9G,SAAAA,EACAG,QAAAA,EACAG,UAAAA,EACAC,YAAAA,EACAwG,WAAAA,EACAC,YAAAA,EACAC,QAAAA,EACArD,MAAAA,EACAsD,MAAAA,EACApD,OAAAA,MAEA,MAAMoC,EAAgB7C,EAAW4B,GAG3BxB,EAASS,EAAQ,IACD,IAAI9F,MAAMC,KAAKuI,OAAO,CACxClD,SAAAA,EACA2B,UAAAA,EACA/F,UAAAA,EACAuH,MAAAA,EACAI,QAAAA,EACArD,MAAAA,EACAsD,MAAAA,EACApD,OAAAA,EACAN,SAAAA,IAKD,IA2FH,OAzFAxF,EAAU,KACJkI,EACFA,EAAciB,UAAU1D,GAExBA,EAAOzC,OAAOD,GAGT,KACDmF,EACFA,EAAckB,aAAa3D,GAE3BA,EAAOzC,OAAO,QAGjB,CAACD,EAAKmF,EAAezC,IAExBzF,EAAU,KACJgC,GAAUA,EAASyD,IACtB,CAACA,EAAQzD,IAEZpC,EAAc6F,EAAQ,QAAStD,GAC/BvC,EAAc6F,EAAQ,YAAalD,GACnC3C,EAAc6F,EAAQ,UAAWnD,GACjC1C,EAAc6F,EAAQ,WAAYsD,GAClCnJ,EAAc6F,EAAQ,YAAauD,GAGnChJ,EAAU,KACH+C,GAAQ0C,GAAWD,GAExBC,EAAOe,YAAYhB,IAClB,CAACzC,EAAK0C,EAAQD,IAGjBxF,EAAU,KACH+C,GAAQ0C,GAAWoD,GAExBpD,EAAO4D,SAASR,IACf,CAAC9F,EAAK0C,EAAQoD,IAGjB7I,EAAU,KACH+C,GAAQ0C,GAAWC,GAExBD,EAAOgB,YAAYf,IAClB,CAAC3C,EAAK0C,EAAQC,IAGjB1F,EAAU,KACH+C,GAAQ0C,QAA+B,IAAd4B,GAE9B5B,EAAO6D,aAAajC,IACnB,CAACtE,EAAK0C,EAAQ4B,IAGjBrH,EAAU,KACH+C,GAAQ0C,QAA+B,IAAdnE,GAE9BmE,EAAOjB,aAAalD,IACnB,CAACyB,EAAK0C,EAAQnE,IAGjBtB,EAAU,KACH+C,GAAQ0C,GAAWwD,GAExBxD,EAAO8D,WAAWN,IACjB,CAAClG,EAAK0C,EAAQwD,IAGjBjJ,EAAU,KACH+C,GAAQ0C,GAAWG,GAExBH,EAAOiB,SAASd,IACf,CAAC7C,EAAK0C,EAAQG,IAGjB5F,EAAU,KACH+C,GAAQ0C,GAAWyD,GAExBzD,EAAO+D,SAASN,IACf,CAACnG,EAAK0C,EAAQyD,IAGjBlJ,EAAU,KACH+C,GAAQ0C,GAAWK,GAExBL,EAAOkB,UAAUb,IAChB,CAAC/C,EAAK0C,EAAQK,IAEb/E,EAEAL,gBAAC6E,GACCC,SAAUA,EACVzC,IAAKA,EACL0C,OAAQA,EACR5E,SAAIiI,SAAAA,EAAmBjI,GACvBM,gBAAW2H,SAAAA,EAAmB3H,UAC9BL,YAAOgI,SAAAA,EAAmBhI,MAC1B4E,eAAUoD,SAAAA,EAAmBpD,SAC7BC,qBAAgBmD,SAAAA,EAAmBnD,eACnCC,YAAOkD,SAAAA,EAAmBlD,MAC1BC,gBAAWiD,SAAAA,EAAmBjD,UAC9BC,aAAQgD,SAAAA,EAAmBhD,QAE1B/E,SC9FH0I,EAAsC,EAC1CZ,MAAAA,EACArD,SAAAA,EACAzE,SAAAA,EACAsG,UAAAA,EACA/F,UAAAA,EACAwH,kBAAAA,EACA3G,QAAAA,EACAG,UAAAA,EACAC,YAAAA,EACAwG,WAAAA,EACAC,YAAAA,EACAhH,SAAAA,EACAiH,QAAAA,EACAC,MAAAA,EACApD,OAAAA,MAEA,MAAM/C,EAAMoC,eAENuE,EAAcxD,EAAQ,iCAC1B,OACE2C,GACA,IAAIzI,MAAMC,KAAKsJ,YACbd,EAAMe,IACN,IAAIxJ,MAAMC,KAAKwJ,KAAKhB,EAAMiB,KAAKC,MAAOlB,EAAMiB,KAAKE,QACjD,CACEC,aAAKpB,EAAMqB,gBAANC,EAAeF,IACpBG,gBAAQvB,EAAMqB,gBAANG,EAAeD,OACvBE,iBACEzB,EAAMqB,kBAASI,SACf,IAAIlK,MAAMC,KAAKkK,eACb1B,EAAMqB,gBAANM,EAAeF,OAAO1G,WACtBiF,EAAMqB,gBAANO,EAAeH,OAAOzG,GAE1B6G,eAAO7B,EAAMqB,gBAANS,EAAeD,MACtBE,uBACE/B,EAAMqB,kBAASU,eACf,IAAIxK,MAAMC,KAAKkK,eACb1B,EAAMqB,gBAANW,EAAeD,aAAahH,WAC5BiF,EAAMqB,gBAANY,EAAeF,aAAa/G,GAEhCkH,qBACElC,EAAMqB,kBAASa,aACf,IAAI3K,MAAMC,KAAKwJ,cACbhB,EAAMqB,gBAANc,EAAeD,WAAWhB,eAC1BlB,EAAMqB,gBAANe,EAAeF,WAAWf,WAKnC,CAACnB,IAEEqC,EAAiBhF,EAAQ,IACzB,QAASV,MACApF,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,SAE3CtD,MAAMC,KAAKsD,OAAO6B,EAAS5B,EAAG4B,EAAS3B,GAAGM,WAIpD,CAACqB,EAAS/B,IAAK+B,EAAS9B,IAAK8B,EAAS5B,EAAG4B,EAAS3B,IAErD,OACEnD,gBAACkI,GACC7F,IAAKA,EACLyC,SAAU0F,EACVrC,MAAOa,EACPrC,UAAWA,EACX/F,UAAWA,EACXwH,kBAAmBA,EACnB3G,QAASA,EACTG,UAAWA,EACXC,YAAaA,EACbwG,WAAYA,EACZC,YAAaA,EACbhH,SAAUA,EACViH,QAASA,EACTC,MAAOA,EACPpD,OAAQA,GAEP/E,IC3MDoK,EAA8C,EAClDtK,GAAAA,EACAM,UAAAA,EACAL,MAAAA,EACA0E,SAAAA,EACAzE,SAAAA,EACA4E,eAAAA,EACAE,UAAAA,EACAC,OAAAA,EACA9D,SAAAA,MAEA,MAAMe,EAAMoC,mBACNiG,EAAelF,EAAQ,QAChB9F,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,KACnD,CAAC8B,EAAS/B,IAAK+B,EAAS9B,MAE3B,OACEhD,gBAAC6E,GACC1E,GAAIA,EACJM,UAAWA,EACXL,MAAOA,EACP6E,eAAgBA,EAChBE,UAAWA,EACXC,OAAQA,EACR/C,IAAKA,EACLyC,SAAU4F,EACVpJ,SAAUA,GAETjB,ICvBDsK,EAAoD,EACxDxK,GAAAA,EACAM,UAAAA,EACAL,MAAAA,EACA0E,SAAAA,EACAzE,SAAAA,EACAsG,UAAAA,EACAiE,QAAAA,EACAC,QAAAA,EACAzF,OAAAA,EACA9D,SAAAA,MAEA,MAAMe,EAAMoC,sBACNjC,EAAYC,EAAO4C,SAASC,cAAc,QAE1CwF,EAAkBtF,EAAQ,QACnB9F,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,KACnD,CAAC8B,EAAS/B,IAAK+B,EAAS9B,MAErB+H,EAAUvF,EAAQ,IACK,IAAI9F,MAAMC,KAAKqL,cAAc,CACtDrE,UAAWA,EACXiE,QAASA,EACTC,QAASA,EACTzF,OAAQA,EACRN,SAAUgG,EACVpF,QAASlD,EAAUG,UAMpB,CAACgE,EAAWiE,EAASC,IAwCxB,OAtCAvL,EAAU,KACR,GAAK+C,EAGL,OADA0I,EAAQzI,OAAOD,GACR,KACL0I,EAAQzI,OAAO,QAEhB,CAACD,EAAK0I,IAETzL,EAAU,KACJgC,GAAUA,EAASyJ,IACtB,CAACA,EAASzJ,IAEbhC,EAAU,KACRyL,EAAQjF,YAAYgF,IACnB,CAACC,EAASD,IAEbxL,EAAU,KACH8F,GACL2F,EAAQ9E,UAAUb,IACjB,CAAC2F,EAAS3F,IAEb9F,EAAU,KACJa,IAAIqC,EAAUG,QAAQxC,GAAKA,IAC9B,CAACA,IAEJb,EAAU,KACJmB,IAAW+B,EAAUG,QAAQlC,UAAYA,IAC5C,CAACA,IAEJnB,EAAU,KACR,GAAIc,EACF,IAAK,MAAO8F,EAAK1B,KAAU2B,OAAOC,QAAQhG,GACxCoC,EAAUG,QAAQvC,MAAM8F,GAAO1B,GAGlC,CAACpE,IAEG6K,EAAS3E,aAAajG,EAAUmC,EAAUG,UCnH7CuI,EAAgD,EACpDpG,SAAAA,EAAWpF,MAAMC,KAAKwL,gBAAgBC,aAEtC,MAAM/I,EAAMoC,oBAEN4G,EAAiB7F,EAAQ,QAClB9F,MAAMC,KAAKuL,eACrB,IAYH,OAVA5L,EAAU,KACR+C,EAAIiJ,WAAWD,EAAgBvG,GAExB,KACLzC,EAAIkJ,cAAcF,KAInB,CAAChJ,EAAKyC,UClBL0G,EAA0C,EAC9C1G,SAAAA,EAAWpF,MAAMC,KAAKwL,gBAAgBM,UAEtC,MAAMpJ,EAAMoC,iBAEN+G,EAAchG,EAAQ,QACf9F,MAAMC,KAAK6L,YACrB,IAYH,OAVAlM,EAAU,KACR+C,EAAIiJ,WAAWE,EAAa1G,GAErB,KACLzC,EAAIkJ,cAAcC,KAInB,CAACnJ,EAAKyC,UCjBL4G,EAAsC,EAAGtM,KAAAA,MAC7C,MAAMiD,EAAMoC,eAYZ,OAVAnF,EAAU,KACR+C,EAAIsJ,oBAAoBvM,GAEjB,KACLiD,EAAIuJ,uBAAuBxM,KAI5B,CAACiD,EAAKjD,UCmELyM,EAAgC,EACpCvL,OAAAA,EACAwL,OAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,EACAiH,YAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,YAAAA,EACA/K,QAAAA,EACAH,SAAAA,MAEA,MAAMe,EAAMoC,YAENgI,EAAejH,EAAQ,QAChB9F,MAAMC,KAAKmD,OAAOxC,EAAOyC,IAAKzC,EAAO0C,KAC/C,CAAC1C,EAAOyC,IAAKzC,EAAO0C,MAEjB0J,EAASlH,EAAQ,QACV9F,MAAMC,KAAKkM,OAAO,CAC3BvL,OAAQmM,EACRX,OAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,IAGD,IAmDH,OAjDA9F,EAAU,KACRoN,EAAOpK,OAAOD,GACP,KACLqK,EAAOpK,OAAO,QAEf,CAACD,EAAKqK,IAETpN,EAAU,KACJgC,GAAUA,EAASoL,IACtB,CAACA,EAAQpL,IAEZhC,EAAU,KACJoN,GAAQA,EAAO5G,YAAY2G,IAC9B,CAACC,EAAQD,IAEZnN,EAAU,KACRoN,EAAOC,UAAUb,IAChB,CAACY,EAAQZ,IAEZxM,EAAU,KACH8F,GACLsH,EAAOzG,UAAUb,IAChB,CAACsH,EAAQtH,IAEZ9F,EAAU,KACRoN,EAAOE,WAAW,CAChBb,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,KAED,CACDM,EACAX,EACAC,EACAC,EACAC,EACAC,EACAC,IAGFlN,EAAcwN,EAAQ,YAAaL,GACnCnN,EAAcwN,EAAQ,WAAYJ,GAClCpN,EAAcwN,EAAQ,YAAaH,GACnCrN,EAAcwN,EAAQ,YAAaF,GACnCtN,EAAcwN,EAAQ,QAASjL,SChG3BoL,EAAoC,EACxCC,KAAAA,EACAC,SAAAA,EACAtL,QAAAA,EACA+K,YAAAA,EACAD,YAAAA,EACAD,WAAAA,EACAD,YAAAA,EACA/K,SAAAA,EACA2K,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,MAEA,MAAM/C,EAAMoC,cAENuI,EAAexH,EAAQ,IACtBsH,EAAkBG,MAAOC,GAAMA,aAAaC,OACvCL,EAAoBzK,IAAK6K,GACxBA,EAAE7K,IAAK+K,GAAM,IAAI1N,MAAMC,KAAKmD,OAAOsK,EAAErK,IAAKqK,EAAEpK,OAG/C8J,EAAkBzK,IAAK6K,OAClBxN,MAAMC,KAAKmD,OAAOoK,EAAEnK,IAAKmK,EAAElK,MAEvC,CAAC8J,IAEEO,EAAW7H,EAAQ,QACZ9F,MAAMC,KAAKkN,SAAS,CAC7BC,KAAME,EACND,SAAAA,EACAd,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,IAGD,IA0CH,OAxCA9F,EAAU,KACR+N,EAAS/K,OAAOD,GACT,IAAMgL,EAAS/K,OAAO,OAC5B,CAACD,EAAKgL,IAET/N,EAAU,KACJgC,GAAUA,EAAS+L,IACtB,CAACA,EAAU/L,IAEdhC,EAAU,KACR+N,EAAST,WAAW,CAClBG,SAAAA,EACAd,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,KAED,CACDiB,EACAN,EACAd,EACAC,EACAC,EACAC,IAGF9M,EAAU,KACR+N,EAASC,QAAQN,IAChB,CAACK,EAAUL,IAEd1N,EAAU,KACJ8F,GAAQiI,EAASpH,UAAUb,IAC9B,CAACiI,EAAUjI,IAEdlG,EAAcmO,EAAU,YAAahB,GACrCnN,EAAcmO,EAAU,WAAYf,GACpCpN,EAAcmO,EAAU,YAAad,GACrCrN,EAAcmO,EAAU,YAAab,GACrCtN,EAAcmO,EAAU,QAAS5L,SC3E7B8L,EAAkC,EACtCT,KAAAA,EACArL,QAAAA,EACA+K,YAAAA,EACAD,YAAAA,EACAD,WAAAA,EACAD,YAAAA,EACA/K,SAAAA,EACA2K,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAL,UAAAA,EACAC,YAAAA,EACA5G,OAAAA,MAEA,MAAM/C,EAAMoC,aAEN+I,EAAchI,EAAQ,IACrBsH,EAAkBG,MAAOC,GAAMA,aAAaC,OACvCL,EAAoBzK,IAAK6K,GACxBA,EAAE7K,IAAK+K,GAAM,IAAI1N,MAAMC,KAAKmD,OAAOsK,EAAErK,IAAKqK,EAAEpK,OAG/C8J,EAAkBzK,IAAK6K,OAClBxN,MAAMC,KAAKmD,OAAOoK,EAAEnK,IAAKmK,EAAElK,MAEvC,CAAC8J,IAEEW,EAAUjI,EAAQ,QACX9F,MAAMC,KAAK4N,QAAQ,CAC5BT,KAAMU,EACNzB,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,IAGD,IA4CH,OA1CA9F,EAAU,KACRmO,EAAQnL,OAAOD,GACR,IAAMoL,EAAQnL,OAAO,OAC3B,CAACD,EAAKoL,IAETnO,EAAU,KACJgC,GAAUA,EAASmM,IACtB,CAACA,EAASnM,IAEbhC,EAAU,KACRmO,EAAQb,WAAW,CACjBb,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,KAED,CACDqB,EACA1B,EACAC,EACAC,EACAC,EACAC,EACAC,IAGF9M,EAAU,KACRmO,EAAQH,QAAQE,IACf,CAACC,EAASD,IAEblO,EAAU,KACJ8F,GAAQqI,EAAQxH,UAAUb,IAC7B,CAACqI,EAASrI,IAEblG,EAAcuO,EAAS,YAAapB,GACpCnN,EAAcuO,EAAS,WAAYnB,GACnCpN,EAAcuO,EAAS,YAAalB,GACpCrN,EAAcuO,EAAS,YAAajB,GACpCtN,EAAcuO,EAAS,QAAShM,SChF5BiM,EAAsC,EAC1CC,OAAAA,EACAlM,QAAAA,EACA+K,YAAAA,EACAD,YAAAA,EACAD,WAAAA,EACAD,YAAAA,EACA/K,SAAAA,EACA2K,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAL,UAAAA,EACAC,YAAAA,EACA5G,OAAAA,MAEA,MAAM/C,EAAMoC,eAENmJ,EAAkBpI,EAAQ,QACnB9F,MAAMC,KAAKkO,aACpB,IAAInO,MAAMC,KAAKmD,OAAO6K,EAAOG,GAAG/K,IAAK4K,EAAOG,GAAG9K,KAC/C,IAAItD,MAAMC,KAAKmD,OAAO6K,EAAOI,GAAGhL,IAAK4K,EAAOI,GAAG/K,MAEhD,CAAC2K,IAEEK,EAAYxI,EAAQ,QACb9F,MAAMC,KAAK+N,UAAU,CAC9BC,OAAQC,EACR7B,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,IAGD,IA4CH,OA1CA9F,EAAU,KACR0O,EAAU1L,OAAOD,GACV,IAAM2L,EAAU1L,OAAO,OAC7B,CAACD,EAAK2L,IAET1O,EAAU,KACJgC,GAAUA,EAAS0M,IACtB,CAACA,EAAW1M,IAEfhC,EAAU,KACR0O,EAAUpB,WAAW,CACnBb,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,KAED,CACD4B,EACAjC,EACAC,EACAC,EACAC,EACAC,EACAC,IAGF9M,EAAU,KACR0O,EAAUC,UAAUL,IACnB,CAACI,EAAWJ,IAEftO,EAAU,KACJ8F,GAAQ4I,EAAU/H,UAAUb,IAC/B,CAAC4I,EAAW5I,IAEflG,EAAc8O,EAAW,YAAa3B,GACtCnN,EAAc8O,EAAW,WAAY1B,GACrCpN,EAAc8O,EAAW,YAAazB,GACtCrN,EAAc8O,EAAW,YAAaxB,GACtCtN,EAAc8O,EAAW,QAASvM,SChE9ByM,EAAkC,EACtC5N,OAAAA,EACA6N,GAAAA,EACAC,GAAAA,EACArC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,EACAiH,YAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,YAAAA,EACA/K,QAAAA,EACAH,SAAAA,MAEA,MAAMe,EAAMoC,aAEN4J,EAAgB7I,EAAQ,QACjB9F,MAAMC,KAAKmD,OAAOxC,EAAOyC,IAAKzC,EAAO0C,KAC/C,CAAC1C,EAAOyC,IAAKzC,EAAO0C,MAEjBsL,EAAU9I,EAAQ,QACX9F,MAAMC,KAAKuO,QAAQ,CAC5B5N,OAAQ+N,EACRF,GAAAA,EACAC,GAAAA,EACArC,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAhH,OAAAA,IAGD,IAoDH,OAlDA9F,EAAU,KACRgP,EAAQhM,OAAOD,GAER,KACLiM,EAAQhM,OAAO,QAEhB,CAACD,EAAKiM,IAEThP,EAAU,KACJgC,GAAUA,EAASgN,IACtB,CAACA,EAAShN,IAEbhC,EAAU,KACJgP,GAASA,EAAQxI,YAAYuI,IAChC,CAACC,EAASD,IAEb/O,EAAU,KACRgP,EAAQ3B,UAAUwB,EAAIC,IACrB,CAACE,EAASH,EAAIC,IAEjB9O,EAAU,KACH8F,GACLkJ,EAAQrI,UAAUb,IACjB,CAACkJ,EAASlJ,IAEb9F,EAAU,KACRgP,EAAQ1B,WAAW,CACjBb,UAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,aAAAA,KAED,CACDkC,EACAvC,EACAC,EACAC,EACAC,EACAC,EACAC,IAGFlN,EAAcoP,EAAS,YAAajC,GACpCnN,EAAcoP,EAAS,WAAYhC,GACnCpN,EAAcoP,EAAS,YAAa/B,GACpCrN,EAAcoP,EAAS,YAAa9B,GACpCtN,EAAcoP,EAAS,QAAS7M,SCzC5B8M,EAAkD,EACtDC,KAAAA,EACAC,MAAAA,EACAC,SAAAA,EACApN,SAAAA,MAEA,MAAMe,EAAMoC,IAENkK,EAAuBnJ,EAAQ,KACnC,MAAMoJ,UAA6BlP,MAAMC,KAAK4O,gBAC5CM,YAAYL,EAAkBC,EAAmBC,GAC/CI,QACAC,KAAKP,KAAOA,EACZO,KAAKN,MAAQA,EACbM,KAAKL,SAAWA,GAIpB,OADgB,IAAIE,EAAqBJ,EAAMC,EAAOC,IAErD,CAACF,EAAMC,EAAOC,IAajB,OAXApP,EAAU,KACRqP,EAAqBrM,OAAOD,GAErB,KACLsM,EAAqBrM,OAAO,QAE7B,CAACD,EAAKsM,IAETrP,EAAU,KACJgC,GAAUA,EAASqN,IACtB,CAACA,EAAsBrN,UCjLf0N,EAAuBhP,EAAMC,mBACxCR,GAkGIwP,EAAoC,EACxC9O,GAAAA,EAAK,2BACLC,MAAAA,EACAC,SAAAA,EACAyE,SAAAA,EACArE,UAAAA,EACAyO,IAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,KAAAA,EACAC,KAAAA,EACAjO,SAAAA,EACAkO,OAAAA,EACAC,eAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAC,wBAAAA,MAEA,MAAOC,EAAWC,GAAgBvN,GAAS,IACpCwN,EAAUC,GAAezN,IAC1BC,EAAYC,EAAuB,MA8FzC,OA5FAnD,EAAU,KACR,IAAKoD,OAAOhD,MAIV,YAHA2D,QAAQC,KACN,iFAIJ,IAAKd,EAAUG,QAAS,OAExB,MAAMsN,EAAgB,IAAIvQ,MAAMC,KAAKsP,SAASzM,EAAUG,QAAS,CAC/DuM,IAAKA,EACLC,OAAQA,EACRC,MAAOA,EACPC,MAAOA,EACPC,KAAMA,EACNC,KAAMA,IAGRS,EAAYC,IAEX,CAACb,EAAOC,EAAOE,IAElBjQ,EAAU,KACHyQ,GAAazO,GAClBA,EAASyO,IACR,CAACA,EAAUzO,IAEdhC,EAAU,KACR,IACGyQ,GACDZ,GACCY,EAASG,cAAcC,WAAarL,EAAS/B,KAC5CgN,EAASG,cAAcE,WAAatL,EAAS9B,IAE/C,OAEF,MAAMqN,EAAa,IAAI3Q,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,MAEhE,IAAItD,MAAMC,KAAK2Q,gBAAiBC,iBAC9BF,EACAvL,EAASgH,OACRqD,IACgB,OAAXA,GAAmBS,EACrBA,EAAwBG,GAExBA,EAASS,UAAUrB,EAAQkB,MAIhC,CACDN,EACAZ,EACArK,EAAS/B,IACT+B,EAAS9B,IACT8B,EAASgH,OACT8D,IAGFtQ,EAAU,KACR,IACGyQ,IACAZ,GACDA,IAAWY,EAASU,aACnBV,EAASG,cAAcC,WAAarL,EAAS/B,KAC5CgN,EAASG,cAAcE,WAAatL,EAAS9B,IAE/C,OAEF,MAAMqN,EAAa,IAAI3Q,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,KAChE+M,EAASS,UAAUrB,EAAQkB,IAC1B,CAACN,EAAUZ,EAAQrK,EAAS/B,IAAK+B,EAAS9B,MAE7C1D,EAAU,KACR,IAAKyQ,EAAU,OAEf,MAAMW,EAAgBX,EAASY,eAE3BD,EAAcxB,MAAQA,GAAOwB,EAAcpB,OAASA,IAEpDJ,IAAKwB,EAAcxB,IAAMA,GACzBI,IAAMoB,EAAcpB,KAAOA,GAC/BS,EAASa,aAAaF,KACrB,CAACX,EAAUb,EAAKI,IAEnBpQ,EAAc6Q,EAAU,OAAS5Q,IAC/B2Q,GAAa,GACTN,GAAQA,EAAOrQ,KAErBD,EAAc6Q,EAAU,iBAAkBN,GAC1CvQ,EAAc6Q,EAAU,oBAAqBJ,GAC7CzQ,EAAc6Q,EAAU,mBAAoBL,GAG1C1P,gCACEA,uBAAKG,GAAIA,EAAIM,UAAWA,EAAWL,MAAOA,EAAOkE,IAAK9B,IACrDuN,IAAaF,GACZ7P,gBAACgP,EAAqBzK,UAASC,MAAOuL,GACnC1P,KCvNLwQ,EAAenM,IACnB,MAAMuL,EAAgBtL,EAAWqK,GACjC,IAAKiB,EACH,UAAUrL,OAENF,EAAgBA,EAAgB,aAAe,yDAKrD,OAAOuL,GC6EHa,EAA8D,EAClE3Q,GAAAA,EACAM,UAAAA,EACAL,MAAAA,EACA0E,SAAAA,EACAzE,SAAAA,EACAsG,UAAAA,EACAiE,QAAAA,EACAC,QAAAA,EACAzF,OAAAA,EACAJ,SAAAA,EACAE,MAAAA,EACA6L,QAAAA,EACAzP,SAAAA,MAEA,MAAMyO,EAAWc,2BACXrO,EAAYC,EAAO4C,SAASC,cAAc,QAE1CwF,EAAkBtF,EAAQ,IAC1B,QAASV,MACApF,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,SAE3CtD,MAAMC,KAAKqR,UACpBlM,EAASoK,IACTpK,EAASwK,KACTxK,EAASyK,KACTzK,EAASqK,QAGV,CAEDrK,EAAS/B,IAET+B,EAAS9B,IAET8B,EAASoK,IAETpK,EAASwK,KAETxK,EAASyK,KAETzK,EAASqK,SAILpE,EAAUvF,EAAQ,IACK,IAAI9F,MAAMC,KAAKqL,cAAc,CACtDrE,UAAWA,EACXiE,QAASA,EACTC,QAASA,EACTzF,OAAQA,EACRN,SAAUgG,EACVpF,QAASlD,EAAUG,UAKpB,CAACgE,EAAWiE,EAASC,IA+DxB,OA7DAvL,EAAU,KACR,GAAKyQ,EAAL,CAIA,GAFAhF,EAAQzI,OAAOyN,GAEXgB,EAAS,CACX,MAGME,EAHalB,EAASmB,gBAGCC,oBAC3BpG,EAAQmF,cACRnF,EAAQqG,eAEVrB,EAASa,aAAaK,GAGxB,MAAO,KACLlG,EAAQzI,OAAO,SAGhB,CAACyI,EAASgF,IAEbzQ,EAAU,KACJgC,GAAUA,EAASyJ,IACtB,CAACA,EAASzJ,IAEbhC,EAAU,KACRyL,EAAQjF,YAAYgF,IACnB,CAACC,EAASD,IAEbxL,EAAU,KACH8F,GACL2F,EAAQ9E,UAAUb,IACjB,CAAC2F,EAAS3F,IAEb9F,EAAU,KACH0F,GACL+F,EAAQhF,YAAYf,IACnB,CAAC+F,EAAS/F,IAEb1F,EAAU,KACH4F,GACL6F,EAAQ/E,SAASd,IAChB,CAAC6F,EAAS7F,IAEb5F,EAAU,KACJa,IAAIqC,EAAUG,QAAQxC,GAAKA,IAC9B,CAACA,IAEJb,EAAU,KACJmB,IAAW+B,EAAUG,QAAQlC,UAAYA,IAC5C,CAACA,IAEJnB,EAAU,KACR,GAAIc,EACF,IAAK,MAAO8F,EAAK1B,KAAU2B,OAAOC,QAAQhG,GACxCoC,EAAUG,QAAQvC,MAAM8F,GAAO1B,GAGlC,CAACpE,IAEG6K,EAAS3E,aAAajG,EAAUmC,EAAUG,UC/B7C0O,EAAgD,EACpDlJ,MAAAA,EACArD,SAAAA,EACAzE,SAAAA,EACA2E,SAAAA,EACA2B,UAAAA,EACAyB,kBAAAA,EACA3G,QAAAA,EACAG,UAAAA,EACAC,YAAAA,EACAwG,WAAAA,EACAC,YAAAA,EACAhH,SAAAA,EACAiH,QAAAA,EACArD,MAAAA,EACAsD,MAAAA,EACApD,OAAAA,MAEA,MAAM2K,EAAWc,oBAEX7H,EAAcxD,EAAQ,iCAC1B,OACE2C,GACA,IAAIzI,MAAMC,KAAKsJ,YACbd,EAAMe,IACN,IAAIxJ,MAAMC,KAAKwJ,KAAKhB,EAAMiB,KAAKC,MAAOlB,EAAMiB,KAAKE,QACjD,CACEC,aAAKpB,EAAMqB,gBAANC,EAAeF,IACpBG,gBAAQvB,EAAMqB,gBAANG,EAAeD,OACvBE,iBACEzB,EAAMqB,kBAASI,SACf,IAAIlK,MAAMC,KAAKkK,eACb1B,EAAMqB,gBAANM,EAAeF,OAAO1G,WACtBiF,EAAMqB,gBAANO,EAAeH,OAAOzG,GAE1B6G,eAAO7B,EAAMqB,gBAANS,EAAeD,MACtBE,uBACE/B,EAAMqB,kBAASU,eACf,IAAIxK,MAAMC,KAAKkK,eACb1B,EAAMqB,gBAANW,EAAeD,aAAahH,WAC5BiF,EAAMqB,gBAANY,EAAeF,aAAa/G,GAEhCkH,qBACElC,EAAMqB,kBAASa,aACf,IAAI3K,MAAMC,KAAKwJ,cACbhB,EAAMqB,gBAANc,EAAeD,WAAWhB,eAC1BlB,EAAMqB,gBAANe,EAAeF,WAAWf,WAKnC,CAACnB,IAEEqC,EAAiBhF,EAAQ,IACzB,QAASV,MACApF,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,KAElD,MAAO8B,MACEpF,MAAMC,KAAKsD,OAAO6B,EAAS5B,EAAG4B,EAAS3B,GAAGM,eAE5C/D,MAAMC,KAAKqR,UACpBlM,EAASoK,IACTpK,EAASwK,KACTxK,EAASyK,KACTzK,EAASqK,QAIV,CAEDrK,EAAS/B,IAET+B,EAAS9B,IAET8B,EAAS5B,EAET4B,EAAS3B,EAET2B,EAASoK,IAETpK,EAASwK,KAETxK,EAASyK,WAETzK,SAAAA,EAAUqK,SAIZ,OACEnP,gBAACkI,GACC7F,IAAK0N,EACLjL,SAAU0F,EACVrC,MAAOa,EACPhE,SAAUA,EACV2B,UAAWA,EACXyB,kBAAmBA,EACnB3G,QAASA,EACTG,UAAWA,EACXC,YAAaA,EACbwG,WAAYA,EACZC,YAAaA,EACbhH,SAAUA,EACViH,QAASA,EACTrD,MAAOA,EACPsD,MAAOA,EACPpD,OAAQA,GAEP/E,IChNDiR,EAAwD,EAC5DnR,GAAAA,EACAM,UAAAA,EACAL,MAAAA,EACA0E,SAAAA,EACAzE,SAAAA,EACA2E,SAAAA,EACAC,eAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,OAAAA,EACA9D,SAAAA,MAEA,MAAMyO,EAAWc,wBACXnG,EAAelF,EAAQ,IACvB,QAASV,MACApF,MAAMC,KAAKmD,OAAOgC,EAAS/B,IAAK+B,EAAS9B,SAE3CtD,MAAMC,KAAKqR,UACpBlM,EAASoK,IACTpK,EAASwK,KACTxK,EAASyK,KACTzK,EAASqK,QAGV,CAEDrK,EAAS/B,IAET+B,EAAS9B,IAET8B,EAASoK,IAETpK,EAASwK,KAETxK,EAASyK,KAETzK,EAASqK,SAIX,OACEnP,gBAAC6E,GACC1E,GAAIA,EACJM,UAAWA,EACXL,MAAOA,EACP4E,SAAUA,EACVC,eAAgBA,EAChBC,MAAOA,EACPC,UAAWA,EACXC,OAAQA,EACR/C,IAAK0N,EACLjL,SAAU4F,EACVpJ,SAAUA,GAETjB"}